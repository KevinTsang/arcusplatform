/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Driver for a Leviton VRR15-1LZ 15A Receptacle
 *
 *
 */
driver			"ZWLevitonVRR151LZDriver"
description		"Driver for a Leviton VRR15 In-wall Receptacle"
version			"2.9"
protocol			"ZWAV"
deviceTypeHint	"Switch"
productId		"64ffad"
vendor 			"Leviton"
model 			"VRR15-1LZ"

matcher			'ZWAV:Manufacturer': 0x001D, 'ZWAV:ProductType': 0x1603, 'ZWAV:ProductId': 0x0334


capabilities	'DevicePower', 'Switch'

importCapability 'zwave/GenericZWaveSwitch'
importCapability 'zwave/GenericZWaveVersion'

// Device Type:
//		Binary Power Switch
//
// Command Classes:
//		0x25   (37) Switch_Binary
//		0x27   (39) Switch_All
//    0x2B   (43) Scene_Activation
//    0x2C   (44) Scene_Actuator_Conf
//		0x72  (114) Manufacturer_Specific
//		0x73  (115) PowerLevel
//		0x77  (119) Node_Naming
//    0x82 (-126) Hail
//		0x86 (-122) Version
//		0x91 (-111) Manufacturer_proprietary

//DevicePower attributes are assumed
DevicePower.battery              0
DevicePower.source               DevicePower.SOURCE_LINE
DevicePower.linecapable          true
DevicePower.backupbatterycapable false

final int POLLING_INTERVAL_SEC    = 3600        // every hour
final int OFFLINE_TIMEOUT_SECS    = 12000       // 3 hrs 20 minutes


////////////////////////////////////////////////////////////////////////////////
// Driver Lifecycle Callbacks
////////////////////////////////////////////////////////////////////////////////

onAdded {
	Switch.statechanged         ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : now())
	Switch.state 					 Switch.STATE_OFF
}

onConnected {
	log.debug "Device connected"

	vars.'MAX_READBACKS' = 10				// used by GenericZWaveSwitch to limit maximum read operations
	vars.'DFLT_READBACK_DELAY' = 1000	// used by GenericZWaveSwitch to determine delay between read retries (in mSec)
	vars.'READBACK_CNT' = 0					// used by GenericZWaveSwitch to limit read retries

	ZWave.setOfflineTimeout(OFFLINE_TIMEOUT_SECS)
	ZWave.poll(POLLING_INTERVAL_SEC, ZWave.switch_multilevel.get)
}

onDisconnected {
	log.debug "Device disconnected"
}

onRemoved {
	log.debug "Device removed"
}


////////////////////////////////////////////////////////////////////////////////
// Capability Closures
////////////////////////////////////////////////////////////////////////////////

setAttributes('swit') {
	log.debug "Device received Set Switch Attributes {}", message
	GenericZWaveSwitch.handleSwitchState(this,null,message)
}


////////////////////////////////////////////////////////////////////////////////
// Protocol Message Callbacks
////////////////////////////////////////////////////////////////////////////////

onZWaveMessage.switch_binary.report {
 	GenericZWaveSwitch.handleBinarySwitchReport(this,DEVICE_NAME,message)
}

onZWaveNodeInfo {
	log.debug "Device reported Node Info: {}, {}, {}, {}, {}", message.getNodeId(), message.getStatus(), message.getBasic(), message.getGeneric(), message.getSpecific()
	// devices report a Node Info every time their state is changed locally,
	// so do a Binary Switch Get to get the current state (delay this so device does not report back "busy")
	GenericZWaveSwitch.readSwitchState(this, DEVICE_NAME)

}

onZWaveMessage.application_status.busy {
	log.debug "Device reported Busy"
	// when device reports that it is busy, do another Binary Switch Get, if we haven't done too many already
	GenericZWaveSwitch.readSwitchStateAgain(this, DEVICE_NAME)
}

onZWaveMessage.hail.hail {
	log.debug "Device sent a Hail"
	GenericZWaveSwitch.readSwitchState(this, DEVICE_NAME)
}

onZWaveMessage {
    log.debug "Device received unhandled ZWave message {}", message
    return false;
}


