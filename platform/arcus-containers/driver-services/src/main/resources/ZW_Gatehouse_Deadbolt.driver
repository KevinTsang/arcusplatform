/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Driver for a Z-wave Gatehouse Lock 
 *  Temporary driver for vendor development 
 */

import groovy.transform.Field 
 
driver			'ZWGatehouseDeadbolt'
description		'Driver for a ZWave Gatehouse Deadbolt'
version			'1.0'
protocol		'ZWAV'
deviceTypeHint	'Lock'
productId		'41d524'
vendor 			'Gatehouse'
model 			'TBD'

matcher			'ZWAV:Manufacturer': 0x0262  //Temporary, will fill out before production
capabilities	'DevicePower', 'DoorLock'
importCapability 'zwave/GenericZWaveDoorLock'

/////////////////////////////////////////////////////////////
// Generic Device Class:    GENERIC_TYPE_ENTRY_CONTROL
// Specific Device Class:   SPECIFIC_TYPE_SECURE_KEYPAD_DOOR_LOCK
//
// Command Classes:   TBD once sample available
//		0x20 (32)   Basic
//      0x22 (34)   APPLICATION_STATUS
//      0x4C (76)   DOOR_LOCK_LOGGING
//      0x4E (78)   SCHEDULE_ENTRY_LOCK
//      0x62 (98)   DOOR_LOCK
//      0x63 (99)   USER_CODE
//		0x70 (112)  Configuration
//		0x71 (113)  Alarm
//		0x72 (114)  Manufacturer Specific
//      0x75 (117)  PROTECTION
//		0x80 (-128) Battery
//		0x85 (-123) Association
//		0x8B (-117) TIME_PARAMETERS
//      0x98 (-104) Security (v1)
/////////////////////////////////////////////////////////////
DevicePower.battery 				   0
DevicePower.source               DevicePower.SOURCE_BATTERY
DevicePower.linecapable          false
DevicePower.backupbatterycapable false
DoorLock.type					      DoorLock.TYPE_DEADBOLT

def final String DEVICE_NAME	=	"Fushing Deadbolt"
def final int MAX_SUPPORTED_PINS    = 30     // Schlage deadbolt can hold up to 30 user codes
def final int SETUP_DELAY_MILLIS	   = 10000	// 10 seconds after connect ask for the lock state again in case we don't get a response from our original request
def final int OFFLINE_TIMEOUT_SECS  =  44100 // 12h 15m
def final int DOOR_STATE_POLL_SECS	=	14400	// 4h
def final int BATTERY_POLLING_INTERVAL_SEC	= 86400	//Ask for battery level every 24 hours

////////////////////////////////////////////////////////////////////////////////
// Driver Lifecycle Callbacks
////////////////////////////////////////////////////////////////////////////////
  
onAdded {
	vars.'CURRENT_NAME' = DEVICE_NAME
	vars.'DISABLE_GET_AFTER_PINSET' = true
	log.debug "${DEVICE_NAME} added"
	
	// set default attribute values
	DevicePower.sourcechanged     ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())

	DoorLock.type                 DoorLock.TYPE_DEADBOLT
	DoorLock.supportsBuzzIn		   true
	DoorLock.supportsInvalidPin	true
	DoorLock.numPinsSupported     MAX_SUPPORTED_PINS
	DoorLock.lockstate            DoorLock.LOCKSTATE_UNLOCKED
	DoorLock.lockstatechanged     ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
   DoorLock.slots			         [:]

   log.debug "${DEVICE_NAME} clear out all existing pins....."
   ZWave.user_code.set( 0, 0x00, 0x00, 0x00, 0x00, 0x00 )  //Clear out all existing pins
   vars.'CLEAR_PINS_ON_ADD' = 0x01
}

onConnected {
log.debug "${DEVICE_NAME} connected"
	
	// Assoction group 1 set by default, nothing to do there.
		ZWave.poll(BATTERY_POLLING_INTERVAL_SEC, ZWave.battery.get)
	ZWave.setOfflineTimeout(OFFLINE_TIMEOUT_SECS)
	
	// schedule an event to get the lock state since these seem to get
	// missed a lot when done here in onConnected
	Scheduler.scheduleIn 'SetupLock', SETUP_DELAY_MILLIS
}

onDisconnected {
	log.debug "${DEVICE_NAME} disconnected"
}

onRemoved {
	log.debug "${DEVICE_NAME} removed"
}
     
////////////////////////////////////////////////////////////////////////////////
// Protocol Message Callbacks
////////////////////////////////////////////////////////////////////////////////

onZWaveMessage.battery.report {
	GenericZWaveDoorLock.handleBatteryLevelReport(this,DEVICE_NAME,message)
}

onZWaveMessage.door_lock.operation_report {
	GenericZWaveDoorLock.handleLockOperationReport(this,DEVICE_NAME,message)
}

onZWaveMessage.user_code.report {
	GenericZWaveDoorLock.handleUserCodeReport(this,DEVICE_NAME,message)
}

onZWaveMessage.alarm.report {
	log.error "${DEVICE_NAME} sent AlarmReport."
	GenericZWaveDoorLock.handleSchlageAlarmReportViaNotification(this,DEVICE_NAME,message)
}

////////////////////////////////////////////////////////////////////////////////
// Scheduled event handlers
////////////////////////////////////////////////////////////////////////////////

onEvent('SetupLock') {
	log.debug "${DEVICE_NAME} received SetupLock event"
	ZWave.door_lock.operation_get()
	ZWave.battery.get()
}

