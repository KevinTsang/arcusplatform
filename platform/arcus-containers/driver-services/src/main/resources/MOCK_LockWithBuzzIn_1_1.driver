/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import groovy.transform.Field

/**
 * Mock driver for a Door Lock with Buzz-In
 *
 */
driver			"MOCK_LockWithBuzzin"
description		"Driver for the Mock Door Lock with Buzz-In"
version			"1.1"
protocol			"MOCK"
deviceTypeHint	"Lock"
productId		"d0f50f"
vendor 			"Mockitron"
model 			"Mock Door Lock with Buzz-In"

matcher        'MOCK:Capability' : 'LockWithBuzzin'
matcher        'MOCK:ProductId'  : 'd0f50f'

capabilities	'DevicePower', 'DoorLock', 'DeviceMock'

importCapability 'mock/MOCK_DoorLock'


@Field final long BUZZIN_DELAY_MSEC = 10000			// delay 10 seconds for Buzz-In operation
@Field final int MAX_SUPPORTED_PINS	= 30
@Field final long LOCK_UNLOCK_DELAY_MSEC = 3000		// delay 3 seconds for Lock/Unlock operation


DeviceConnection.signal             73

DoorLock.type                       DoorLock.TYPE_LEVERLOCK
DoorLock.supportsBuzzIn             true
DoorLock.numPinsSupported           MAX_SUPPORTED_PINS
DoorLock.supportsInvalidPin         false

DevicePower.source                  DevicePower.SOURCE_BATTERY
DevicePower.linecapable             false
DevicePower.battery                 30
DevicePower.backupbatterycapable    false

// ########### driver lifecycle callbacks ##################

onAdded {
	log.debug "Mock LockWithBuzzin started."
	Device.name 'Mock Door Lock, With Buzz-In'
	
	// set inital attribute values
	DevicePower.sourcechanged           ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
}

onConnected {
	log.debug "Mock LockWithBuzzin connected."
}

onDisconnected {
	log.debug "Mock LockWithBuzzin disconnected."
}

onRemoved {
	log.debug "Mock LockWithBuzzin removed."
}


// ########### capability support ##################

onDoorLock.BuzzIn {
	log.debug 'Mock LockWithBuzzin BuzzIn()'
	if (DoorLock.LOCKSTATE_LOCKED == DoorLock.lockstate.get() ) {
		log.debug 'Door Locked, do Buzz-In'
		// set the current state to Unlocking
		DoorLock.lockstate DoorLock.LOCKSTATE_UNLOCKING
		DoorLock.lockstatechanged new Date()
		// do a delayed setting of the state to Unlocked
		Scheduler.scheduleIn 'BuzzInUnLocked', LOCK_UNLOCK_DELAY_MSEC
	
		sendResponse('doorlock:BuzzInResponse', ['unlocked':true])
	} else {
		log.debug 'Cannot Buzz-In if door not locked'
		sendResponse('doorlock:BuzzInResponse', ['unlocked':false])
	}
}

onEvent('BuzzInUnLocked') {
	DoorLock.lockstate DoorLock.LOCKSTATE_UNLOCKED
	DoorLock.lockstatechanged new Date()
	log.debug "Door Unlocked For Buzz-In"
	// do a delayed setting of the state to Locking
	Scheduler.scheduleIn 'BuzzInLocking', BUZZIN_DELAY_MSEC
}

onEvent('BuzzInLocking') {
	DoorLock.lockstate DoorLock.LOCKSTATE_LOCKING
	DoorLock.lockstatechanged new Date()
	log.debug "Re-Locking Door After Buzz-In"
	// do a delayed setting of the state to Locked
	Scheduler.scheduleIn 'BuzzInLocked', LOCK_UNLOCK_DELAY_MSEC
}

onEvent('BuzzInLocked') {
	DoorLock.lockstate DoorLock.LOCKSTATE_LOCKED
	DoorLock.lockstatechanged new Date()
	log.debug "Door Re-Locked After Buzz-In"
}


// ########### mock stuff here #####################

onPlatform ("devmock:Connect") {
  log.debug "devmock:Connect"
  connected();
  sendResponse "devmock:ConnectResponse", [:]
}

onPlatform ("devmock:Disconnect") {
  log.debug "devmock:Disconnect"
  disconnected();
  sendResponse "devmock:ConnectResponse", [:]
}

onPlatform ("devmock:SetAttributes") {
  log.debug "devmock:SetAttributes:" + message.attributes.attrs
  attributes << message.attributes.attrs;
  sendResponse "devmock:SetAttributesResponse", [:]
}

