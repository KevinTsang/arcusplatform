/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import groovy.transform.Field
capability      "DoorLock"
description     "Default implementation for the ZWave DoorLock capability"
version         "2.12"

@Field final String RESERVED = "RESERVED"

@Field final static byte DOOR_LOCKED   = 0xFF
@Field final static byte DOOR_UNLOCKED = 0x00

@Field final long SETUP_DELAY_MILLIS     = 30000    //30 seconds after connect ask for the lock state again in case we don't get a response from our original request
@Field final long BUZZ_IN_TIMEOUT_MILLIS = 45000    //30 second buzzin timeout + 15 seconds to deliver to end device
@Field final long GETPIN_DELAY_MILLIS    = 20000    //20 seconds
@Field final long DFLT_READBACK_DELAY    = 5000     //5 second delay before reading

@Field final static long TRANSACTION_TIMEOUT_MILLIS  = 90000
@Field final static String EVENT_TRANSACTION_TIMEOUT = "TransactionTimeoutEvent"

@Field final static String ERROR_JAM_KEY = "WARN_JAM"
@Field final static String ERROR_JAM_MSG = "Door lock may be jammed"


static handleSetAttributes(ctx, message) {
    def attributes = message.attributes
    def currState = ctx.DoorLock.lockstate.get()
    ctx.log.debug "Set Door Lock Attributes: {}", attributes
    for(attribute in attributes) {
        switch(attribute.key) {
            case ctx.DoorLock.lockstate:
                if (ctx.DoorLock.LOCKSTATE_LOCKED == attribute.value ) {
                    // Kwikset locks don't report state if asked to set to a state they are already in,
                    // leaving the lock in a transitory state and eventually triggering a 'jam' on timeout,
                    // so for all locks we send the command to the device when setting to any state,
                    // but only set to a transitory state and set a timeout if setting to a different state
                    // than we think the lock is already in
                    ctx.ZWave.door_lock.operation_set(DOOR_LOCKED)
                    if (ctx.DoorLock.LOCKSTATE_LOCKED != currState) {
                        updateLockState(ctx,ctx.DoorLock.LOCKSTATE_LOCKING)
                    }
                } else if (ctx.DoorLock.LOCKSTATE_UNLOCKED == attribute.value ) {
                    // see note above on setting locks to same state we already think they are in
                    ctx.ZWave.door_lock.operation_set( DOOR_UNLOCKED )
                    if (ctx.DoorLock.LOCKSTATE_UNLOCKED != currState) {
                        updateLockState(ctx,ctx.DoorLock.LOCKSTATE_UNLOCKING)
                    }
                } else {
                    ctx.log.warn "Ignoring attempt to set lock to unexpected Lock State:{}", attribute.value
                }
                break

            default:
                ctx.log.error "Unrecognized attribute:{}", attribute
                break
        }
    }
}

/**
 * Authorize the person with the given person Id to unlock the door with his/her pin.
 *
 * Returns the slot number the person has been assigned or 0 if there a no available slots.
 */
onDoorLock.AuthorizePerson {
    def personId = message.attributes['personId']
    def slots = getDoorLockSlots(this)

    log.debug "AuthorizePerson: current slots: {}", slots
    // Check to see if the user has already been assigned a slot on the
    // lock. If they haven't look for a new slot to assign the user into.
    int slot = findSlotForUser(this,slots,personId)
    slot = (slot != 0) ? slot : findAndAssignNewSlotToUser(this,slots,personId,DoorLock.numPinsSupported.get())
   
    // If we couldn't assign the slot to the user then return an error
    // to the source of the original request.
    if (slot == 0) {
        emit 'doorlock:PinOperationFailed', ['personId':personId, 'slot':slot, 'message': 'No slot available']
        sendResponse ('Error', [ code: 'request.unsatisfiable', message: 'No slot available' ])
        return
    }

    // Update the slot mappings and attempt to provision the PIN into
    // the doorlock in the given slot.
    log.info "attempting to provision user {} into slot {}", personId, slot
    DoorLock.slots slots
    log.debug "AuthorizePerson: updated slots: {}", DoorLock.slots.get()

    byte[] pinData = PinManagement.getPin( personId )
    ZWave.user_code.set(slot, 0x01, pinData[0], pinData[1], pinData[2], pinData[3])

    if (true != vars.'DISABLE_GET_AFTER_PINSET') {
        log.debug "AuthorizePerson: scheduling GetPinAfterAuthorize"
        vars.'DEFERRED_GETPIN_SLOT' = slot
        Scheduler.scheduleIn 'GetPinAfterAuthorize', GETPIN_DELAY_MILLIS
    }

    sendResponse( 'doorlock:AuthorizePersonResponse', ['slotId':slot] )
}

/**
 * Remove the person with the given person Id ability to unlock the door with their pin.
 */
onDoorLock.DeauthorizePerson {
    def personId = message.attributes['personId']
    def slots = getDoorLockSlots(this)

    log.debug "DeauthorizePerson: current slots: {}", slots
    int slot = findSlotForUser(this,slots,personId)
    if (slot == 0) {
        emit 'doorlock:PinOperationFailed', ['personId':personId, 'slot':slot, 'message': 'No slot assigned to ${personId}']
        sendResponse ('Error', [ code: 'request.unsatisfiable', message: 'No slot assigned to person ${personId}' ])
        return
    }

    // Attempt to deprovision the PIN from the given slot on the door lock.
    log.info "attempting to deprovision user {} from slot {}", personId, slot
    ZWave.user_code.set(slot, 0x00, 0x00, 0x00, 0x00, 0x00)

    if (true != vars.'DISABLE_GET_AFTER_PINSET') {
        log.debug "DeauthorizePerson: scheduling GetPinAfterAuthorize"
        vars.'DEFERRED_GETPIN_SLOT' = slot
        Scheduler.scheduleIn 'GetPinAfterAuthorize', GETPIN_DELAY_MILLIS
    }

    sendResponse('doorlock:DeauthorizePersonResponse', [:])
}

/**
 * Clear all the pins currently set in the lock.
 */
onDoorLock.ClearAllPins {
    log.warn "attempting to clear all PINs"
    log.debug "ClearAllPins: current slots: {}", DoorLock.slots.get()

    DoorLock.slots [:]
    log.debug "ClearAllPins: updated slots: {}", DoorLock.slots.get()

    ZWave.user_code.set(0, 0x00, 0x00, 0x00, 0x00, 0x00)
    sendResponse('doorlock:ClearAllPinsResponse', ['unlocked':true])
}

/**
 * Buzz a user in.
 */
onDoorLock.BuzzIn {
    def state = DoorLock.lockstate.get()
    boolean isLocked = (DoorLock.LOCKSTATE_LOCKED == state) ||
                       (DoorLock.LOCKSTATE_LOCKING == state) 

    if(isLocked) {
        log.info "buzzing user in"

        updateLockState(this,DoorLock.LOCKSTATE_UNLOCKING)
        ZWave.door_lock.operation_set(DOOR_UNLOCKED)

        Scheduler.scheduleIn 'LockAfterBuzzIn', BUZZ_IN_TIMEOUT_MILLIS
    }

    sendResponse('doorlock:BuzzInResponse', ['unlocked':isLocked])
}

onEvent('LockAfterBuzzIn') {
    log.info "locking door after buzz in"

    updateLockState(this,DoorLock.LOCKSTATE_LOCKING)
    ZWave.door_lock.operation_set(DOOR_LOCKED)
}

onEvent('GetPinAfterAuthorize') {
    log.info "getting PIN after pin operation"
    ZWave.user_code.get(vars.'DEFERRED_GETPIN_SLOT')
}

////////////////////////////////////////////////////////////////////////////////
// Utilities
////////////////////////////////////////////////////////////////////////////////

static def getDoorLockSlots(ctx) {
    def slots = ctx.DoorLock.slots.get()
    if (slots == null) {
        return [:]
    }

    return [:] << slots
}

static def getUserInSlot(ctx,slot) {
    return ctx.DoorLock.slots.get()[slot.toString()]
}

static void updateLockState(ctx,newState) {
    def prevState = ctx.DoorLock.lockstate.get()
    ctx.DoorLock.lockstate newState
    if (ctx.DoorLock.LOCKSTATE_UNLOCKED == newState || ctx.DoorLock.LOCKSTATE_LOCKED == newState ){
        // successfully operated lock, so remove any 'jammed' error messages
        clearJamError(ctx)
    }
    if (newState != prevState) {
        ctx.DoorLock.lockstatechanged new Date()
    }
    // if new state is transitory state, set timeout to trigger Jam error if not completed
    if (ctx.DoorLock.LOCKSTATE_LOCKING == newState || ctx.DoorLock.LOCKSTATE_UNLOCKING == newState) {
        ctx.Scheduler.scheduleIn EVENT_TRANSACTION_TIMEOUT, TRANSACTION_TIMEOUT_MILLIS
    } else {    // otherwise cancel any existing transaction timeout
        ctx.log.trace "Canceling Transaction Timeout Event"
        ctx.Scheduler.cancel EVENT_TRANSACTION_TIMEOUT
    }
}

// Normally this event is scheduled each time the lock starts changing state, and is canceled when the
// state change completes, long before the timeout interval expires, but if the lock jams and for some
// reason does not report the jam, or we miss the state change, we trigger a Jam error.  Note that this
// does mean a Lever Lock can display a Jam warning, but the important thing is to let the user know that
// the current Lock state may not be accurate.
onEvent(EVENT_TRANSACTION_TIMEOUT) {
    log.info "Transaction Timeout expired, assume Jam/Obstruction"
    setJamError(this)
}

static void clearJamError(ctx) {
    ctx.DeviceAdvanced.errors?.remove( ERROR_JAM_KEY )
}

static void setJamError(ctx) {
    if (null == ctx.DeviceAdvanced.errors) {
        ctx.DeviceAdvanced.errors [:]
    }
    ctx.DeviceAdvanced.errors.put( ERROR_JAM_KEY, ERROR_JAM_MSG )
    // leave the DoorLock.lockstate in whatever state it is currently in,
    // but clear the Transaction Timeout event since we already set the Jam Error
    ctx.Scheduler.cancel EVENT_TRANSACTION_TIMEOUT
}

////////////////////////////////////////////////////////////////////////////////
// Z-Wave Door Lock Operation Report
////////////////////////////////////////////////////////////////////////////////

static void handleLockOperationReport(ctx,message) {
    def mode = message.command.get('doorlockmode') & 0xFF
    ctx.log.debug "driver received an operation report: {} -- {}", mode, message

    switch (mode) {
        case 0x00: // door unsecured
            updateLockState(ctx,ctx.DoorLock.LOCKSTATE_UNLOCKED)
            break
    
        case 0x01: // door unsecured with timeout
            updateLockState(ctx,ctx.DoorLock.LOCKSTATE_UNLOCKED)
            break
    
        case 0x10: // door unsecured for inside door handle
            updateLockState(ctx,ctx.DoorLock.LOCKSTATE_LOCKED)
            break
    
        case 0x11: // door unsecured for inside door handle with timeout
            updateLockState(ctx,ctx.DoorLock.LOCKSTATE_LOCKED)
            break
    
        case 0x20: // door unsecured for outside door handle
            updateLockState(ctx,ctx.DoorLock.LOCKSTATE_UNLOCKED)
            break
    
        case 0x21: // door unsecured for outside door handle with timeout
            updateLockState(ctx,ctx.DoorLock.LOCKSTATE_UNLOCKED)
            break
    
       case 0xFE: // door in unknown state
            ctx.log.warn "driver reported unknown state: {}", mode
            break
    
        case 0xFF:
            updateLockState(ctx,ctx.DoorLock.LOCKSTATE_LOCKED)
            break
    
        default:
            ctx.log.warn "driver reported unrecognized state: {}", mode
            break
    }
}

////////////////////////////////////////////////////////////////////////////////
// Z-Wave Battery Level Report
////////////////////////////////////////////////////////////////////////////////

static void handleBatteryLevelReport(ctx,message) {
    def batteryLevel = message.command.get('level')
    if (batteryLevel == null) {
        ctx.log.warn "battery level null"
        return
    }

    int bl = batteryLevel & 0xFF
    if(0xFF == bl) {
        ctx.log.warn "battery level is low"
        ctx.DevicePower.battery 0
    } else {
        ctx.DevicePower.battery bl
        ctx.log.debug "battery level [{}]", bl
    }
}

////////////////////////////////////////////////////////////////////////////////
// Z-Wave User Code Report
////////////////////////////////////////////////////////////////////////////////
   
static void handleUserCodeReport(ctx,message) {
    def slots = getDoorLockSlots(ctx)
    def userId = message.command.get('useridentifier')
    def status = message.command.get('useridstatus')

    if (status == null || userId == null || slots == null) {
        ctx.log.warn "received bad status report: slot={}, status={}", userId, status
        return
    }
    ctx.log.debug "driver received an user code report: slot={}, status={} -- message={}, slots={}", userId, status, message, slots

    switch (status & 0xFF) {
        case 0:
            handleUserSlotAvailable(ctx,slots,userId)
            break
        case 1:
            handleUserSlotOccupied(ctx,slots,userId)
            break
        case 2:
            // For Schlage, this indicates a PIN matches the first 4 digits of the programming code
            handleUserSlotReserved(ctx,slots,userId)
            break
        case 0xFE:
            // For Schlage, this indicates a duplicate PIN
            handleUserSlotNotAvailable(ctx,slots,userId)
            break
        default:
            ctx.log.warn "received unknown status report: slot={}, status={}", userId, status
            break
    }
}

static int findSlotForUser(ctx,slots,personId) {
    for (def s : slots.keySet()) {
        if (personId == slots[s]) {
            ctx.log.debug "findSlotForUser: slot: {}, person: {}", s, personId
            return s.toInteger()
        }
    }
    return 0
}

static int findAndAssignNewSlotToUser(ctx,slots,personId,maxPinSupported) {
	if (0==maxPinSupported) {
		return 0
	}
    for (def pc in 1..maxPinSupported) {
        def key = pc.toString()
        if (!slots.containsKey(key)) {
            slots.put(key,personId)
            ctx.log.debug "findAndAssignNewSlotToUser: slot: {}, person: {}", pc, personId
            return pc
        }
    }
    return 0
}

static void handleUserSlotAvailable(ctx,slots,userId) {
    if (userId == 0) {
        //The reason we need to do this is not to clear slots when the device is first added as the slots should be empty.  
        //This is to avoid the issue report for clearing all the pins came in after the first automatic AuthorizePerson request's report.
        if (ctx.vars.'CLEAR_PINS_ON_ADD' == null) {
            ctx.log.warn "has deprovisioned all user PINS"
          ctx.DoorLock.slots [:]
        } else {
            ctx.vars.'CLEAR_PINS_ON_ADD' = null
        }

        doPinsCleared(ctx)
        return
    }

   def personId = slots.remove(userId.toString())
   if (personId != null) {
       ctx.log.warn "received report that {} was deprovisioned from slot {}", personId, userId    

       ctx.DoorLock.slots slots
       ctx.log.debug "handleUserSlotAvailable - current slots: {}", slots

      ctx.emit 'doorlock:PersonDeauthorized', ['personId':personId, 'slot':userId]
    } else {
       ctx.log.warn "person was not found in slots - {}", userId
    }
}

static void handleUserSlotOccupied(ctx,slots,userId) {
   if (userId == 0) {
      return
   }

    def personId = slots.get(userId.toString())
    ctx.log.debug "handleUserSlotOccupied - current slots: {}", slots
    if(personId == null) {
        ctx.log.warn "handleUserSlotOccupied - unknown user {} added at lock", userId
        doPinAddedAtLock(ctx,userId)
        return
    }

   ctx.log.info "received report that {} was provisioned into slot {}", personId, userId
   ctx.emit 'doorlock:PersonAuthorized', ['personId':personId, 'slot':userId]
}

static void handleUserSlotReserved(ctx,slots,userId) {
   handleUserSlotFailure(ctx,slots,userId, "slot reserved")
}

static void handleUserSlotNotAvailable(ctx,slots,userId) {
   handleUserSlotFailure(ctx,slots,userId, "slot state not available")
}

static void handleUserSlotFailure(ctx,slots,userId,msg) {
   if (userId == 0) {
       return
   }

    def personId = slots.remove(userId.toString())
    if (personId != null) {
        ctx.log.warn "received report that {} failed in slot {}: {}", personId, userId, msg

        ctx.DoorLock.slots slots
        ctx.emit 'doorlock:PinOperationFailed', ['personId':personId, 'slot':userId, 'message': "${msg}"]
    }
}

////////////////////////////////////////////////////////////////////////////////
// Z-Wave Alarm Report
////////////////////////////////////////////////////////////////////////////////

static void handleSchlageAlarmReportViaNotification(ctx,message) {
    def handled = false
    def alarmType = message.command.get('alarmtype') & 0xFF
    def alarmLevel = message.command.get('alarmlevel') & 0xFF
    def notificationStatus = message.command.get('notificationStatus')
    def notificationType = message.command.get('notificationType')
    def event = message.command.get('event')
    ctx.log.debug "driver received an alarm report type [{}], level [{}], notificationStatus:[{}], notificationType:[{}], event:[{}], message:[{}]",
            alarmType, alarmLevel, notificationStatus, notificationType, event, message
    
    switch( notificationType ) {
        case 0x06:        // Access Control
            switch(event) {
                case 0x01: // Locked from inside or outside by key
                    updateLockState(ctx,ctx.DoorLock.LOCKSTATE_LOCKED)
                    break
                case 0x02: // Unlocked from inside or outside by key
                    updateLockState(ctx,ctx.DoorLock.LOCKSTATE_UNLOCKED)
                    break 
                case 0x05: // Locked from outside
                    updateLockState(ctx,ctx.DoorLock.LOCKSTATE_LOCKED)
                    doPinUsed(ctx, message.command.get('parameter1'), "locked") // How do tell who the person is by pressing on the schlage button to lock?
                    break
                case 0x06: // Unlocked from outside
                    updateLockState(ctx,ctx.DoorLock.LOCKSTATE_UNLOCKED)
                    doPinUsed(ctx, message.command.get('parameter1'), "unlocked")
                    break
                case 0x09: // Auto Relocked                   TODO:Include it was autorelocked in history logs
                    updateLockState(ctx,ctx.DoorLock.LOCKSTATE_LOCKED)
                    break
                case 0x10:
                    doPinInvalid(ctx, 0, "exceeded PIN entry limit")
                    break
                case 0x0B:
                    ctx.log.debug "jammed"
                    setJamError(ctx)
                    break
                default:
                    ctx.log.error"received unhandled alarm report event:[{}] ", event
                    break
                }
            handled = true // all Case 06 notifications  either handled or logged as unhandled.
            break
            
        case 0x08:        // Power Management
            switch(event) {
                case 0x0A:         // Replace battery soon (4.705v ~25%)
                    ctx.log.info "reported 'Replace Battery Soon' notification"
                    if (25 < (ctx.DevicePower.battery.get() ?: 100)) {
                        ctx.DevicePower.battery 25
                    }
                    break
                case 0x0B:         // Replace battery now (4.405v ~0%)
                    ctx.log.info "reported 'Replace Battery Now' notification"
                    ctx.DevicePower.battery 0
                    break
                default:
                    ctx.log.warn "reported unexpected Power Management Event:{}, Alarm:{}, Level:{}, Status:{}", event, alarmType, alarmLevel, notificationStatus
                break
            }
            handled = true
            break

        case 0x09:        // System
            switch(event) {
                case 0x01:         // System Hardware Failure
                    ctx.log.warn "reported 'Hardware Failure' notification"
                    break
                case 0x05:         // System Factory Default Reset
                    ctx.log.warn "reported 'Factory Default Reset' notification"
                    break
                default:
                    ctx.log.warn "reported unexpected System Event:{}, Alarm:{}, Level:{}, Status:{}", event, alarmType, alarmLevel, notificationStatus
                    break
            }
            handled = true
            break
            
        default:
            ctx.log.error"received unhandled alarm report notification type:[{}]", notificationType
            break
    }
        
    switch(alarmType) {    
        case 0xA1:
            if(alarmLevel != 1) {
                ctx.log.debug "Tamper Alarm, but unknown alert level {}", alarmLevel
                handled = true
            }
            break
    
        default:
            if ( handled == false) {
            ctx.log.error "received unhandled alarm report alarm type:[{}] + level [{}] notificationStatus:[{}] + notificationType:[{}] + event:[{}]",
                 alarmType, alarmLevel, notificationStatus, notificationType, event
            }
            break
    }
}

static void handleSchlageAlarmReportViaType(ctx,message) {
    def final long LOCKSTATE_DELAY_MILLIS = 10000
    def alarmType = message.command.get('alarmtype') & 0xFF
    def alarmLevel = message.command.get('alarmlevel') & 0xFF

    ctx.log.debug "driver received an alarm report type [{}] level [{}] message [{}]", alarmType, alarmLevel, message
    switch(alarmType) {
        case 0x10:
            updateLockState(ctx,ctx.DoorLock.LOCKSTATE_UNLOCKED)
            doPinUsed(ctx, alarmLevel, "locked")
            ctx.Scheduler.scheduleIn 'DeferredLockStateRead', LOCKSTATE_DELAY_MILLIS
            break
    
        case 0x30:
            if (alarmLevel == 0xFF) {
                ctx.log.debug "Lock was reset manually to factory default."
            } else {
                ctx.log.debug "Lock was reset to factory default, invalid level [{}]", alarmLevel
            }
            break
    
        case 0x60:
            if (alarmLevel == 0xFF) {
                ctx.log.debug "Lock keypad temporarily disabled."
            } else {
                ctx.log.debug "Lock keypad temporarily disabled, invalid level [{}]", alarmLevel
            }
            break
    
        case 0x70:
            if (alarmLevel == 0xFF) {
                ctx.log.debug "Lock new master code added."
            } else {
                ctx.log.debug "Lock new master code added, invalid level [{}]", alarmLevel
            }
            break
    
        case 0x80:
            if (alarmLevel == 0xFF) {
                ctx.log.debug "Lock keypad power up."
            } else {
                ctx.log.debug "Lock keypad power up, invalid level [{}]", alarmLevel
            }
            break
    
        case 0x90:
            if (alarmLevel == 0) {
                ctx.log.debug "Lock is busy, cleared."
            } else if (alarmLevel == 0xFF) {
                ctx.log.debug "Lock is busy, set."
            } else {
                ctx.log.debug "Lock is busy, invalid level [{}]", alarmLevel
            }
            break
    
        default:
            ctx.log.error "driver received an unhandled alarm report type [{}] level [{}]", alarmType, alarmLevel
            break
    }
}

onEvent('DeferredLockStateRead') {
    log.debug "GenericZWaveDoorLock received DeferredLockStateRead event"
    ZWave.door_lock.operation_get()
}

static void handleYaleAlarmReport(ctx,message) {
    def alarmType = message.command.get( 'alarmtype' ) & 0xFF
    def alarmLevel = message.command.get( 'alarmlevel' ) & 0xFF
    def slots = [:]

   ctx.log.debug "received an alarm report type: {} - level: {} - message: {}", alarmType, alarmLevel, message
    switch( alarmType ) {
        case 0x12:
            updateLockState(ctx,ctx.DoorLock.LOCKSTATE_LOCKED)
            break
        case 0x15:
        case 0x1B:
        case 0x18:
            updateLockState(ctx,ctx.DoorLock.LOCKSTATE_LOCKED)
            break
        case 0x13:
            updateLockState(ctx,ctx.DoorLock.LOCKSTATE_UNLOCKED)
            doPinUsed(ctx, alarmLevel, "unlocked")
            break
        case 0x16:
        case 0x19:
            updateLockState(ctx,ctx.DoorLock.LOCKSTATE_UNLOCKED)
            break
        case 0x70:
            // Alarm 0 = master slot, will be ignored
            slots = getDoorLockSlots(ctx)
            ctx.log.debug "alarm report calling handleUserSlotOccupied: slots: {}", slots
            handleUserSlotOccupied(ctx,slots,alarmLevel)
            break
        case 0xA1:
            if(alarmLevel == 1) {
                doPinInvalid(ctx, 0, "exceeded PIN entry limit")
            } else if(alarmLevel == 2) {
                ctx.log.debug "Front escutcheon removed from main"
            } else {
                ctx.log.debug "Tamper Alarm, but unknown alert level {}", alarmLevel
            }
            break
        case 0xA2:
            doPinInvalid(ctx, 0, "PIN used outside scheduled time.")
            break
        case 0xA7: 
            ctx.DevicePower.battery 25
            break
        case 0xA8:
            ctx.DevicePower.battery 10
            break
        case 0xA9:
            ctx.DevicePower.battery 0
            break
        case 0x09:
            ctx.log.debug "deadbolt motor jammed"
            setJamError(ctx)
            break
        case 0x71:
            slots = getDoorLockSlots(ctx)
            ctx.log.debug "alarm report calling handleUserSlotFailure: slots: {}", slots
            handleUserSlotFailure(ctx,slots,alarmLevel,"duplicate PIN code")
            break
        case 0x82:
            ctx.log.debug "RF Module Power Cycled"
            break
        case 0x21:
            if (alarmLevel == 0xFF) {
                ctx.DoorLock.slots [:]
                doPinsCleared(ctx)
            } else {
                slots = getDoorLockSlots(ctx)
                ctx.log.debug "alarm report calling handleUserSlotAvailable: slots: {}", slots
                handleUserSlotAvailable(ctx,slots,alarmLevel)
            }
            break
        case 0x81:
            ctx.log.debug "Lock Handing Completed"
            break
        case 0x26:
            doPinInvalid(ctx, alarmLevel, "non-access code entered")
            break
        case 0x30:
            if(alarmLevel == 1) {
                ctx.log.debug "Lock was reset manually to factory default."
            } else if(alarmLevel == 2) {
                ctx.log.debug "Lock was reset to factory default over RF."
            } else {
                ctx.log.debug "Lock Reset To Factory Default, but unknown alarm level {}", alarmLevel
            }

            ctx.DoorLock.slots [:]
            doPinsCleared(ctx)
            break
        default:
            ctx.log.error "received an unhandled alarm report type: {} - level: {}", alarmType, alarmLevel
            break
    }  
}

static void handleSbdAlarmReport(ctx,message) {
    def alarmType = message.command.get( 'alarmtype' )
    def alarmLevel = message.command.get( 'alarmlevel' ) & 0xFF
    def slots = [:]

    ctx.log.debug "received an alarm report type: {} - level:  {} - message: {}", alarmType, alarmLevel, message
    switch( alarmType ) {
        case 0x12:        //Keypad Lock (push lock button)
            updateLockState(ctx,ctx.DoorLock.LOCKSTATE_LOCKED)
            break
        case 0x15:        //Manual Lock
        case 0x1B:        //Autolock
        case 0x18:        //ZWave lock
            updateLockState(ctx,ctx.DoorLock.LOCKSTATE_LOCKED)
            break
        case 0x13:        //Keypad unlock
            updateLockState(ctx,ctx.DoorLock.LOCKSTATE_UNLOCKED)
            doPinUsed(ctx, alarmLevel, "unlocked")
            break
        case 0x16:        // Manual unlock
        case 0x19:        // ZWave unlock
            updateLockState(ctx,ctx.DoorLock.LOCKSTATE_UNLOCKED)
            break
        case 0x1A:        // Autolock Jam
        case 0x11:        // Keypad jam
        case 0x17:        // ZWave jam
            setJamError(ctx)
            break
        case 0x70:
            slots = getDoorLockSlots(ctx)
            ctx.log.debug "alarm report calling handleUserSlotOccupied: slots: {}", slots
            handleUserSlotOccupied(ctx,slots,alarmLevel)
            break
        case 0x20:
            // This doesn't match the SBD spec, but is correct.  The 0x21 event means a single pin was cleared
            ctx.DoorLock.slots [:]
            doPinsCleared(ctx)
            break
        case 0x21:
            // A single pin slot is available - described as event 0x20 in their spec
            slots = getDoorLockSlots(ctx)
            ctx.log.debug "alarm report calling handleUserSlotAvailable: slots: {}", slots
            handleUserSlotAvailable(ctx,slots,alarmLevel)
            break
        case 0xA1:
        case -95:
            doPinInvalid(ctx, 0, "three failed attempts")
            break
        case 0xA2:
        case -94:
            doPinInvalid(ctx, alarmLevel, "invalid time")
            break
        case 0xA7:
        case -89:
            ctx.DevicePower.battery 15
            break
        case 0xA8:
        case -88:
            ctx.DevicePower.battery 5
            break
        case 0xA9:
        case -87:
            ctx.DevicePower.battery 1
            break
        case 0xAA:        // undocumented, observed being reported by Kwikset 912 while unlocking
        case -86:
            ctx.log.trace "Low Battery: ~35%"
            break
       default:
            ctx.log.warn "received an unhandled alarm report type: {} - level: {}", alarmType, alarmLevel
            break
    }
}
   
static void doPinUsed(ctx,slot,action) {
   if (slot < 0) {
      return
   }

   def personId = getUserInSlot(ctx,slot)
    ctx.log.debug "was {} by {}", action, personId ?: 'Unknown Person'
    
    if( (null != personId) && ('RESERVED' != personId) ) {
        ctx.PinManagement.setActor(personId)
    }

    ctx.emit 'doorlock:PinUsed', [:]
}
   
static void doPinInvalid(ctx,slot,msg) {
   if (slot < 0) {
      return
   }

   def personId = getUserInSlot(ctx,slot)
    ctx.log.debug "reported invalid pin used by {}: {}", personId ?: 'Unknown Person', msg
    
    if( (null != personId) && ('RESERVED' != personId) ) {
        ctx.PinManagement.setActor(personId)
    }

    ctx.emit 'doorlock:InvalidPin', [:]
}

static void doPinAddedAtLock(ctx,slot) {
   if (slot <= 0) {
      return
   }

   ctx.log.warn "attempting to remove PIN from slot {} because PIN was added manually at door", slot
   ctx.ZWave.user_code.set(slot, 0x00, 0x00, 0x00, 0x00, 0x00)

   def personId = getUserInSlot(ctx,slot)
    if( (null != personId) && ('RESERVED' != personId) ) {
        ctx.PinManagement.setActor(personId)
    }

   ctx.emit 'doorlock:PinAddedAtLock', [:]
}

static void doPinRemovedAtLock(ctx,slot) {
    if (slot <= 0) {
        return
    }

    def slots = getDoorLockSlots(ctx)
    def personId = slots.remove(slot.toString())
    if( (null != personId) && ('RESERVED' != personId) ) {
        ctx.log.warn "removed user {} from slot {} because PIN was removed manually at door", personId, slot
        ctx.DoorLock.slots slots
      
        ctx.PinManagement.setActor(personId)
        ctx.emit 'doorlock:PersonDeauthorized', ['personId':personId, 'slot':slot]
    }

    ctx.emit 'doorlock:PinRemovedAtLock', [:]
}

static void doPinsCleared(ctx) {
    ctx.log.warn "cleared all pins"
    ctx.emit 'doorlock:AllPinsCleared', [:]
}

