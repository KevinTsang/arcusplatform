/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import groovy.transform.Field

capability		"Switch"
description		"Default implementation for the Switch capability"
version			"1.0"


@Field final static long DFLT_READBACK_DELAY  = 250         // 250 millisecond delay before reading (some devices report "busy" if we try to read too soon)
@Field final static int MAX_READBACKS = 40                  // limit maximum read retries


onAdded {
	log.debug "Generic switch added"

	// store a max readback count in vars
	vars.'MAX_READBACKS' = MAX_READBACKS

	// set default attribute values
	DevicePower.sourcechanged     ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
}

onConnected {
	log.debug "Generic switch connected"
	ZWave.switch_binary.get()
}

onEvent('DeferredSwitchBinaryGet') {
	log.debug "Generic Deferred switch_binary.get"
	ZWave.switch_binary.get()
}

static handleSwitchState(ctx, name, message, readAfterSet = true) {
	handleSwitchState(ctx, message)
}

static handleSwitchState(ctx, message) {
	byte SWITCH_ON = 0xff
	byte SWITCH_OFF = 0x00
	def attributes = message.attributes;
	for(attribute in attributes) {
		switch(attribute.key) {
			case ctx.Switch.state:
				// set the device to the desired state
				ctx.ZWave.switch_binary.set(attribute.value == 'ON' ? SWITCH_ON : SWITCH_OFF);

				// get the current switch state from the device (to verify the setting was made)
				// delay this so device does not report back "busy"
				ctx.vars.'READBACK_CNT' = 0
				ctx.Scheduler.scheduleIn 'DeferredSwitchBinaryGet', DFLT_READBACK_DELAY
				break

			default:
				break
		}
	}
}


////////////////////////////////////////////////////////////////////////////////
// Z-Wave Binary Switch Report
////////////////////////////////////////////////////////////////////////////////
static void handleBinarySwitchReport(ctx,name,message){
	handleBinarySwitchReport(ctx,message)
}

static void handleBinarySwitchReport(ctx,message){
	byte SWITCH_ON = 0xff
	ctx.log.debug "Generic handle binary switch report {}", message

	def prevState = ctx.Switch.state.get()
	def newState = message.command.get('value')
	ctx.log.trace "Newstate == ${newState}"

	if (newState == SWITCH_ON){
	 ctx.Switch.state ctx.Switch.STATE_ON
	 } else {
	 ctx.Switch.state ctx.Switch.STATE_OFF;
	}

	// if state changed, capture timestamp
	if (ctx.Switch.state.get() != prevState) {
		ctx.Switch.statechanged new Date()
	}

	// we got a status update, so quit any additional readback attempts
	int maxReadbacks = ctx.vars.'MAX_READBACKS' ?: MAX_READBACKS
	ctx.vars.'READBACK_CNT' = maxReadbacks
}

static void readSwitchState(ctx,name){
	readSwitchState(ctx)
}

static void readSwitchState(ctx){

	ctx.log.debug "Generic driver sending binary switch get"
	ctx.vars.'READBACK_CNT' = 0
	long delay = ctx.vars.'DFLT_READBACK_DELAY' ?: DFLT_READBACK_DELAY
	ctx.Scheduler.scheduleIn 'DeferredSwitchBinaryGet', delay
}

static void readSwitchStateAgain(ctx,name){
	readSwitchStateAgain(ctx)
}

static void readSwitchStateAgain(ctx){
	int readbackCnt = ctx.vars.'READBACK_CNT'++
	ctx.log.debug "Generice driver read switch state again [$readbackCnt]"
	int maxReadbacks = ctx.vars.'MAX_READBACKS' ?: MAX_READBACKS
	long delay = ctx.vars.'DFLT_READBACK_DELAY' ?: DFLT_READBACK_DELAY
	if (readbackCnt < maxReadbacks) {
		ctx.Scheduler.scheduleIn 'DeferredSwitchBinaryGet', delay
	}
}

