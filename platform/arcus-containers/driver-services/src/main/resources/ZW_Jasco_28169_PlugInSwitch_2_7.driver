/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Driver for a Jasco 28169 Plug-In Switch
 * 
 * 
 */
driver			"ZWJasco28169PlugInSwitchDriver"
description		"Driver for a Jasco 28169 Plug-In Switch"
version			"2.7"
protocol		"ZWAV"
deviceTypeHint	"Switch"
productId		"77c904"
vendor 			"GE"
model 			"28169"

matcher			'ZWAV:Manufacturer': 0x0063, 'ZWAV:ProductType': 0x5052, 'ZWAV:ProductId': 0x3038	//GE
matcher			'ZWAV:Manufacturer': 0x0063, 'ZWAV:ProductType': 0x5052, 'ZWAV:ProductId': 0x3037	//Jasco

capabilities	'DevicePower', 'Switch', 'Indicator'

importCapability 'zwave/GenericZWaveVersion'


// Device Type:
//		Binary Power Switch
//
// Command Classes:
//		0x25   (37) Switch_Binary
//		0x27   (39) Switch_All
//      0x56   (86) CRC16 Encap
//      0x59   (89) Association Group Info
//      0x5A   (90) Device Reset Locally
//		0x5E   (94) Z-Wave+ Info
//		0x70  (112) Configuration
//		0x72  (114) Manufacturer_Specific
//		0x73  (115) PowerLevel
//      0x7A  (122) Firmware Update Meta Data
//		0x85 (-123) Association
//		0x86 (-122) Version



// set Defaults
// ---------------
DevicePower.source               DevicePower.SOURCE_LINE
DevicePower.linecapable          true
DevicePower.backupbatterycapable false

Switch.state                        Switch.STATE_OFF
Switch.inverted                     false

Indicator.enabled                   true
Indicator.enableSupported           true		
Indicator.indicator                 Indicator.INDICATOR_OFF
Indicator.inverted                  true      // inverted true == ON when ON

final String DEVICE_NAME        = "Jasco 28169 Plug-In Switch"

final int  POLLING_INTERVAL_SEC = 3600       // every hour, to stay in  synch

final byte SWITCH_ON  = 0xff
final byte SWITCH_OFF = 0x00

// config definitions/constants
// ----------------------------
final byte CNFG_LED_PARAM_NO      = 0x03        // LED Indicator
final byte CNFG_LED_SIZE          = 0x01
final byte CNFG_LED_ON_WHEN_ON    = 0x00		// Value when LED is 'ON' when outlet is 'ON' (default for this device)
final byte CNFG_LED_ON_WHEN_OFF   = 0x01		// Value when LED is 'ON' when outlet is 'OFF'
final byte CNFG_LED_OFF           = 0x02		// Value when LED is always OFF


final int OFFLINE_TIMEOUT_SECS  = 10800   // 3 hrs 

////////////////////////////////////////////////////////////////////////////////
// Driver Lifecycle Callbacks
////////////////////////////////////////////////////////////////////////////////

onAdded {
	log.debug "{} added", DEVICE_NAME

	// set default attribute values
	DevicePower.sourcechanged           ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
	Switch.statechanged                 ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())

	// make sure LED mode is set to default behavior
	ZWave.configuration.set( CNFG_LED_PARAM_NO , CNFG_LED_SIZE, CNFG_LED_ON_WHEN_ON)
}


onConnected {
	log.debug "{} connected", DEVICE_NAME

	// get the current switch state
	ZWave.switch_binary.get()

	// These devices send a switch_binary.report when their state is changed locally.
	// We also periodically poll in case we miss that message.
	ZWave.poll(POLLING_INTERVAL_SEC, ZWave.switch_binary.get)

	ZWave.setOfflineTimeout(OFFLINE_TIMEOUT_SECS)

	// get configuration settings
	ZWave.configuration.get(CNFG_LED_PARAM_NO)		
}


onDisconnected {
	log.debug "disconnected", Jasco In-Wall Receptacle 
}


onRemoved {
	log.debug "Jasco In-Wall Receptacle removed"
}


////////////////////////////////////////////////////////////////////////////////
// Switch Capability Closures
////////////////////////////////////////////////////////////////////////////////

setAttributes('swit') {
	log.debug "Jasco In-Wall Receptacle received message: {}", message

	def attributes = message.attributes
	for(attribute in attributes) {
		switch(attribute.key) {
			case Switch.state:
				// set the device to the desired state
				ZWave.switch_binary.set(attribute.value == 'ON' ? SWITCH_ON : SWITCH_OFF)
				// get the current switch state from the device (to verify the setting was made)
				//Request required even with reporting
				ZWave.switch_binary.get()
				break

			default:
				log.error "Unrecognized attribute: {}", attribute
				break
		}
	}
}


////////////////////////////////////////////////////////////////////////////////
// Indicator Capability Closures
////////////////////////////////////////////////////////////////////////////////

setAttributes('indicator') {
	log.debug "{} received SetAttributes(indicator') {}", DEVICE_NAME, message

	def attributes = message.attributes
	for(attribute in attributes) {
		switch(attribute.key) {
			case Indicator.inverted:
				// set the LED configuration (true = On when On, false = On when Off (nightlight mode))
				ZWave.configuration.set(CNFG_LED_PARAM_NO, CNFG_LED_SIZE, attribute.value ? CNFG_LED_ON_WHEN_ON : CNFG_LED_ON_WHEN_OFF)
				break
			case Indicator.enabled:
				if (true == attribute.value){
					log.debug("Deciding what to set LED at based on inverted setting of [{}]",Indicator.inverted.get()) 
					// Set either inverted or normal
					ZWave.configuration.set(CNFG_LED_PARAM_NO, CNFG_LED_SIZE, Indicator.inverted.get() ? CNFG_LED_ON_WHEN_ON : CNFG_LED_ON_WHEN_OFF)
				} else {
					ZWave.configuration.set(CNFG_LED_PARAM_NO, CNFG_LED_SIZE, CNFG_LED_OFF)
				}
				break
			default:
				break
		}
	}
	// get the current LED configuration from the device (to verify the config was set)
	ZWave.configuration.get(CNFG_LED_PARAM_NO)
}


////////////////////////////////////////////////////////////////////////////////
// Device Message Handlers
////////////////////////////////////////////////////////////////////////////////

onZWaveMessage.switch_binary.report {
	log.debug "{}reported switch binary value: {}", DEVICE_NAME, message.command.get('value')
	def prevState = Switch.state.get()
	byte newState = message.command.get('value')
	if (SWITCH_ON == newState) {
		Switch.state Switch.STATE_ON
	} else  if (SWITCH_OFF == newState){
		Switch.state Switch.STATE_OFF
	} else {
	 log.info "{} received unknown state of {}", DEVICE_NAME, newState
	} 
	// update the indicator attribute to match (or inverse of) the state attribute
	updateIndicator()	

	// if state changed, capture timestamp
	if (Switch.state.get() != prevState) {
		Switch.statechanged new Date()
	}
		
}

void updateIndicator(){
	boolean switchOn = (Switch.STATE_ON==Switch.state.get() ? true: false)
	if (Indicator.enabled.get()){ 
		boolean indicatorMatchesSwitch = Indicator.inverted.get()	// LED Indicator matches switch power if inverted
		if (Switch.STATE_OFF == Switch.state.get()) {
			//log.debug "Set Indicator based on Inverted:$indicatorMatchesSwitch to " + (indicatorMatchesSwitch ? Indicator.INDICATOR_OFF : Indicator.INDICATOR_ON)
			Indicator.indicator (indicatorMatchesSwitch ? Indicator.INDICATOR_OFF : Indicator.INDICATOR_ON)
		} else {
			//log.debug "Set Indicator based on Inverted:$indicatorMatchesSwitch to " + (indicatorMatchesSwitch ? Indicator.INDICATOR_ON : Indicator.INDICATOR_OFF)
			Indicator.indicator (indicatorMatchesSwitch ? Indicator.INDICATOR_ON : Indicator.INDICATOR_OFF)
		}
	} else {
		Indicator.indicator Indicator.INDICATOR_DISABLED
	}
}

onZWaveMessage.configuration.report {
	log.debug "{} sent configuration report: {}",DEVICE_NAME, message
	byte param = message.command.get('param')
	byte level = message.command.get('level')
	byte val1 = message.command.get('val1')
	log.debug "param: {}, level: {}, val1: {}", param, level, val1

	if (CNFG_LED_PARAM_NO == param) {
		log.debug "{} LED Parameter: {}", DEVICE_NAME, val1
		switch (val1){
			case CNFG_LED_ON_WHEN_OFF:
				// set/save the inverted attribute of the LED indicator
				Indicator.inverted false
				Indicator.enabled  true
				break;
			case CNFG_LED_ON_WHEN_ON:
				// set/save the inverted attribute of the LED indicator
				Indicator.inverted true
				Indicator.enabled  true
				break;
			case CNFG_LED_OFF:
				Indicator.enabled false
				break
			default:
				log.info "{} received unknown value for LED Parameter {}", DEVICE_NAME, val1
				break
		}
		updateIndicator()
	}
}

onZWaveNodeInfo {
	log.debug "{} reported Node Info: {}, {}, {}, {}, {}",DEVICE_NAME, message.getNodeId(), message.getStatus(), message.getBasic(), message.getGeneric(), message.getSpecific()	
}

onZWaveMessage.application_status.busy {
	log.debug "{} reported Busy", DEVICE_NAME
}
	
onZWaveMessage.zwaveplus_info.report {
	log.trace "{} sent ZWave Plus Info Report:{}", DEVICE_NAME, message
	def zwVer = message.command.get('zwaveversion')
	def roleType = message.command.get('roletype')
	def nodeType = message.command.get('nodetype')
	log.info "{} sent ZWave Plus Info, ZWave Ver:{}, RoleType:{}, NodeType:{}", DEVICE_NAME, zwVer, roleType, nodeType
}

onZWaveMessage.device_reset_locally.notification {
	log.info "{} sent Device Reset Locally Notification", DEVICE_NAME
}

onZWaveMessage.version.report{
//surpress unhandled warning
}

onZWaveMessage {
    log.debug "{} received unhandled ZWave message {} with data {}", DEVICE_NAME, message, message.command.recvBytes
    return false;
}

