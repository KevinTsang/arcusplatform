/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Driver for an Ecolink PIR Motion Sensor
 * 
 */
import groovy.transform.Field

driver			"ZWEcolinkMotionSensorDriver"
description		"Driver for an Ecolink PIR Motion Sensor"
version			"1.0"
protocol		"ZWAV"
deviceTypeHint	"Motion"
productId		"588aba"
vendor 			"Uncertified"
model 			"PIR-ZWAVE2"

matcher			'ZWAV:Manufacturer': 0x014A, 'ZWAV:ProductType': 0x0001, 'ZWAV:ProductId': 0x0001


capabilities	'DevicePower', 'Motion'

importCapability 'zwave/GenericZWaveBattery'		// use generic ZWave Battery handling

// Command Classes:
//		0x20   (32) Basic
//		0x30   (48) Sensor_Binary
//		0x70  (112) Configuration
//		0x71  (113) Alarm (Notification)
//		0x72  (114) Manufacturer_Specific
//		0x80 (-128) Battery
//      0x84 (-124) Wake_Up
//		0x85 (-123) Association
//		0x86 (-122) Version

// set DevicePower
// ---------------
DevicePower.source 		         DevicePower.SOURCE_BATTERY
DevicePower.linecapable	         false
DevicePower.backupbatterycapable false

def final String DEVICE_NAME        = "Ecolink Motion Sensor"
def final int POLLING_INTERVAL_SEC  = 3600		// every 60 minutes
def final int OFFLINE_TIMEOUT_SECS  = 11400     // 190 minutes

def final int BATTERY_POLLING_INTERVAL_SEC = 86400   // Ask for battery level every 24 hours



////////////////////////////////////////////////////////////////////////////////
// Driver Lifecycle Callbacks
////////////////////////////////////////////////////////////////////////////////
  
onAdded {
	vars.'CURRENT_NAME' = DEVICE_NAME
	log.debug "{} added with Attributes {}", DEVICE_NAME, message.attributes
	
	Motion.motion                    Motion.MOTION_NONE
	Motion.motionchanged             ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
}

onConnected {
	vars.'CURRENT_NAME' = DEVICE_NAME
	log.debug "{} connected", DEVICE_NAME

	// set recommended offline timeout interval
	ZWave.setOfflineTimeout( OFFLINE_TIMEOUT_SECS )

	// set Association to Group 1, Node 1
	ZWave.association.set( 1, 1);

	// set the wakeup interval to 1 hour (0x000E10 = 3600 seconds) for node 0x01
	ZWave.wake_up.set((byte)0x00, (byte)0x0E, (byte)0x10, (byte)0x01)
	
	// read the current state
	ZWave.basic.get()
	ZWave.poll(POLLING_INTERVAL_SEC, ZWave.basic.get)
	
	// get the level of the battery 0 - 100%
	ZWave.battery.get()
	ZWave.poll(BATTERY_POLLING_INTERVAL_SEC, ZWave.battery.get)
}

onDisconnected {
	log.debug "{} disconnected", DEVICE_NAME
}

onRemoved {
	log.debug "{} removed", DEVICE_NAME
}



////////////////////////////////////////////////////////////////////////////////
// Protocol Message Callbacks
////////////////////////////////////////////////////////////////////////////////

void handleStateMsg(Object currentState) {
	def prevState = Motion.motion.get()
	if (-1 == currentState ) {
		Motion.motion Motion.MOTION_DETECTED
		log.trace 'Motion: DETECTED'
	} else if (0 == currentState ) {
		Motion.motion Motion.MOTION_NONE
		log.trace 'Motion: NONE'
	}
	// if previous state is not the same as newly reported state, record timestamp of change
	if (Motion.motion.get() != prevState) {
		def now = new Date()
		Motion.motionchanged now
	}
}

onZWaveMessage.basic.report {
	log.debug "Received Basic Report: {}", message
	handleStateMsg message.command.get('value')
}

onZWaveMessage.sensor_binary.report {
	log.debug "Received Sensor Binary Report: {}", message
	handleStateMsg message.command.get('value')
}

onZWaveMessage.battery.report {
	// pass message to generic ZWave Battery Report handler
	GenericZWaveBattery.handleBatteryReport(this, DEVICE_NAME, message)
}

onZWaveMessage.alarm.report {
	log.debug "Device sent Alarm/Notification Report"
	def alarmType =  message.command.get('alarmtype')
	def alarmLevel =  message.command.get('alarmlevel')
	def notificationStatus =  message.command.get('notificationstatus')
	def notificationType =  message.command.get('notificationtype')
	def event =  message.command.get('event')
	def byte[] bytes = message.command.recvBytes
	log.debug "Driver reported Notification, Alarm Type: {}, Alarm Level: {}, Event: {}, Notification Type: {}, Notification Status: {}, CmdBytes: ${bytes}", alarmType, alarmLevel, event, notificationType, notificationStatus
	
	// Cover Removed == Alarm Type: 0, Alarm Level: -1, Event: 3, Notification Type: 7, Notification Status: -1
	if ((0 == alarmType) && (-1 == alarmLevel) && (3 == event) && (7 == notificationType) && (-1 == notificationStatus)) {
		log.info "${DEVICE_NAME} cover removed"
	}
}

onZWaveMessage.wake_up.notification {
	log.info "${DEVICE_NAME} sent Wakeup Notification"
	ZWave.basic.get()
}

onZWaveMessage {
    log.debug "${DEVICE_NAME} received unhandled ZWave message {}", message
    return false;
}


