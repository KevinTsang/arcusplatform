/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 */
package com.arcussmarthome.driver;

import java.util.Map;

import com.arcussmarthome.device.attributes.AttributeKey;
import com.arcussmarthome.device.attributes.AttributeMap;
import com.arcussmarthome.driver.event.DriverEvent;
import com.arcussmarthome.messages.ErrorEvent;
import com.arcussmarthome.messages.PlatformMessage;
import com.arcussmarthome.messages.model.DriverId;
import com.arcussmarthome.protocol.ProtocolMessage;

/**
 *
 */
public interface DeviceDriver {

	public DriverId getDriverId();

	/**
	 * Indicates that this driver supports the given device. The {@code attributes}
	 * are populated by the bridge and may be used for determining compatibility.
	 * @param attributes The attributes generated by the bridge describing
	 * the device.
	 * @return
	 */
	public boolean supports(AttributeMap attributes);

	// TODO is this strictly required?
	public DeviceDriverDefinition getDefinition();

	/**
	 * Returns a set of constant or default values for a driver.
	 * @return
	 */
	public AttributeMap getBaseAttributes();

	/**
	 * Called when the driver is pulled into memory and 
	 * available to receive requests.
	 * @param context
	 */
	public void onRestored(DeviceDriverContext context);
	
	/**
	 * Called when a new driver is associated with the
	 * existing context or when the driver is reloaded.
	 * @param context
	 */
	public void onUpgraded(DriverEvent event, DriverId previous, DeviceDriverContext context) throws Exception;
	
	/**
	 * Called before the context is removed from memory.  This
	 * is a best-effort event, and will be missed in case
	 * of unclean server shutdown.
	 * @param context
	 */
	public void onSuspended(DeviceDriverContext context);

   /**
    * Called when attributes for the device have been updated
    * in a way that should NOT invoke any driver logic.
    */
	public void onAttributesUpdated(DeviceDriverContext context, Map<AttributeKey<?>,Object> attributes, Integer reflexVersion, boolean isDeviceMessage);
	
	/**
	 * Called when a driver life-cycle event happens.
	 * @param event
	 *   The event to be processed (associated, connected, disconnected, disassociated)
	 * @param context
	 *   The device context
	 * @throws Exception
	 *   If an error occurs.
	 */
	public void handleDriverEvent(DriverEvent event, DeviceDriverContext context) throws Exception;

	public void handleProtocolMessage(ProtocolMessage message, DeviceDriverContext context);

	public void handlePlatformMessage(PlatformMessage message, DeviceDriverContext context);

	// TODO is this over-using the ErrorEvent object? we want a struct with a code and a message,
	//      but the intent is that this is sent from a protocol or something of that nature
	//      not the message bus
   public void handleError(ErrorEvent error, DeviceDriverContext context);
}

