/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Mock driver for a Camera
 */
driver			"MOCK_Camera"
description		"Driver for the Mock Camera"
version			"2.7"
protocol		"MOCK"
deviceTypeHint	"Camera"
productId		"606501"
vendor 			"Mockitron"
model 			"Camera"

matcher         'MOCK:Capability' : 'Camera'
matcher         'MOCK:ProductId'  : '606501'

capabilities	'DevicePower', 'DeviceMock', 'WiFi', 'IpInfo', 'Camera', 'DayNightSensor', 'DeviceOta'

def final long FIRMWARE_UPDATE_DELAY = 10000

// ########### driver lifecycle callbacks ##################
onAdded {
	log.debug "Mock Camera started."
	Device.name 'Mock Camera'
	
	// set inital attribute values
	DeviceConnection.signal  93
	
	DevicePower.source 		            DevicePower.SOURCE_BATTERY
	DevicePower.rechargeable            true
	DevicePower.linecapable	            true
	DevicePower.battery                 75
	DevicePower.backupbatterycapable    false
	DevicePower.sourcechanged           ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
	
	
	// Mock resolution
	def resolutionSupportedList =   ["320x240","640x480","1280x720"]
	Camera.resolutionssupported 	resolutionSupportedList
	Camera.resolution 				resolutionSupportedList[0]
	// Mock bit rate
	Camera.bitratetype 				Camera.BITRATETYPE_CBR
	def bitRatesSupportedList =     ["128K"]
	Camera.bitratessupported 		bitRatesSupportedList
	Camera.bitrate 					bitRatesSupportedList[0]
	// Mock qualities
	def qualitiesSupportedList =    ["Normal"]
	Camera.qualitiessupported 		qualitiesSupportedList 
	Camera.quality 					qualitiesSupportedList[0]
	// Mock frame
	Camera.minframerate 			5
	Camera.maxframerate 			30
	Camera.framerate 				5
	//mock privacy
	Camera.privacy 					true
	
	IpInfo.ip                       "192.168.1.1"
	IpInfo.mac                      "01:02:03:04:05:06"
	IpInfo.netmask                  "255:.255.255.0"
	IpInfo.gateway                  "192.168.1.0"
	
	DayNightSensor.mode             DayNightSensor.MODE_DAY
	DayNightSensor.modechanged      ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
	
	WiFi.enabled					true
	WiFi.state						WiFi.STATE_CONNECTED
	WiFi.ssid						'mockNet1'
	WiFi.bssid						'mn1'
	WiFi.security					WiFi.SECURITY_WPA2_PSK
	WiFi.channel					11
	WiFi.noise						12
	WiFi.rssi						78
	
	Scheduler.scheduleIn 'initFirmware', 10000
}
 
onConnected {
	log.debug "Mock Camera connected."
}

onDisconnected {
	log.debug "Mock Camera disconnected."
}

onRemoved {
	log.debug "Mock Camera removed."
}


// ########### capability support ##################

setAttributes('camera') {
	def attrs = message.attributes;

	// writable
	Set goodAttributes = new HashSet();
	
	for (item in attrs) {
		switch (item.key) {
			case Camera.resolution:
				def support = Camera.resolutionssupported.get()
				if(support.contains(item.value)) {
					Camera.resolution item.value
					goodAttributes << item.key
				} else {
					log.warn("Invalid ${item.key}:  ${item.value}.  Should be in the set ${support}");
				}
				break;
			case Camera.bitratetype :
				Camera.bitratetype item.value
				goodAttributes << item.key
				break;
			case Camera.bitrate :
				def support = Camera.bitratessupported.get()
				if(support.contains(item.value)) {
					Camera.bitrate item.value
					goodAttributes << item.key
				} else {
					log.warn("Invalid ${item.key}:  ${item.value}.  Should be in the set ${support}");
				}
				break;
			case Camera.quality :
				def support = Camera.qualitiessupported.get()
				if(support.contains(item.value)) {
					Camera.quality item.value
					goodAttributes << item.key
				} else {
					log.warn("Invalid ${item.key}:  ${item.value}.  Should be in the set ${support}");
				}
				break;
			case Camera.framerate :
				def min = Camera.minframerate.get()
				def max = Camera.maxframerate.get()
				if(min <= item.value && max >= item.value) {
					Camera.framerate item.value
					goodAttributes << item.key
				} else {
					log.warn("Invalid ${item.key}:  ${item.value}.  Should be in the range ${min} - ${max}");
				}
				break;
			default:
				log.error "camera:SetAttributes unrecognized attribute: " + attribute
				break;
		}
	}
	
	return goodAttributes;
}


onCamera.StartStreaming {
	def attrs = message.attributes
    log.debug "invoke camera:StartStreaming [${attrs.url}, ${attrs.maxDuration}, ${attrs.username}, ${attrs.password}]"

    // Stream blob of data to video server
	URL url = new URL(attrs.url);
	String host = url.getHost();
	int port = url.getPort();
	if (port == -1) {
		String protocol = url.getProtocol();
		switch (protocol) {
			case "http":
				port = 80;
				break;
			case "https":
				port = 443;
				break;
		}
	}

	String rtspHeader = buildRtspHeader(host,attrs.username,attrs.password);

	Socket socket;	
	try {
		socket = new Socket(host,port);
		outputStream = socket.getOutputStream();
		outputStream.write(rtspHeader.getBytes());
		sendVideo(outputStream,attrs.maxDuration);
	} catch (Exception e) {
		log.error("Socket Error", e);
		throw e
	} finally {
		if (socket != null) {
			socket.close();
		}
	}
	
   	sendResponse 'camera:StartStreamingResponse', [:]
}

// ########### mock stuff here #####################

onPlatform ("devmock:Connect") {
  log.debug "devmock:Connect"
  connected();
  sendResponse "devmock:ConnectResponse", [:]
}

onPlatform ("devmock:Disconnect") {
  log.debug "devmock:Disconnect"
  disconnected();
  sendResponse "devmock:ConnectResponse", [:]
}

onPlatform ("devmock:SetAttributes") {
  log.debug "devmock:SetAttributes:" + message.attributes.attrs
  attributes << message.attributes.attrs;
  if (message.attributes.attrs['daynight:mode']) { 
    DayNightSensor.modechanged new Date()
  }
  sendResponse "devmock:SetAttributesResponse", [:]
}

// ######## Device OTA related

onEvent('OTAFinish') {
   log.debug "OTA Firmware Update Finished"
   DeviceOta.status "COMPLETED"
   DeviceOta.currentVersion DeviceOta.targetVersion.get()
   DeviceOta.targetVersion null
   DeviceOta.retryCount null
   DeviceOta.lastAttempt null
   
   emit "devota:FirmwareUpdateProgress", ["dlProgress":"100","otaProgress":"100","status":"COMPLETE","reason":null]
   
}

onEvent('initFirmware') {
   DeviceOta.currentVersion "V1.0.03"
}

onEvent('OTAEmitProgress') {
   int progressPercent = vars.progress * 10 
   log.debug "Report Progress ${progressPercent}%"
   DeviceOta.progressPercent progressPercent
   
   if(vars.progress<10){
      emit "devota:FirmwareUpdateProgress", ["dlProgress":"100","otaProgress":progressPercent,"status":progressPercent==100?"COMPLETED":"INPROGRESS","reason":null]
      Scheduler.scheduleIn 'OTAEmitProgress', (int)(vars.delay/10)
      vars.progress++
   }else{
      Scheduler.scheduleIn 'OTAFinish', 1000
   }
   
}


onEvent('OTAInprogress') {
   log.debug "OTA Firmware Update Inprogess"
   log.debug "Begin Downloading ${vars.firmwareUrl}"
   
   Scheduler.scheduleIn 'OTAEmitProgress', (1000)
   
   DeviceOta.status "INPROGRESS"
}

onEvent('OTAFailed') {
   log.debug "OTA Firmware Update Finished"
   DeviceOta.status "FAILED"
   DeviceOta.retryCount 0
   DeviceOta.lastAttempt new Date();
}

onPlatform ("devota:FirmwareUpdate") {
   log.debug "devota:FirmwareUpdate with args ${message.attributes}"
   vars.firmwareUrl=message.attributes['url']?:""
   vars.delay=vars.firmwareUrl.isNumber()?Integer.parseInt(vars.firmwareUrl)*1000:FIRMWARE_UPDATE_DELAY
   vars.progress=0
   
   if(DeviceOta.status.get()=="FAILED"){
      DeviceOta.retryCount ((DeviceOta.retryCount.get()?:0)+1)
      DeviceOta.lastAttempt new Date();
   }

   DeviceOta.status "IDLE"
   if(vars.firmwareUrl.contains("fail")){
      Scheduler.scheduleIn 'OTAFailed', (1000)
   }
   else{
      DeviceOta.targetVersion "V1.0.04" 
      Scheduler.scheduleIn 'OTAInprogress', 5000
   }
   sendResponse "devota:FirmwareUpdateResponse", ["status":"OK","message":"Firmare Update Request Received"]
 }

// ########

// ########### Video Utils Here #####################

String buildRtspHeader(host,username,password) {
	header = "RTSP/1.0 200 OK\r\n";
	header += "Host: " + host + "\r\n"
	header += "User-Agent: Mock/Mock\r\n"
	header += "Content-Type: application/octet-stream\r\n";
	header += "Authorization: Basic " + createAuthorization(username,password) + "\r\n";
	header += "X-Precapture: 0\r\n";

	switch ( Camera.resolution.get() ) {
    case "320x240":
		header += "X-SDP: dj0wDQpvPS0gMTU3OTcgMTU3OTcgSU4gSVA0IDE5Mi4xNjguMS4yNDINCnM9UlRTUCBTZXJ2ZXIoSDI2NCkgLSBPQzgyMTI1MEE2Mg0KYz1JTiBJUDQgMC4wLjAuMA0KdD0wIDANCmE9Y2hhcnNldDpTaGlmdF9KSVMNCmE9cmFuZ2U6bnB0PTAtDQphPWNvbnRyb2w6Kg0KYT1ldGFnOjEyMzQ1Njc4OTANCm09dmlkZW8gMCBSVFAvQVZQIDk2DQpiPUFTOjEyOA0KYT1ydHBtYXA6OTYgSDI2NC85MDAwMA0KYT1jb250cm9sOnRyYWNrSUQ9MQ0KYT1mbXRwOjk2IHBhY2tldGl6YXRpb24tbW9kZT0xO3Byb2ZpbGUtbGV2ZWwtaWQ9NDI4MDFmO3Nwcm9wLXBhcmFtZXRlci1zZXRzPVowS0FIOW9GQjhsU0FBQURBUEFBQUFTd3dJQVBvQUFLL0xlOThMd2lFYWc9LGFNNDhnQT09DQphPXgtZnJhbWVyYXRlOjUNCmE9ZnJhbWVyYXRlOjUuMA0KYT14LWR1cmF0aW9uOjMwDQo="
		break;
	case "640x480":
		header += "X-SDP: dj0wDQpvPS0gMTU2NjMgMTU2NjMgSU4gSVA0IDE5Mi4xNjguMS4yNDINCnM9UlRTUCBTZXJ2ZXIoSDI2NCkgLSBPQzgyMTI1MEE2Mg0KYz1JTiBJUDQgMC4wLjAuMA0KdD0wIDANCmE9Y2hhcnNldDpTaGlmdF9KSVMNCmE9cmFuZ2U6bnB0PTAtDQphPWNvbnRyb2w6Kg0KYT1ldGFnOjEyMzQ1Njc4OTANCm09dmlkZW8gMCBSVFAvQVZQIDk2DQpiPUFTOjEyOA0KYT1ydHBtYXA6OTYgSDI2NC85MDAwMA0KYT1jb250cm9sOnRyYWNrSUQ9MQ0KYT1mbXRwOjk2IHBhY2tldGl6YXRpb24tbW9kZT0xO3Byb2ZpbGUtbGV2ZWwtaWQ9NDI4MDFmO3Nwcm9wLXBhcmFtZXRlci1zZXRzPVowS0FIOW9DZ1BTVklBQUFEd0FBQXdCTERBZ0ErZ0FBcjh0NzN3dkNJUnFBLGFNNDhnQT09DQphPXgtZnJhbWVyYXRlOjUNCmE9ZnJhbWVyYXRlOjUuMA0KYT14LWR1cmF0aW9uOjENCg=="
		break;
	case "1280x720":
		header += "X-SDP: dj0wDQpvPS0gMTU3OTcgMTU3OTcgSU4gSVA0IDE5Mi4xNjguMS4yNDINCnM9UlRTUCBTZXJ2ZXIoSDI2NCkgLSBPQzgyMTI1MEE2Mg0KYz1JTiBJUDQgMC4wLjAuMA0KdD0wIDANCmE9Y2hhcnNldDpTaGlmdF9KSVMNCmE9cmFuZ2U6bnB0PTAtDQphPWNvbnRyb2w6Kg0KYT1ldGFnOjEyMzQ1Njc4OTANCm09dmlkZW8gMCBSVFAvQVZQIDk2DQpiPUFTOjUxMg0KYT1ydHBtYXA6OTYgSDI2NC85MDAwMA0KYT1jb250cm9sOnRyYWNrSUQ9MQ0KYT1mbXRwOjk2IHBhY2tldGl6YXRpb24tbW9kZT0xO3Byb2ZpbGUtbGV2ZWwtaWQ9NDI4MDFmO3Nwcm9wLXBhcmFtZXRlci1zZXRzPVowS0FIOW9CUUJiSlVnQUFBd0R3QUFBRXNNQ0FBK2dBQUN2eU43M3d2Q0lScUE9PSxhTTQ4Z0E9PQ0KYT14LWZyYW1lcmF0ZTo1DQphPWZyYW1lcmF0ZTo1LjANCmE9eC1kdXJhdGlvbjozMA0K"
		break;
	default:
		log.warn "Invalid Camera Resolution {}", Camera.resolution.get() 
	}
	
	header += "\r\n\r\n"

	return header;
}

String createAuthorization(username,password) {
	return Base64.getEncoder().encodeToString((username + ":" + password).getBytes());
}

void sendVideo(outputStream,duration) {
	byte[] data = loadVideo(duration)
	outputStream.write(data);
	outputStream.flush();
}

// Uses current settings to determine which video to
byte[] loadVideo(duration) {
	String filename = "videos/video_" + Camera.resolution.get() + "_" + Camera.framerate.get() + "fps_" + duration + "s.bin"
	log.debug "Opening ${filename}"
	def resource = this.getClass().getResource(filename)
	byte[] video;
	if (resource != null) {
		video = resource.bytes;
	} else {
		log.warn "Cannot find {}, using default 1s video instead", filename
		video = loadDefaultVideo();
	}	
	return video;
}


byte[] loadDefaultVideo() {
	def videoBase64 = "";
	def data = Base64.getDecoder().decode(videoBase64)
	return data;
}


