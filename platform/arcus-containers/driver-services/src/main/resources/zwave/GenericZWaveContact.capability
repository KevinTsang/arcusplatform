/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import groovy.transform.Field


description		"Default ZWave implementation for the Contact capability"
version			"1.0"
capability       'Contact'

@Field def final String DEFAULT_NAME     = 'ZWave Contact Device'


onAdded {
	String name = vars.'CURRENT_NAME' ?: DEFAULT_NAME
	log.trace "${name} ZWave Contact device added..."

	// set default attribute values
	Contact.contact                     Contact.CONTACT_OPENED
	Contact.contactchanged              ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())

}

onConnected {
	String name = vars.'CURRENT_NAME' ?: DEFAULT_NAME
	log.trace "${name} ZWave Contact device connected..."
	
	// read the current state
	ZWave.basic.get()
}


/**
 * Generic handler for the Contact State.
 * 
 * currentState is passed in since some devices may use Notification to report the state and/or values
 * other than the standard 0xff (-1) for Open, and 0x00 (0) for Closed.  This handler expects the
 * state to be one of those two values, so if alternative values are used they must be translated before
 * passing them into this handler.
 */
static void handleContactState(ctx, name, byte currentState) {
	def prevState = ctx.Contact.contact.get()
	if (-1 == currentState ) {
		ctx.Contact.contact ctx.Contact.CONTACT_OPENED
		ctx.log.trace "Contact: OPENED"
	} else if (0 == currentState ) {
		ctx.Contact.contact ctx.Contact.CONTACT_CLOSED
		ctx.log.trace "Contact: CLOSED"
	}
	// if previous state is not the same as newly reported state, record timestamp of change
	if (ctx.Contact.contact.get() != prevState) {
		def now = new Date()
		ctx.Contact.contactchanged now
	}
}


