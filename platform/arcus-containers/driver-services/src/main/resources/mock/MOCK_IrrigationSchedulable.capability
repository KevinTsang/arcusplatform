/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
capability "IrrigationSchedulable"
description "Mock Implementation for the IrrigationSchedulable capability"
version "1.0"

def final long COMMAND_DELAY = 1000;

onIrrigationSchedulable.EnableSchedule {
   Scheduler.scheduleIn 'EnableScheduling', COMMAND_DELAY
   sendResponse 'irrsched:EnableScheduleResponse'
}

onIrrigationSchedulable.DisableSchedule {
   def attrs = message.attributes
   Scheduler.scheduleIn 'DisableScheduling', ['duration' : attrs.duration], COMMAND_DELAY
   sendResponse 'irrsched:DisableScheduleResponse'
}

onIrrigationSchedulable.ClearEvenOddSchedule {
   def attrs = message.attributes
   def eventAttrs = [ 'opId': attrs.opId ]
   Scheduler.scheduleIn 'MockSendEvent', ['msg' : 'irrsched:ScheduleCleared', 'attrs': eventAttrs ], COMMAND_DELAY
   sendResponse 'irrsched:ClearEvenOddScheduleResponse'
}

onIrrigationSchedulable.SetEvenOddSchedule {
   def attrs = message.attributes
   def eventAttrs = [ 'opId': attrs.opId ]
   Scheduler.scheduleIn 'MockSendEvent', ['msg' : 'irrsched:ScheduleApplied', 'attrs': eventAttrs ], COMMAND_DELAY
   sendResponse 'irrsched:SetEvenOddScheduleResponse'
}

onIrrigationSchedulable.ClearIntervalSchedule {
   def attrs = message.attributes
   def eventAttrs = [ 'opId': attrs.opId ]
   Scheduler.scheduleIn 'MockSendEvent', ['msg' : 'irrsched:ScheduleCleared', 'attrs': eventAttrs ], COMMAND_DELAY
   sendResponse 'irrsched:ClearIntervalScheduleResponse'
}

onIrrigationSchedulable.SetIntervalSchedule {
   def attrs = message.attributes
   def eventAttrs = [ 'opId': attrs.opId ]
   Scheduler.scheduleIn 'MockSendEvent', ['msg' : 'irrsched:ScheduleApplied', 'attrs': eventAttrs ], COMMAND_DELAY
   sendResponse 'irrsched:SetIntervalScheduleResponse'
}

onIrrigationSchedulable.SetIntervalStart {
   def attrs = message.attributes
   def eventAttrs = [ 'opId': attrs.opId ]
   Scheduler.scheduleIn 'MockSendEvent', ['msg' : 'irrsched:SetIntervalStartSucceeded', 'attrs': eventAttrs ], COMMAND_DELAY
   sendResponse 'irrsched:SetIntervalStartResponse'
}

onIrrigationSchedulable.ClearWeeklySchedule {
   def attrs = message.attributes
   def eventAttrs = [ 'opId': attrs.opId ]
   Scheduler.scheduleIn 'MockSendEvent', ['msg' : 'irrsched:ScheduleCleared', 'attrs': eventAttrs ], COMMAND_DELAY
   sendResponse 'irrsched:ClearWeeklyScheduleResponse'
}

onIrrigationSchedulable.SetWeeklySchedule {
   def attrs = message.attributes
   def eventAttrs = [ 'opId': attrs.opId ]
   Scheduler.scheduleIn 'MockSendEvent', ['msg' : 'irrsched:ScheduleApplied', 'attrs': eventAttrs ], COMMAND_DELAY
   sendResponse 'irrsched:SetWeeklyScheduleResponse'
}

onEvent('MockSendEvent') {
   def data = message.data
   def attrs = message.data.attrs
   def msg = message.data.msg
   
   emit msg, attrs
}

onEvent('EnableScheduling') {
   IrrigationController.controllerState IrrigationController.CONTROLLERSTATE_NOT_WATERING
   IrrigationController.rainDelayDuration 0
   emit 'irrsched:ScheduleEnabled'
}

onEvent('DisableScheduling') {
   IrrigationController.controllerState IrrigationController.CONTROLLERSTATE_RAIN_DELAY
   IrrigationController.rainDelayDuration message.data.duration
   IrrigationController.rainDelayStart new Date()
}

