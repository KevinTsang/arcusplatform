/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import com.iris.messages.type.Population
/**
 * Mock driver for a Button device
 * 
 * Notes: When button state is set to PRESSED, it will automatically be reset to RELEASED 1 second later.
 * 
 */
driver			"MOCK_Button"
description		"Driver for a Button device"
version			"1.2"
protocol		"MOCK"
deviceTypeHint	"Button"
productId		"bbf1cf"
vendor 			"Mockitron"
model 			"Button"

populations     [Population.NAME_BETA,Population.NAME_QA]
matcher         'MOCK:Capability' : 'Button'
matcher         'MOCK:ProductId'  : 'bbf1cf'

capabilities	'DevicePower', 'Button', 'DeviceMock'


final long RELEASE_DELAY_MSEC    = 1000  // simulate button RELEASED 1 second after PRESSED
final long PROVISIONING_DELAY_MS = 30000 // simulate provisiong takes a moment

final String EVENT_PROVISIONED   = "Provisioned"

// ########### driver lifecycle callbacks ##################

onAdded {
	log.debug "Mock Button device started."
	Device.name 'Mock Button'
	
	// set inital attribute values
	DeviceConnection.signal	94

	DevicePower.source                  DevicePower.SOURCE_BATTERY
	DevicePower.linecapable	            false
	DevicePower.battery                 15
	DevicePower.backupbatterycapable    false
	DevicePower.sourcechanged           ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
	
	Button.state			Button.STATE_RELEASED
	Button.statechanged     ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
	
	provisioning()
	Scheduler.scheduleIn EVENT_PROVISIONED, PROVISIONING_DELAY_MS
}

onConnected {
	log.debug "Mock Button device connected."
}

onDisconnected {
	log.debug "Mock Button device disconnected."
}

onRemoved {
	log.debug "Mock Button device removed."
}

onEvent(EVENT_PROVISIONED) {
	provisioned()
}

// ########### capability support ##################

setAttributes('but') {
	def attrs = message.attributes;
	for(attribute in attrs) {
		switch(attribute.key) {
			case Button.state:
				if (Button.state.get() != attribute.value) {
					Button.statechanged new Date()
				}
				Button.state attribute.value

				// if value is PRESSED, do a delayed setting of the value to RELEASED
				if (Button.STATE_PRESSED == attribute.value) {
					log.debug "Button Pressed"
					vars.'count'=1
					Scheduler.scheduleRepeating 'ReleaseButton', RELEASE_DELAY_MSEC, 10
				}
				break;
			default:
				log.error "Unrecognized attribute: " + attribute
		}
	}
}


onEvent('ReleaseButton') {
    log.debug "ReleaseButton event is called, count =${vars.'count'}"
    if(stopRetryCondition()) {
        Button.state Button.STATE_RELEASED
        Button.statechanged new Date()
        log.debug "Button Released"
        Scheduler.cancel 'ReleaseButton'

    }else {
        //continue
    }   
}

def boolean stopRetryCondition() {
	if(vars.'count' > 3) {
		return true
	}else {
		vars.'count'++
		return false
	}
}
	
	


// ########### mock stuff here #####################

onPlatform ("devmock:Connect") {
  log.debug "devmock:Connect"
  connected();
  sendResponse "devmock:ConnectResponse", [:]
}

onPlatform ("devmock:Disconnect") {
  log.debug "devmock:Disconnect"
  disconnected();
  sendResponse "devmock:ConnectResponse", [:]
}

onPlatform ("devmock:SetAttributes") {
  log.debug "devmock:SetAttributes:" + message.attributes.attrs
  attributes << message.attributes.attrs;
  if (message.attributes.attrs['but:state']) {
    Button.statechanged new Date()
  }
  sendResponse "devmock:SetAttributesResponse", [:]
}

