/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Driver for the Sengled Element Classic Dimmable Bulb (A19 and BR30)
 * 
 * FACTORY RESET:
 *   While the bulb is on, quickly turn the bulb off and then on 10 times in quick succession.
 *   If the reset is successful, the bulb will flash five times. If it does not flash five times,
 *   you will have to try again.
 *   
 *   https://support.sengled.com/hc/en-us/articles/228367628-Resetting-a-Bulb
 * 
 * 
 * IN Clusters
 *   0x0000     Basic
 *   0x0003     Identify
 *   0x0004     Groups
 *   0x0005     Scenes
 *   0x0006     On/Off
 *   0x0008     Level Control
 *   0x0702     (1794) Metering     
 *   0x0B05     (2821) Diagnostics
 * OUT Clusters
 *   0x0019     (25) OTA Upgrade
 * 
 */
import groovy.transform.Field
import static com.arcussmarthome.protocol.zigbee.zcl.Constants.*
import static com.arcussmarthome.protocol.zigbee.zcl.General.*

uses "zigbee.GenericZigbeeDimmer"
uses "zigbee.GenericZigbeeDeviceOta"


driver           "ZBSengledElementClassic"
description      "Driver for the Sengled Element Classic Dimmable Bulb"
version          "2.11"
protocol         "ZIGB"
deviceTypeHint   "Light"
productId        "da4f30"
vendor           "Sengled"
model            "E11-G13"

matcher          'ZIGB:manufacturer': 0x1160, 'ZIGB:vendor': 'sengled', 'ZIGB:model': 'E11-G13'

capabilities     DeviceOta, Identify

DevicePower {
    source DevicePower.SOURCE_LINE
    linecapable true
    backupbatterycapable false
    bind sourcechanged to source
}

Switch {
    state Switch.STATE_ON
    bind statechanged to state
}

Dimmer {
    brightness 100
}

Light {
    colormode Light.COLORMODE_NORMAL
}


@Field final int DVC_ENDPOINT = 1
@Field def dvcEndPoint  = Zigbee.endpoint((byte)DVC_ENDPOINT)

@Field def onOffCluster = dvcEndPoint.OnOff
@Field def levelCluster = dvcEndPoint.Level
@Field def identCluster = dvcEndPoint.Identify
@Field def otaCluster   = dvcEndPoint.Ota
@Field def diagCluster  = dvcEndPoint.Diagnostics


// operational constants
final short PROFILE_HA              = 0x0104
final int   OFFLINE_TIMEOUT_SECS    = 600           // 10 minutes
final short IDENT_PERIOD_SECS       = 15            // number of seconds for device to Identify itself (by flashing) when Identify method is called


Zigbee {
    configure {
        bind name: "bind-onoff",
            endpoint: DVC_ENDPOINT,
            cluster: Zcl.OnOff.CLUSTER_ID,
            server: true

        bind name: "bind-level",
            endpoint: DVC_ENDPOINT,
            cluster: Zcl.Level.CLUSTER_ID,
            server: true

        bind name: "bind-ota",
            endpoint: DVC_ENDPOINT,
            cluster: Zcl.Ota.CLUSTER_ID,
            server: true

        report name: "conf-level",
            endpoint: DVC_ENDPOINT,
            cluster: Zcl.Level.CLUSTER_ID,
            attr: Zcl.Level.ATTR_CURRENT_LEVEL,
            change: Data.encode8BitUnsigned(1),
            min: 1,
            max: 120

        report name: "conf-onoff",
            endpoint: DVC_ENDPOINT,
            cluster: Zcl.OnOff.CLUSTER_ID,
            attr: Zcl.OnOff.ATTR_ONOFF,
            type: Data.TYPE_BOOLEAN,
            min: 1,
            max: 120
    }
}


////////////////////////////////////////////////////////////////////////////////
// Driver lifecycle callbacks
////////////////////////////////////////////////////////////////////////////////

onConnected {
	Zigbee.setOfflineTimeout( OFFLINE_TIMEOUT_SECS )
    // restore device settings to match capability attributes
    GenericZigbeeDimmer.restoreDeviceSettings(this, DEVICE_NAME, levelCluster, onOffCluster)
}


////////////////////////////////////////
///    Events
////////////////////////////////////////

onEvent(GenericZigbeeDimmer.DEFERRED_ON_EVENT) {
    GenericZigbeeDimmer.doDeferredOnEvent(this, DEVICE_NAME, onOffCluster)
}

onEvent(GenericZigbeeDimmer.READ_SWITCH_EVENT) {
    GenericZigbeeDimmer.doReadSwitchEvent(this, DEVICE_NAME, onOffCluster)
}

onEvent(GenericZigbeeDimmer.READ_LEVEL_EVENT) {
    GenericZigbeeDimmer.doReadLevelEvent(this, DEVICE_NAME, levelCluster)
}


////////////////////////////////////////////////////////////////////////////////
// Capability Attribute Closures
////////////////////////////////////////////////////////////////////////////////

setAttributes() {
    GenericZigbeeDimmer.doSetAttributes(this, DEVICE_NAME, levelCluster, onOffCluster, message)
}

onDimmer.RampBrightness {
    GenericZigbeeDimmer.doRampBrightness(this, DEVICE_NAME, levelCluster, onOffCluster, message)
}

onDimmer.IncrementBrightness {
    GenericZigbeeDimmer.doIncrementBrightness(this, DEVICE_NAME, levelCluster, onOffCluster, message)
}
 
onDimmer.DecrementBrightness {
    GenericZigbeeDimmer.doDecrementBrightness(this, DEVICE_NAME, levelCluster, onOffCluster, message)
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the On/Off Cluster
////////////////////////////////////////////////////////////////////////////////

onZigbeeMessage.Zcl.onoff.zclreadattributesresponse() {
    GenericZigbeeDimmer.handleOnOffMsgWithRestore(this, DEVICE_NAME, levelCluster, onOffCluster, message)
}

onZigbeeMessage.Zcl.onoff.zclreportattributes() {
    GenericZigbeeDimmer.handleOnOffMsgWithRestore(this, DEVICE_NAME, levelCluster, onOffCluster, message)
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the Level Cluster
////////////////////////////////////////////////////////////////////////////////

onZigbeeMessage.Zcl.level.zclreadattributesresponse() {
    GenericZigbeeDimmer.handleLevelMsgWithRestore(this, DEVICE_NAME, levelCluster, onOffCluster, false, message)
}

onZigbeeMessage.Zcl.level.zclreportattributes() {
    GenericZigbeeDimmer.handleLevelMsgWithRestore(this, DEVICE_NAME, levelCluster, onOffCluster, false, message)
}


////////////////////////////////////////////////////////////////////////////////
// Identify Capability Closures
////////////////////////////////////////////////////////////////////////////////

onIdentify.Identify {
    identCluster.identifyCmd( IDENT_PERIOD_SECS )
    sendResponse 'ident:IdentifyResponse', ['result':true]
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the Diagnostics Cluster
////////////////////////////////////////////////////////////////////////////////

onZigbeeMessage.Zcl.diagnostics.zclreadattributesresponse() {
    log.trace "Received Diagnostics Attributes Response: {}", message
}

onZigbeeMessage.Zcl.diagnostics.zclreportattributes() {
    log.trace "Received Diagnostics Attributes Report: {}", message
}


////////////////////////////////////////////////////////////////////////////////
// DeviceOta Capability
////////////////////////////////////////////////////////////////////////////////

onEvent('DeviceOtaDeferredRead') {
   GenericZigbeeDeviceOta.doProcessDeviceOtaDeferredRead(this,DEVICE_NAME,dvcEndPoint)
}

onEvent('DeviceOtaCheckFragmentRequestTimeout') {
   GenericZigbeeDeviceOta.doProcessDeviceOtaCheckFragmentRequestTimeout(this,DEVICE_NAME)
}

onZigbeeMessage.Zcl.ota.zclreadattributesresponse() {
   GenericZigbeeDeviceOta.doHandleOtaReadAttributesResponse(this,DEVICE_NAME,otaCluster,message)
}

onZigbeeMessage.Zcl.ota.querynextimagerequest() {
   GenericZigbeeDeviceOta.doHandleQueryNextImageRequest(this,DEVICE_NAME,message)
}

onZigbeeMessage.Zcl.ota.imageblockrequest() {
   GenericZigbeeDeviceOta.doHandleImageBlockRequest(this,DEVICE_NAME,message)
}

onZigbeeMessage.Zcl.ota.imagePageRequest() {
   GenericZigbeeDeviceOta.doHandleImagePageRequest(this,DEVICE_NAME,message)
}

onZigbeeMessage.Zcl.ota.upgradeendrequest() {
   GenericZigbeeDeviceOta.doHandleUpgradeEndRequest(this,DEVICE_NAME,message)
}


////////////////////////////////////////////////////////////////////////////////
// Default protocol message handlers
////////////////////////////////////////////////////////////////////////////////

// default handler for ZCL messages, called if no other handlers handled the ZCL message
onZigbeeMessage(Zigbee.TYPE_ZCL) {
    def zclMsg = Zigbee.Message.toZcl(message)
    def profile = zclMsg.getProfileId()
    def clusterId = zclMsg.getClusterId()
    def messageId = zclMsg.getZclMessageId()
    def endpoint = zclMsg.getEndpoint()
    def flags = zclMsg.getFlags()
    def payloadLen = zclMsg.getLength()
    byte[] data = zclMsg.getPayload()
    
    if (PROFILE_HA == profile) {
        
        if (ZHA_CLUSTER_ON_OFF == clusterId && ZclConfigureReportingResponse.ID == messageId) {
            logResponse(data, "On/Off reporting config")
            return
        }
        
        if (ZHA_CLUSTER_ON_OFF == clusterId && ZclReadReportingConfigurationResponse.ID == messageId) {
            log.info "Read Reporting Configuration response Endpoint:{}, Cluster:{}, Data:{}, Size:{}", endpoint, clusterId, data, data.size()
            return
        }
        
        if (ZHA_CLUSTER_LEVEL_CONTROL == clusterId && ZclConfigureReportingResponse.ID == messageId) {
            logResponse(data, "Level reporting config")
            return
        }
        
        if (ZHA_CLUSTER_LEVEL_CONTROL == clusterId && ZclReadReportingConfigurationResponse.ID == messageId) {
            log.info "Read Reporting Configuration response Endpoint:{}, Cluster:{}, Data:{}, Size:{}", endpoint, clusterId, data, data.size()
            return
        }
    }

    log.debug "Driver received unhandled zigbee ZCL message Profile:{}, ClusterId:{}, MessageId:{}, EndPoint:{}, Flags:{}, Len:{}, Data:{}",
            profile, clusterId, messageId, endpoint, flags, payloadLen, data
}

void logResponse(data, msgType) {
    if ((null != data) && (1 <= data.size()) && (0x00 == data[0])) {
        log.trace "{} was successful: {}", msgType, data
    } else {
        log.warn "{} FAILED: {}", msgType, data
    }
}


