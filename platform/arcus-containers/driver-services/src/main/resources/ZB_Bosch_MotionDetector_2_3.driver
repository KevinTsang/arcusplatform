/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * ZigBee Driver for the Bosch Motion Detector for model ISW-ZPR1-WP13 and ISW-ZDL1-WP11G
 *
 * 9/29/15 - Updated driver to keep trying to set IAS CIE Address (every 5 seconds) until successfull,
 *           and then to send the Zone Enrollment Response (every 5 seconds) until a Zone Status Change is successfully reported
 *
 * 02/11/16 - Update driver to only try setting IAS CIE Address a maximum of 100 times with progressive back-off, and to stop
 *            if receiving "Request Denied" and simply verify address written matches Hub's.
 *
 * 05/04/17 - Initial reflex motion detection support.
 *
 */

import groovy.transform.Field                    // not needed to compile, but used in eclipse
import static java.util.concurrent.TimeUnit.*    // needed when running Unit Tests

driver           "ZBBoschMotionDetector"
description      "Driver for the Bosch Motion Detector"
version          "2.3"
protocol         "ZIGB"
deviceTypeHint   "Motion"
productId        "c77e34"
vendor           "Uncertified"    // "Bosch", but these are Uncertified devices
model            "ISW-ZPR1-WP13,ISW-ZDL1-WP11G"

matcher          'ZIGB:manufacturer': 0x0000, 'ZIGB:vendor': 'Bosch', 'ZIGB:model': 'ISW-ZDL1-WP11G'
matcher          'ZIGB:manufacturer': 0x0000, 'ZIGB:vendor': 'Bosch', 'ZIGB:model': 'ISW-ZPR1-WP13'

capabilities     'DevicePower', 'Motion', 'Temperature'

uses "zigbee.GenericZigbeeDeviceOta"


// Manufacturer ID:       0x0000
// Manufacturer:          Bosch
// Model:                 SW-ZDL1-WP11G or ISW-ZPR1-WP13
//
// Profile ID:  0x0104  ZigBee HA
// IN Clusters
//   0x0000     Basic
//   0x0001     Power Configuration
//   0x0003     Identify
//   0x0020     Poll Control
//   0x0402     Temperature Measurement
//   0x0500     IAS Zone
//   0x0B05     Diagnostics
// OUT Clusters
//   0x0019     OTA Upgrade
//

@Field final byte END_POINT = 5
@Field final def dvcEndPoint = Zigbee.endpoint(END_POINT)

final def pwrCluster   = dvcEndPoint.Power
final def zoneCluster  = dvcEndPoint.IasZone
final def pollCluster  = dvcEndPoint.PollControl
final def tempCluster  = dvcEndPoint.TemperatureMeasurement
final def diagCluster  = dvcEndPoint.Diagnostics
final def otaCluster   = dvcEndPoint.Ota


@Field final String DEVICE_NAME           = 'Bosch Motion Sensor'
@Field final short PROFILE_HA             = 0x0104
@Field final short CLUSTER_PWR_CNFG       = 0x0001
@Field final short CLUSTER_POLL_CONTROL   = 0x0020
@Field final short CLUSTER_TEMPERATURE    = 0x0402
@Field final short CLUSTER_DIAGNOSTICS    = 0x0B05
@Field final short CLUSTER_IAS_ZONE       = 0x0500

@Field final byte CMD_CNFG_RPT            = 0x06         // General Command Frame - Configure Reporting
@Field final byte CMD_CNFG_RPT_RSP        = 0x07         // General Command Frame - Configure Reporting Response
@Field final byte CMD_WRT_ATTR            = 0x02         // General Command Frame - Write Attributes
@Field final byte CMD_WRT_ATTR_RSP        = 0x04         // General Command Frame - Write Attributes Response

final byte  TEMP_CONFIG_RPT_DIR           = 0x00
final byte  TEMP_CONFIG_RPT_ATTR_ID       = 0x00
final byte  TEMP_CONFIG_RPT_DATA_TYPE     = 0x29
final short TEMP_CONFIG_RPT_MIN           = 0x001E       // 0x012C  (  300 seconds)
final short TEMP_CONFIG_RPT_MAX           = 0x003C       // 0xA8C0  (43200 seconds)
final short TEMP_CONFIG_TIMEOUT           = 0x0032

final int OFFLINE_TIMEOUT_SECS            = 600          // 10 minutes
@Field final long WRITE_IAS_CIE_DELAY     = 5000
@Field final long ZONE_ENROLL_DELAY       = 5000
@Field final long MAX_IAS_CIE_WRITES      = 100          // Maximum attempts to try and write the IAS CIE Address
@Field final long MAX_ZONE_ENROLLS        = 100          // Maximum attempts to try and enroll the device in a Zone

@Field final long CNFG_RETRY_DELAY_MSEC   = 10000        // delay 10 x Attempt-Cnt seconds between retries to configure reporting
@Field final int MAX_CNFG_ATTEMPTS        = 10           // maximum number of attempts to make trying to configure reporting
@Field final String CNFG_PWR_RPT          = 'CnfgPwrRpt'
@Field final String CNFG_TEMP_RPT         = 'CnfgTempRpt'
@Field final String CNFG_POLL_CTRL        = 'CnfgPollCrtl'
@Field final String CNFG_DIAG_RPT         = 'CnfgDiagRpt'

////////////////////////////////////////////////////////////////////////////////
// Driver capability support - DevicePower, Motion, Temperature, DeviceOta
////////////////////////////////////////////////////////////////////////////////

DevicePower {
   DevicePower.source DevicePower.SOURCE_BATTERY
   DevicePower.linecapable false
   DevicePower.backupbatterycapable false

   bind DevicePower.sourcechanged to DevicePower.source
}

Motion {
   Motion.motion Motion.MOTION_NONE

   bind Motion.motionchanged to Motion.motion
}

Temperature {
   Temperature.temperature null
}


////////////////////////////////////////////////////////////////////////////////
// Reflex support
////////////////////////////////////////////////////////////////////////////////

// Only handle motion detection for now!
Zigbee {

   match reflex {
      on iaszone, endpoint: 5, set: ["alarm1"], maxDelay: 30
      trace "Alarm1 Set (Motion Detected)"
      set Motion.motion, Motion.MOTION_DETECTED
   }

   match reflex {
      on iaszone, endpoint: 5, clear: ["alarm1"], maxDelay: 30
      trace "Alarm1 Clear (No Motion)"
      set Motion.motion, Motion.MOTION_NONE
   }

   offlineTimeout OFFLINE_TIMEOUT_SECS, SECONDS
}

////////////////////////////////////////////////////////////////////////////////
// Driver lifecycle callbacks
////////////////////////////////////////////////////////////////////////////////

onAdded {
	log.debug "{} device added.", DEVICE_NAME

	Zigbee.bindEndpoints(
		pwrCluster.bindServerCluster(),
		zoneCluster.bindServerCluster(),
		pollCluster.bindServerCluster(),
		tempCluster.bindServerCluster(),
		diagCluster.bindServerCluster() )

	// initialize flags to track successfully configuring the device
	vars.'writeIasCieCnt' = 0
	vars.'zoneEnrollCnt' = 0

	// set defaults for battery
	vars.'battMinThreshold' = 2.4
	vars.'battNominalVolts' = 3.0

	// set long poll interval to 20 quarter seconds, and short poll interval to 2 quarter seconds
	pollCluster.setLongPollInterval((int)20)
	pollCluster.setShortPollInterval((short)2)

	// write the IAS CIE Address now
	zoneCluster.zclWriteAttributes( [(zoneCluster.ATTR_IAS_CIE_ADDRESS): Zigbee.Data.encodeIeee(Zigbee.Hub.eui64)] )
	// and schedule a followup write in case first write fails
	Scheduler.scheduleIn 'doWriteIasCie', WRITE_IAS_CIE_DELAY
}


onConnected {
	log.debug "{} device connected.", DEVICE_NAME

	// set long poll interval to 20 quarter seconds, and short poll interval to 2 quarter seconds
	pollCluster.setLongPollInterval((int)20)
	pollCluster.setShortPollInterval((short)2)

	Scheduler.scheduleRepeating 'powerClusterRead', CNFG_RETRY_DELAY_MSEC, MAX_CNFG_ATTEMPTS

	// read current Temperature attributes
	tempCluster.zclReadAttributes(
		tempCluster.ATTR_MEASURED_VALUE )

	// read Diagnostic attributes
	diagCluster.zclReadAttributes(
		diagCluster.ATTR_LAST_MESSAGE_LQI,
		diagCluster.ATTR_LAST_MESSAGE_RSSI )

	// read current IAS Zone attributes (if needed)
	zoneCluster.zclReadAttributes(
		zoneCluster.ATTR_ZONE_STATE,
		zoneCluster.ATTR_ZONE_TYPE,
		zoneCluster.ATTR_ZONE_STATUS,
		zoneCluster.ATTR_IAS_CIE_ADDRESS )

	// read current Poll Control attributes (if needed)
	pollCluster.zclReadAttributes(
		pollCluster.ATTR_CHECKIN_INTERVAL,
		pollCluster.ATTR_LONG_POLL_INTERVAL,
		pollCluster.ATTR_SHORT_POLL_INTERVAL )

	// configure reporting of PowerConfig cluster BatteryVoltage
	vars.CNFG_PWR_RPT = 0
	Scheduler.scheduleRepeating CNFG_PWR_RPT, CNFG_RETRY_DELAY_MSEC, MAX_CNFG_ATTEMPTS

	// configure reporting of Temperature Measurement cluster Measured Value
	vars.CNFG_TEMP_RPT = 0
	Scheduler.scheduleRepeating CNFG_TEMP_RPT, CNFG_RETRY_DELAY_MSEC, MAX_CNFG_ATTEMPTS

	// write Poll Control cluster Checkin Interval
	vars.CNFG_POLL_CTRL = 0
	Scheduler.scheduleRepeating CNFG_POLL_CTRL, CNFG_RETRY_DELAY_MSEC, MAX_CNFG_ATTEMPTS

	// read current Poll Control attributes (if needed)
	pollCluster.zclReadAttributes(
		pollCluster.ATTR_CHECKIN_INTERVAL,
		pollCluster.ATTR_LONG_POLL_INTERVAL,
		pollCluster.ATTR_SHORT_POLL_INTERVAL )

	// reset long poll interval to 20 quarter seconds, and short poll interval to 4 quarter seconds
	pollCluster.setLongPollInterval((int)20)
	pollCluster.setShortPollInterval((short)4)

	// make sure battery defaults are set (if driver upgraded)
	vars.'battMinThreshold' = 2.4
	vars.'battNominalVolts' = 3.0
}


onDisconnected {
	log.debug "{} device disconnected.", DEVICE_NAME
}


onRemoved {
	log.debug "{} Sensor device removed.", DEVICE_NAME
}

onEvent('doWriteIasCie') {
	if ((0 <= vars.'writeIasCieCnt') && (MAX_IAS_CIE_WRITES >  vars.'writeIasCieCnt')) {
		vars.'writeIasCieCnt'++
		log.debug "Write IAS CIE Address attempt:{}", vars.'writeIasCieCnt'
		zoneCluster.zclWriteAttributes( [(zoneCluster.ATTR_IAS_CIE_ADDRESS): Zigbee.Data.encodeIeee(Zigbee.Hub.eui64)] )
		// schedule to write again in case this write fails
		Scheduler.scheduleIn 'doWriteIasCie', (WRITE_IAS_CIE_DELAY * vars.'writeIasCieCnt')
	}
}

onEvent('doZoneEnroll') {
	if ((0 <= vars.'zoneEnrollCnt') && (MAX_ZONE_ENROLLS > vars.'zoneEnrollCnt')) {
		vars.'zoneEnrollCnt'++
		log.debug "Zone Enrollment attempt:{}", vars.'zoneEnrollCnt'
		zoneCluster.zoneEnrollResponse((byte)0x00, (byte)0xFF)
		// schedule to send again in case this enrollment fails
		Scheduler.scheduleIn 'doZoneEnroll', (ZONE_ENROLL_DELAY * vars.'zoneEnrollCnt')
	}
}

onEvent('powerClusterRead') {
	log.debug "{} - powerClusterRead - current value:{}", DEVICE_NAME, DevicePower.battery.get()
	if(null == DevicePower.battery.get()) {
		// read current Power attributes
		pwrCluster.zclReadAttributes(
			pwrCluster.ATTR_BATTERY_VOLTAGE,
			pwrCluster.ATTR_BATTERY_VOLTAGE_MIN_THRESHOLD,
			pwrCluster.ATTR_BATTERY_QUANTITY )
	}else {
		Scheduler.cancel 'powerClusterRead'
	}
}

onEvent(CNFG_PWR_RPT) {
	if (0 <= vars.CNFG_PWR_RPT ) {
		log.debug "{} - {}:{}", DEVICE_NAME, CNFG_PWR_RPT, vars.CNFG_PWR_RPT
		// configure reporting of Power Config cluster Battery Voltage attribute
		byte[] rptPwrCnfgBytes = [
			// Dir (0x00)
			0x00,
			// Attr Id (0x0020) Battery Voltage
			0x20, 0x00,
			// Attr Data Type (0x20) Unsigned 8-Bit Int
			0x20,
			// Min Interval (0x0E10) 3600 secs (at most once per hour)
			0x10, 0x0E,
			// Max Interval (0xA8C0) 43200 seconds (at least once every 12 hours)
			0xC0, 0xA8,
			// Reportable Change (0x02) 0.2 volts (ignore jitter of +/- 0.1 volt)
			0x02 ]
		Zigbee.send(
			"cluster" : CLUSTER_PWR_CNFG,
			"command" : CMD_CNFG_RPT,
			"profile" : PROFILE_HA,
			"endpoint" : END_POINT,
			"clusterspecific" : false,
			"defaultresponse" : true,
			"data" : rptPwrCnfgBytes )
	} else {
		Scheduler.cancel CNFG_PWR_RPT
	}
}

onEvent(CNFG_TEMP_RPT) {
	if (0 <= vars.CNFG_TEMP_RPT) {
		log.debug "{} - {}:{}", DEVICE_NAME, CNFG_TEMP_RPT, vars.CNFG_TEMP_RPT
		// configure reporting of Temperature Measurement cluster Measured Value
		// NOTE: device appears to only measure temperature once every 60 seconds, so reporting any more frequently is a waste
		byte[] rptTempCnfgBytes = [
			// Dir (0x00)
			0x00,
			// Attr Id (0x0000) Measured Value
			0x00, 0x00,
			// Attr Data Type (0x29) Signed 16-Bit Int
			0x29,
			// Min Interval (0x012C) 300 seconds (at most once every 5 minutes)
			0x2C, 0x01,
			// Max Interval (0x0708) 1800 seconds (at least once every 30 minutes)
			0x08, 0x07,
			// Reportable Change (0x000A) 10/100ths C
			0x0A, 0x00 ]
		Zigbee.send(
			"cluster" : CLUSTER_TEMPERATURE,
			"command" : CMD_CNFG_RPT,
			"profile" : PROFILE_HA,
			"endpoint" : END_POINT,
			"clusterspecific" : false,		// using general Configure Report command
			"defaultresponse" : true,
			"data" : rptTempCnfgBytes )
	}else {
		Scheduler.cancel CNFG_TEMP_RPT
	}
}

onEvent(CNFG_POLL_CTRL) {
	if (0 <= vars.CNFG_POLL_CTRL) {
		log.debug "{} - {}:{}", DEVICE_NAME, CNFG_POLL_CTRL, vars.CNFG_POLL_CTRL

		// write Poll Control cluster Checkin Interval
		byte[] wrtChkIntvlBytes = [
			// Attr Id (0x0000) Checkin Interval
			0x00, 0x00,
			// Attr Data Type (0x23) Unsigned 32- bit integer
			0x23,
			// Attr Data (0x000001E0) 480 quarter-seconds
			0xE0, 0x01, 0x00, 0x00 ]
		Zigbee.send(
			"cluster" : CLUSTER_POLL_CONTROL,
			"command" : CMD_WRT_ATTR,
			"profile" : PROFILE_HA,
			"endpoint" : END_POINT,
			"clusterspecific" : false,		// using general Write Attribute command
			"defaultresponse" : true,
			"data" : wrtChkIntvlBytes)
	}else {
		Scheduler.cancel CNFG_POLL_CTRL
	}
}

onEvent(CNFG_DIAG_RPT) {
	if (0 <= vars.CNFG_DIAG_RPT) {
		log.debug "{} - {}:{}", DEVICE_NAME, CNFG_DIAG_RPT, vars.CNFG_DIAG_RPT
		// configure reporting of Diagnostics cluster Last Message LQI attribute
		byte[] rptDiagCnfgBytes = [
			// Dir (0x00)
			0x00,
			// Attr Id (0x011C) Last Message LQI
			0x1C, 0x01,
			// Attr Data Type (0x20) Unsigned 8-Bit Int
			0x20,
			// Min Interval (0x0E10) 3600 secs (at most once per hour)
			0x10, 0x0E,
			// Max Interval (0xA8C0) 43200 seconds (at least once every 12 hours)
			0xC0, 0xA8,
			// Reportable Change (0x0C) approximately 5% of 255
			0x0C ]
		Zigbee.send(
			"cluster" : CLUSTER_DIAGNOSTICS,
			"command" : CMD_CNFG_RPT,
			"profile" : PROFILE_HA,
			"endpoint" : END_POINT,
			"clusterspecific" : false,
			"defaultresponse" : true,
			"data" : rptDiagCnfgBytes )
	}else {
		Scheduler.cancel CNFG_DIAG_RPT
	}
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the Power Configuration Cluster
////////////////////////////////////////////////////////////////////////////////

void handlePowerMsg(Object cluster, Object msg) {
	def attributes = Zigbee.Message.decodeZclAttributes(msg)
	def battVolt = attributes[cluster.ATTR_BATTERY_VOLTAGE]
	def battMinThreshold = attributes[cluster.ATTR_BATTERY_VOLTAGE_MIN_THRESHOLD]
	def battNumber = attributes[cluster.ATTR_BATTERY_QUANTITY]
	if(battMinThreshold != null) {
		vars.'battMinThreshold' = battMinThreshold / 10.0
	} else {
		battMinThreshold = vars.'battMinThreshold'
	}
	if(battNumber != null) {
		vars.'battNominalVolts' = battNumber * 1.5
	}
	double minVolts = vars.'battMinThreshold' ?: 2.4
	double nomVolts = vars.'battNominalVolts' ?: 3.0
	log.trace "{} BatteryVoltage:{}, Min Thrshld:{}, # of Batteries:{}, nomVolts:{}", DEVICE_NAME, battVolt, minVolts, battNumber, nomVolts

	if ((null != battVolt) && ('INVALID' != battVolt.toString())) {
		// battery Voltage is reported in tenths of Volts
		double volts = (battVolt / 10.0)
		log.trace "Battery Volts:{}", volts
		// battery percentage = (100 / nominal - minimum) * ( actual - minumum )
		if (0 < (nomVolts - minVolts)) {	// prevent division by zero
			double battPercent = ( (100.0 / (nomVolts - minVolts)) * (volts - minVolts) )
			battPercent =  (100.0 < battPercent) ? 100.0 : battPercent		// limit maximum to 100%
			battPercent =  (0.0 > battPercent) ? 0.0 : battPercent			// limit minimum to 0%
			int intBattPercent = battPercent
			log.debug "Battery Percent:{}", intBattPercent
			DevicePower.battery intBattPercent
		}
	}
}

// called when device asynchronously sends a Power Report Attributes
onZigbeeMessage.Zcl.power.zclreadattributesresponse() {
	log.trace "{} driver received Power Attributes Response:{}", DEVICE_NAME, message
	handlePowerMsg(pwrCluster, message)
}

// called when device asynchronously sends a Power Report Attributes
onZigbeeMessage.Zcl.power.zclreportattributes() {
	log.trace "{} driver received Power Attributes Report:{}", DEVICE_NAME, message
	handlePowerMsg(pwrCluster, message)
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the Poll Control Cluster
////////////////////////////////////////////////////////////////////////////////

void handlePollCrtlMsg(Object cluster, Object msg) {
	def attributes = Zigbee.Message.decodeZclAttributes(msg)
	def checkin = attributes[cluster.ATTR_CHECKIN_INTERVAL]
	def longPoll = attributes[cluster.ATTR_LONG_POLL_INTERVAL]
	def shortPoll = attributes[cluster.ATTR_SHORT_POLL_INTERVAL]
	log.trace "{} CheckinInterval:{}, LongPoll:{}, ShortPoll:{}", DEVICE_NAME, checkin, longPoll, shortPoll
}

// called when device responds to a Poll Control Read Attributes
onZigbeeMessage.Zcl.pollcontrol.zclreadattributesresponse() {
	log.trace "{} driver received Poll Control Attributes Response:{}", DEVICE_NAME, message
	handlePollCrtlMsg(pollCluster, message)
}

// called when device asynchronously sends a Poll Control Report Attributes
onZigbeeMessage.Zcl.pollcontrol.zclreportattributes() {
	log.trace "{} driver received Poll Control Attributes Report:{}", DEVICE_NAME, message
	handlePollCrtlMsg(pollCluster, message)
}

// called when device asynchronously sends a Poll Control Checkin
onZigbeeMessage.Zcl.pollcontrol.CheckIn() {
	log.trace "{} driver received Poll Control Checkin:{}", DEVICE_NAME, message
	// tell device to resume without short polling
	pollCluster.checkInResponse( (byte)0x00, (short)0x0000 )
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the Temperature Measurement Cluster
////////////////////////////////////////////////////////////////////////////////

void handleTemperatureMeasurement(Object cluster, Object msg) {
	def attributes = Zigbee.Message.decodeZclAttributes(msg)
	def tempVal = attributes[cluster.ATTR_MEASURED_VALUE]

   if ((null != tempVal) && ('INVALID' != tempVal.toString())) {
		// temperature is reported in 100ths degree C, so convert to C and save
		double tempC = tempVal
		tempC /= 100
		log.trace "{} Set Temp:{}", DEVICE_NAME, tempC
		Temperature.temperature tempC
	}
}


// called when device responds to a Temperature Measurement Read Attributes
onZigbeeMessage.Zcl.temperaturemeasurement.zclreadattributesresponse() {
	log.trace "{} driver received Temperature Measurement Attributes Response:{}", DEVICE_NAME, message
	handleTemperatureMeasurement(tempCluster, message)
}


// called when device asynchronously sends a Temperature Measurement Report Attributes
onZigbeeMessage.Zcl.temperaturemeasurement.zclreportattributes() {
	log.trace "{} driver received Temperature Measurement Attributes Report:{}", DEVICE_NAME, message
	handleTemperatureMeasurement(tempCluster, message)
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the IAS Zone Cluster
////////////////////////////////////////////////////////////////////////////////

// shared code for processing the zone status attribute
void processZoneStatus(Object cluster, int zoneStatus) {

	if ( zoneStatus & cluster.ZONE_STATUS_TAMPER ) {
		log.trace "{} Tampered", DEVICE_NAME
	} else {
		log.trace "{} Not Tampered", DEVICE_NAME
	}

	if ( zoneStatus & cluster.ZONE_STATUS_BATTERY ) {
		log.debug "{} Low Battery", DEVICE_NAME
	} else {
		log.trace "{} Battery OK", DEVICE_NAME
	}
}

// shared code for handling a Zone ReadAttributesResponse, or asynchronous ReportAttributes
void handleZoneMsg(Object cluster, Object msg) {
	def attributes = Zigbee.Message.decodeZclAttributes(msg)
	def zoneState = attributes[cluster.ATTR_ZONE_STATE]
	def zoneType = attributes[cluster.ATTR_ZONE_TYPE]
	def zoneStatus = attributes[cluster.ATTR_ZONE_STATUS]
	def iasCieAddr = attributes[cluster.ATTR_IAS_CIE_ADDRESS]
	log.trace "{} ZoneState:{}, ZoneType:{}, ZoneStatus:{}, IAS CIE Addr:{}", DEVICE_NAME, zoneState, zoneType, zoneStatus, iasCieAddr
	processZoneStatus cluster, zoneStatus
	verifyCIEAddr cluster, iasCieAddr
}

// sends a ZoneEnrollResponse, either asychronously or in response to a ZoneEnrollRequest
void sendZoneEnrollment(Object cluster) {
	byte enrollResponseCode = 0x00	// success
	byte zoneId = 0xFF
	cluster.zoneEnrollResponse( enrollResponseCode, zoneId )
}

void verifyCIEAddr(Object cluster, addr) {
	log.debug "Reported IAS CIE Address is:{}", addr
	def hubAddr = Zigbee.Data.encodeIeee(Zigbee.Hub.eui64).dataValue
	log.debug "Hub IEEE Address is:{}", hubAddr

	if ((null == addr) || ('INVALID' == addr.toString()) || (8 != addr.size())) {
		log.warn "IAS CIE Address not set."
	} else {
		if (addr != hubAddr) {
			log.error "IAS CIE Address not set to hub address."
		} else {
			log.debug "IAS CIE Address is set to hub address."
		}
	}
}

// called when device responds to a IAS Zone Read Attributes
onZigbeeMessage.Zcl.iaszone.zclreadattributesresponse() {
	log.debug "{} driver received IAS Zone Attributes Response:{}", DEVICE_NAME, message
	handleZoneMsg(zoneCluster, message)
	// any time we get a response to reading the IAS Zone attributes, also asynchronously send a ZoneEnrollResponse
	sendZoneEnrollment zoneCluster
}

// called in response to IAS Zone Write Attributes
onZigbeeMessage.Zcl.iaszone.zclwriteattributesresponse() {
	log.debug "{} Driver received IAS Zone write attributes response:{}", DEVICE_NAME, message

	def zclMsg = Zigbee.Message.toZcl(message)
	byte[] data = zclMsg.getPayload()
	if ((null != data) && (1 <= data.size())) {
		if (0x00 == data[0]) {
			log.debug "IAS Zone Write Attributes Success"
			vars.'writeIasCieCnt' = -1		// set to -1 once successfully written
			// now try sending ZoneEnrollment
			Scheduler.defer 'doZoneEnroll'
		} else if (0x70 == data[0]) {			// REQUEST_DENIED
			log.warn "IAS Zone Write Attributes REQUEST DENIED"
			// read the address to make sure it is correct
			zoneCluster.zclReadAttributes(
				zoneCluster.ATTR_ZONE_STATE,
				zoneCluster.ATTR_ZONE_TYPE,
				zoneCluster.ATTR_ZONE_STATUS,
				zoneCluster.ATTR_IAS_CIE_ADDRESS )

			vars.'writeIasCieCnt' = -1		// set to -1 because won't succeed until device is factory reset
		} else {
			log.warn "IAS Zone Write Attributes FAILED!!!"
		}
	}
}

// called when device asynchronously sends a IAS Zone Report Attributes
onZigbeeMessage.Zcl.iaszone.zclreportattributes() {
	log.debug "{} driver received IAS Zone Attributes Report:{}", DEVICE_NAME, message
	handleZoneMsg(zoneCluster, message)
}

// called when the device wants to enroll a zone
onZigbeeMessage.Zcl.iaszone.ZoneEnrollRequest() {
	log.debug "{} driver received IasZone ZoneEnrollRequest:{}", DEVICE_NAME, message

	// see https://eyeris.atlassian.net/wiki/display/I2D/IasZone
	def rqst = Zigbee.Message.decodeZcl(message)
	int zoneType = rqst.getZoneType()
	int mfgCode = rqst.getManufacturerCode()
	log.debug "ZoneType:{}, MfgCode:{}", zoneType, mfgCode
	// send a ZoneEnrollResponse
	sendZoneEnrollment zoneCluster
}


// called when zone status changes
onZigbeeMessage.Zcl.iaszone.ZoneStatusChangeNotification() {
	log.debug "{} driver received IasZone ZoneStatusChangeNotification:{}", DEVICE_NAME, message

	// we received a Zone Status Change, so mark Zone Enrollment as done
	vars.'zoneEnrollCnt' = -1

	// see https://eyeris.atlassian.net/wiki/display/I2D/IasZone
	def notification = Zigbee.Message.decodeZcl(message)
	int zoneStatus = notification.getZoneStatus()
	int extStatus = notification.getExtendedStatus()
	log.debug "{} ZoneStatus:{}, ExtStatus:{}", DEVICE_NAME, zoneStatus, extStatus
	processZoneStatus zoneCluster, zoneStatus
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the Diagnostics Cluster
////////////////////////////////////////////////////////////////////////////////

boolean handleDiagnosticMsg(Object cluster, Object msg) {
	def attributes = Zigbee.Message.decodeZclAttributes(msg)
	def rssi = attributes[cluster.ATTR_LAST_MESSAGE_RSSI]
	def lqi = attributes[cluster.ATTR_LAST_MESSAGE_LQI]
	boolean processed = false
	log.trace "RSSI:{}, LQI:{}", rssi, lqi

	if (lqi != null) {
		if ('INVALID' == lqi.toString()) lqi = 255	// helper parses 255 value as 'INVALID', but it just means 100%
		if (0 > lqi) lqi = 256 + lqi	// convert signed value to unsigned
		int sigPct = Math.round( (lqi * 100.0) / 255.0)
		log.trace "LQI:{}, (percent:{})", lqi, sigPct
		DeviceConnection.signal sigPct
		processed = true
	}
	return processed
}

// called when device responds to a Diagnostics Read Attributes
onZigbeeMessage.Zcl.diagnostics.zclreadattributesresponse() {
	log.trace "{} driver received Diagnostics Attributes Response:{}", DEVICE_NAME, message
	if (!handleDiagnosticMsg(diagCluster, message)) return false
}

// called when device asynchronously sends a Diagnostics Report Attributes
onZigbeeMessage.Zcl.diagnostics.zclreportattributes() {
	log.trace "{} driver received Diagnostics Attributes Report:{}", DEVICE_NAME, message
	if (!handleDiagnosticMsg(diagCluster, message)) return false
}


////////////////////////////////////////////////////////////////////////////////
// DeviceOta Capability
////////////////////////////////////////////////////////////////////////////////

onEvent('DeviceOtaDeferredRead') {
   GenericZigbeeDeviceOta.doProcessDeviceOtaDeferredRead(this,DEVICE_NAME,dvcEndPoint)
}

onEvent('DeviceOtaCheckFragmentRequestTimeout') {
   GenericZigbeeDeviceOta.doProcessDeviceOtaCheckFragmentRequestTimeout(this,DEVICE_NAME)
}

onZigbeeMessage.Zcl.ota.zclreadattributesresponse() {
   GenericZigbeeDeviceOta.doHandleOtaReadAttributesResponse(this,DEVICE_NAME,otaCluster,message)
}

onZigbeeMessage.Zcl.ota.querynextimagerequest() {
   GenericZigbeeDeviceOta.doHandleQueryNextImageRequest(this,DEVICE_NAME,message)
}

onZigbeeMessage.Zcl.ota.imageblockrequest() {
   GenericZigbeeDeviceOta.doHandleImageBlockRequest(this,DEVICE_NAME,message)
}

onZigbeeMessage.Zcl.ota.imagePageRequest() {
   GenericZigbeeDeviceOta.doHandleImagePageRequest(this,DEVICE_NAME,message)
}

onZigbeeMessage.Zcl.ota.upgradeendrequest() {
   GenericZigbeeDeviceOta.doHandleUpgradeEndRequest(this,DEVICE_NAME,message)
}


////////////////////////////////////////////////////////////////////////////////
// Default protocol message handlers
////////////////////////////////////////////////////////////////////////////////

// default handler for ZCL messages, called if no other handlers handled the ZCL message
onZigbeeMessage(Zigbee.TYPE_ZCL) {
	log.trace "{} driver received zigbee ZCL message:{}", DEVICE_NAME, message
	def zclMsg = Zigbee.Message.toZcl(message)
	// get Information about the message
	def profile = zclMsg.getProfileId()
	def clusterId = zclMsg.getClusterId()
	def msgId = zclMsg.getZclMessageId()
	def endpoint = zclMsg.getEndpoint()
	def flags = zclMsg.getFlags()
	// get the message data
	byte[] data = zclMsg.getPayload()

	if(PROFILE_HA == profile) {
		if((CLUSTER_IAS_ZONE == clusterId) && (0x04 == msgId)) {
			// check that IAS Zone Write Attributes response is success (no helper for this)
			log.debug "IAS Zone Write Attributes Response:" + data
			if ((null != data) && (1 <= data.size()) && (0x00 != data[0])) {
				log.warn "{} - IAS Zone Write Attributes FAILED!!!", DEVICE_NAME
			}
			return
		}
		if((CLUSTER_DIAGNOSTICS == clusterId) && (3 < data.length)) {
			//if Diagnostic cluster reported LQI and not previously handled (exception parsing attribute) manually parse the value here
			if ((0x1C == data[0]) && (0x01 == data[1]) && (0x20 == data[2])) {		// LQI Attribute (0x011C) as unsigned 8-bit value (0x20)
				int lqi = data[3]				// 0-255
				if (0 > lqi) lqi = 256 + lqi	// convert signed value to unsigned
				double signal = (lqi * 100.0) / 255.0
				int sigLvl = Math.round(signal)
				log.trace "LQI:{}, (percent:{})", lqi, sigLvl
				DeviceConnection.signal sigLvl
			}
			return
		}
		if((CLUSTER_PWR_CNFG == clusterId) && (CMD_CNFG_RPT_RSP == msgId)) {
			//Config Reporting Response for Power Config cluster
			if ((0 < data.length) && (0 == data[0])) {
				log.debug "{} - Power reporting config was successful", DEVICE_NAME
				// set flag to disable future attempts to configure reporting
				vars.CNFG_PWR_RPT = -1
			} else {
				log.warn "{} - Power reporting config FAILED: ${data}", DEVICE_NAME
			}
			return
		}
		if((CLUSTER_TEMPERATURE == clusterId) && (CMD_CNFG_RPT_RSP == msgId)) {
			if ((0 < data.length) && (0 == data[0])) {
				log.debug "{} - Temperature reporting config was successful", DEVICE_NAME
				// set flag to disable future attempts to configure reporting
				vars.CNFG_TEMP_RPT = -1
			} else {
				log.warn "{} - Temperature reporting config FAILED: ${data}", DEVICE_NAME
			}
			return
		}
		if((CLUSTER_POLL_CONTROL == clusterId) && (CMD_WRT_ATTR_RSP == msgId)) {
			//Write attribute Response for Poll Control cluster
			if ((0 < data.length) && (0 == data[0])) {
				log.debug "{} - Poll Control config was successful", DEVICE_NAME
				// set flag to disable future attempts to configure reporting
				vars.CNFG_POLL_CTRL = -1
			} else {
				log.warn "{} - Poll Control config FAILED: ${data}", DEVICE_NAME
			}
			return
		}
		if((CLUSTER_DIAGNOSTICS == clusterId) && (CMD_CNFG_RPT_RSP == msgId)) {
			//Config Reporting Response for Diagnostics cluster
			if ((0 < data.length) && (0 == data[0])) {
				log.debug "{} - Diagnostics reporting config was successful", DEVICE_NAME
				// set flag to disable future attempts to configure reporting
				vars.CNFG_DIAG_RPT = -1
			} else {
				log.warn "{} - Diagnostics reporting config FAILED: ${data}", DEVICE_NAME
			}
			return
		}
	}
	log.debug "Driver received unhandled zigbee ZCL message Profile:{}, ClusterId:{}, MsgId:{}, EndPoint:{}, Flags:{}, Data:{}", profile, clusterId, msgId, endpoint, flags, data
}



