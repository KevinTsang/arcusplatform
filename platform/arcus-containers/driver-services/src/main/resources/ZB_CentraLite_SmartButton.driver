/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * ZigBee Driver for the CentraLite Smart Button
 *
 * FACTORY RESET
 *  - Hold down the button while inserting the battery and release after red LED lights up for a moment.
 *    LED should flash blue when attempting to pair.
 * 
 * IDENTIFY
 *  - Performing an Identify operation turns the LED on and cycles the color through Red, Green, Blue, for 3 minutes (see IDENT_PERIOD_SECS).
 * 
 * OFFLINE TIMEOUT:			10 minutes (see OFFLINE_TIMEOUT_SECS)
 * 
 * CHECK-IN INTERVAL:		Every 2 minutes
 * 
 * BATTERY LEVEL REPORTING:
 *  - At least every 12 hours
 *  - At most every hour, if level changes by 0.2 Volts or more (ignore 0.1 volt jitter)
 * 
 * TEMPERATURE REPORTING:
 *  - At least every 30 minutes
 *  - At most every 5 minutes, if level changes by 0.1 C or more
 * 
 * DIAGNOSTICS REPORTING:
 *  - LQI read each time device connects
 *  - LQI not reported async, per wiki page specs; https://eyeris.atlassian.net/wiki/display/I2D/Device+Reporting+Settings
 * 
 * ISSUES/NOTES
 * 
 * 10/16/15 - Removed Reporting of LQI per Wiki page updates.
 * 
 * 11/10/15 - Updated driver to retry setting Reporting configurations upto 10 times, with progressive delay of 10 seconds times the attempt count,
 *            until the configuration is successful (a Config Reporting Response with status of SUCCESS (0) is received).
 * 
 */
import groovy.transform.Field

driver			"ZBCentraLiteSmartButton"
description		"Driver for the CentraLite Smart Button"
version			"1.0"
protocol		"ZIGB"
deviceTypeHint	"Button"
productId		"bbf1cf"
vendor 			"Iris"
model 			"SmartButton"


matcher			'ZIGB:manufacturer': 0x104E, 'ZIGB:vendor': 'CentraLite', 'ZIGB:model': '3460'
matcher			'ZIGB:manufacturer': 0x104E, 'ZIGB:vendor': 'CentraLite', 'ZIGB:model': '3460-L'

capabilities	'DevicePower', 'Button', 'Temperature', 'Identify', 'DeviceOta'

importCapability 'zigbee/GenericZigbeeDeviceOta'

DevicePower.source               DevicePower.SOURCE_BATTERY
DevicePower.linecapable          false
DevicePower.backupbatterycapable false


// Manufacturer ID:       0x104E
// Manufacturer:          CentraLite
// Model:                 3450
// Power Source:          0x03
//
// 1 End Point
//
// End Point 1
// Profile ID:  0x0104  ZigBee HA
// IN Clusters
//   0x0000     Basic
//   0x0001     Power Configuration
//   0x0003     Identify
//   0x0007     On/Off Switch Config
//   0x0020     Poll Control
//   0x0402     Temperature Measurement
//   0x0B05     Diagnostics
// OUT Clusters
//   0x0003     Identify
//   0x0006     On/Off
//   0x0019     OTA Upgrade
//


def pwrCluster   = Zigbee.endpoint((byte)1).Power
def pollCluster  = Zigbee.endpoint((byte)1).PollControl
def identCluster = Zigbee.endpoint((byte)1).Identify
def onOffCluster = Zigbee.endpoint((byte)1).OnOff
def tempCluster  = Zigbee.endpoint((byte)1).TemperatureMeasurement
def diagCluster  = Zigbee.endpoint((byte)1).Diagnostics
def otaCluster   = Zigbee.endpoint((byte)1).Ota

@Field def dvcEndPoint = Zigbee.endpoint((byte)1)

// constants used if setting battery reporting interval, and processing ZCL On/Off Out CLuster
@Field static final String DEVICE_NAME = 'CentraLite Smart Button'
@Field def final short PROFILE_HA           = 0x0104

@Field def final short CLUSTER_PWR_CNFG     = 0x0001
@Field def final short CLUSTER_ON_OFF       = 0x0006
@Field def final short CLUSTER_POLL_CONTROL = 0x0020
@Field def final short CLUSTER_TEMPERATURE  = 0x0402
@Field def final short CLUSTER_DIAGNOSTICS  = 0x0B05

@Field def final CMD_WRT_ATTR               = 0x02      // General Command Frame - Write Attributes
@Field def final CMD_WRT_ATTR_RSP           = 0x04      // General Command Frame - Write Attributes Response
@Field def final CMD_CNFG_RPT               = 0x06      // General Command Frame - Configure Reporting
@Field def final CMD_CNFG_RPT_RSP           = 0x07      // General Command Frame - Configure Reporting Response

// operational constants
def final OFFLINE_TIMEOUT_SECS              = 600       // 10 minutes
def final short IDENT_PERIOD_SECS           = 180       // number of seconds (0-600) for device to Identify itself (Flash LED) when Identify method is called

@Field def final long CNFG_RETRY_DELAY_MSEC = 10000     // delay 10 x Attempt-Cnt seconds between retries to configure reporting
@Field def final int MAX_CNFG_ATTEMPTS      = 10        // maximumn number of attempts to make trying to configure reporting
@Field def final String CNFG_PWR_RPT        = 'CnfgPwrRpt'
@Field def final String CNFG_TEMP_RPT       = 'CnfgTempRpt'
@Field def final String CNFG_POLL_CTRL      = 'CnfgPollCrtl'
@Field def final String CNFG_DIAG_RPT       = 'CnfgDiagRpt'


////////////////////////////////////////////////////////////////////////////////
// Driver lifecycle callbacks
////////////////////////////////////////////////////////////////////////////////

onAdded {
	log.debug "CentraLite Smart Button device added."

	// set default attribute values
	DevicePower.source               DevicePower.SOURCE_BATTERY
	DevicePower.linecapable          false
	DevicePower.backupbatterycapable false
	DevicePower.sourcechanged        ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())

	Button.state                     Button.STATE_RELEASED
	Button.statechanged              ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())

	// Bind all of the command clusters on the enpoints we need
	//Zigbee.bindAll()
	Zigbee.bindEndpoints(
		pwrCluster.bindServerCluster(),
		onOffCluster.bindClientCluster(),		// Note that this is an Out (Client) cluster, not In (Server) cluster
		pollCluster.bindServerCluster(),
		tempCluster.bindServerCluster(),
		diagCluster.bindServerCluster() )
}


onConnected {
	log.debug "CentraLite Smart Button device connected."

	// set long poll interval to 24 quarter seconds, and short poll interval to 2 quarter seconds
	// Note: min Long Poll interval seems to be 24, device responds to 20 with 'Invalid Value'
	pollCluster.setLongPollInterval((int)24)
	pollCluster.setShortPollInterval((short)2)

	// read current Power attributes
	pwrCluster.zclReadAttributes(
		pwrCluster.ATTR_BATTERY_VOLTAGE,
		pwrCluster.ATTR_BATTERY_VOLTAGE_MIN_THRESHOLD )

	// read current Temperature attributes
	tempCluster.zclReadAttributes(
		tempCluster.ATTR_MEASURED_VALUE )

	// read Diagnostic attributes
	diagCluster.zclReadAttributes(
		diagCluster.ATTR_LAST_MESSAGE_LQI,
		diagCluster.ATTR_LAST_MESSAGE_RSSI )

	// read current Poll Control attributes (if needed)
//	pollCluster.zclReadAttributes(
//		pollCluster.ATTR_CHECKIN_INTERVAL,
//		pollCluster.ATTR_LONG_POLL_INTERVAL,
//		pollCluster.ATTR_SHORT_POLL_INTERVAL )

	// configure reporting of PowerConfig cluster BatteryVoltage
	vars.CNFG_PWR_RPT = 0
	Scheduler.defer CNFG_PWR_RPT

	// configure reporting of Temperature Measurement cluster Measured Value
	vars.CNFG_TEMP_RPT = 0
	Scheduler.defer CNFG_TEMP_RPT

	// write Poll Control cluster Checkin Interval
	vars.CNFG_POLL_CTRL = 0
	Scheduler.defer CNFG_POLL_CTRL
	
	// configure reporting of Diagnostics cluster Last Message LQI attribute
	// 10/16/15 - Removed Reporting of LQI per Wiki page updates
//	vars.CNFG_DIAG_RPT = 0
//	Scheduler.defer CNFG_DIAG_RPT

	// reset long poll interval to 24 quarter seconds, and short poll interval to 4 quarter seconds
	pollCluster.setLongPollInterval((int)24)
	pollCluster.setShortPollInterval((short)4)

	// set recommended offline timeout interval
	Zigbee.setOfflineTimeout( OFFLINE_TIMEOUT_SECS )
}


onDisconnected {
	log.debug "CentraLite Smart Button device disconnected."
}


onRemoved {
	log.debug "CentraLite Smart Button device removed."
}


////////////////////////////////////////////////////////////////////////////////
// Scheduled Event Handlers
////////////////////////////////////////////////////////////////////////////////

onEvent(CNFG_PWR_RPT) {
	if ((0 <= vars.CNFG_PWR_RPT) && (MAX_CNFG_ATTEMPTS > vars.CNFG_PWR_RPT)) {
		log.debug "{}:{}", CNFG_PWR_RPT, vars.CNFG_PWR_RPT
		// configure reporting of Power Config cluster Battery Voltage attribute
		byte[] rptPwrCnfgBytes = [
			// Dir (0x00)
			0x00,
			// Attr Id (0x0020) Battery Voltage
			0x20, 0x00,
			// Attr Data Type (0x20) Unsigned 8-Bit Int
			0x20,
			// Min Interval (0x0E10) 3600 secs (at most once per hour)
			0x10, 0x0E,
			// Max Interval (0xA8C0) 43200 seconds (at least once every 12 hours)
			0xC0, 0xA8,
			// Reportable Change (0x02) 0.2 volts (ignore jitter of +/- 0.1 volt)
			0x02 ]
		Zigbee.send(
			"cluster" : CLUSTER_PWR_CNFG,
			"command" : CMD_CNFG_RPT,
			"profile" : PROFILE_HA,
			"endpoint" : 1,
			"clusterspecific" : false,
			"defaultresponse" : true,
			"data" : rptPwrCnfgBytes )
		// schedule a followup write, in case it is needed, '10 * Attempt Count' seconds from now
		vars.CNFG_PWR_RPT++
		Scheduler.scheduleIn CNFG_PWR_RPT, (CNFG_RETRY_DELAY_MSEC * vars.CNFG_PWR_RPT)
	}
}

onEvent(CNFG_TEMP_RPT) {
	if ((0 <= vars.CNFG_TEMP_RPT) && (MAX_CNFG_ATTEMPTS > vars.CNFG_TEMP_RPT)) {
		log.debug "{}:{}", CNFG_TEMP_RPT, vars.CNFG_TEMP_RPT
		// configure reporting of Temperature Measurement cluster Measured Value
		// NOTE: device appears to only measure temperature once every 60 seconds, so reporting any more frequently is a waste
		byte[] rptTempCnfgBytes = [
			// Dir (0x00)
			0x00,
			// Attr Id (0x0000) Measured Value
			0x00, 0x00,
			// Attr Data Type (0x29) Signed 16-Bit Int
			0x29,
			// Min Interval (0x012C) 300 seconds (at most once every 5 minutes)
			0x2C, 0x01,
			// Max Interval (0x0708) 1800 seconds (at least once every 30 minutes)
			0x08, 0x07,
			// Reportable Change (0x000A) 10/100ths C
			0x0A, 0x00 ]
		Zigbee.send(
			"cluster" : CLUSTER_TEMPERATURE,
			"command" : CMD_CNFG_RPT,
			"profile" : PROFILE_HA,
			"endpoint" : 1,
			"clusterspecific" : false,		// using general Configure Report command
			"defaultresponse" : true,
			"data" : rptTempCnfgBytes )
		// schedule a followup write, in case it is needed, '10 * Attempt Count' seconds from now
		vars.CNFG_TEMP_RPT++
		Scheduler.scheduleIn CNFG_TEMP_RPT, (CNFG_RETRY_DELAY_MSEC * vars.CNFG_TEMP_RPT)
	}
}

onEvent(CNFG_POLL_CTRL) {
	if ((0 <= vars.CNFG_POLL_CTRL) && (MAX_CNFG_ATTEMPTS > vars.CNFG_POLL_CTRL)) {
		log.debug "{}:{}", CNFG_POLL_CTRL, vars.CNFG_POLL_CTRL
		// write Poll Control cluster Checkin Interval
		byte[] wrtChkIntvlBytes = [
			// Attr Id (0x0000) Checkin Interval
			0x00, 0x00,
			// Attr Data Type (0x23) Unsigned 32- bit integer
			0x23,
			// Attr Data (0x000001E0) 480 quarter-seconds
			0xE0, 0x01, 0x00, 0x00 ]
		Zigbee.send(
			"cluster" : CLUSTER_POLL_CONTROL,
			"command" : CMD_WRT_ATTR,
			"profile" : PROFILE_HA,
			"endpoint" : 1,
			"clusterspecific" : false,		// using general Write Attribute command
			"defaultresponse" : true,
			"data" : wrtChkIntvlBytes)
		// schedule a followup write, in case it is needed, '10 * Attempt Count' seconds from now
		vars.CNFG_POLL_CTRL++
		Scheduler.scheduleIn CNFG_POLL_CTRL, (CNFG_RETRY_DELAY_MSEC * vars.CNFG_POLL_CTRL)
	}
}

onEvent(CNFG_DIAG_RPT) {
	if ((0 <= vars.CNFG_DIAG_RPT) && (MAX_CNFG_ATTEMPTS > vars.CNFG_DIAG_RPT)) {
		log.debug "{}:{}", CNFG_DIAG_RPT, vars.CNFG_DIAG_RPT
		// configure reporting of Diagnostics cluster Last Message LQI attribute
		byte[] rptDiagCnfgBytes = [
			// Dir (0x00)
			0x00,
			// Attr Id (0x011C) Last Message LQI
			0x1C, 0x01,
			// Attr Data Type (0x20) Unsigned 8-Bit Int
			0x20,
			// Min Interval (0x0E10) 3600 secs (at most once per hour)
			0x10, 0x0E,
			// Max Interval (0xA8C0) 43200 seconds (at least once every 12 hours)
			0xC0, 0xA8,
			// Reportable Change (0x0C) approximately 5% of 255
			0x0C ]
		Zigbee.send(
			"cluster" : CLUSTER_DIAGNOSTICS,
			"command" : CMD_CNFG_RPT,
			"profile" : PROFILE_HA,
			"endpoint" : 1,
			"clusterspecific" : false,
			"defaultresponse" : true,
			"data" : rptDiagCnfgBytes )
		// schedule a followup write, in case it is needed, '10 * Attempt Count' seconds from now
		vars.CNFG_DIAG_RPT++
		Scheduler.scheduleIn CNFG_DIAG_RPT, (CNFG_RETRY_DELAY_MSEC * vars.CNFG_DIAG_RPT)
	}
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the Power Configuration Cluster
////////////////////////////////////////////////////////////////////////////////

void handlePowerMsg(Object cluster, Object msg) {
	def attributes = Zigbee.Message.decodeZclAttributes(msg)
	def battVolt = attributes[cluster.ATTR_BATTERY_VOLTAGE]
	def battMinThreshold = attributes[cluster.ATTR_BATTERY_VOLTAGE_MIN_THRESHOLD]
	log.trace "BatteryVoltage:{}, Min Thrshld:{}", battVolt, battMinThreshold

	double minVolts = (null != battMinThreshold) ? (battMinThreshold / 10.0) : 2.1		// default to 2.1 volts
	double nomVolts = 3.0

	if ((null != battVolt) && ('INVALID' != battVolt.toString()) && (0 != battVolt)) {
		// battery Voltage is reported in tenths of Volts
		double volts = (battVolt / 10.0)
		log.trace "Battery Volts:{}", volts
		// battery percentage = (100 / nominal - minimum) * ( actual - minumum )
		if (0 < (nomVolts - minVolts)) {	// prevent division by zero
			double battPercent = (100.0 / (nomVolts - minVolts) * (volts - minVolts))
			battPercent =  (100.0 < battPercent) ? 100.0 : battPercent		// limit maximum to 100%
			battPercent =  (0.0 > battPercent) ? 0.0 : battPercent			// limit minimum to 0%
			int intBattPercent = battPercent
			log.debug "Battery Percent:{}", intBattPercent
			DevicePower.battery intBattPercent
		}
	}
}

// called when device responds to a Power Read Attributes
onZigbeeMessage.Zcl.power.zclreadattributesresponse() {
	log.trace "Driver received Power Attributes Response:{}", message
	handlePowerMsg(pwrCluster, message)
}

// called when device asynchronously sends a Power Report Attributes
onZigbeeMessage.Zcl.power.zclreportattributes() {
	log.trace "Driver received Power Attributes Report:{}", message
	handlePowerMsg(pwrCluster, message)
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the Poll Control Cluster
////////////////////////////////////////////////////////////////////////////////

void handlePollCrtlMsg(Object cluster, Object msg) {
	def attributes = Zigbee.Message.decodeZclAttributes(msg)
	def checkin = attributes[cluster.ATTR_CHECKIN_INTERVAL]
	def longPoll = attributes[cluster.ATTR_LONG_POLL_INTERVAL]
	def shortPoll = attributes[cluster.ATTR_SHORT_POLL_INTERVAL]
	log.trace "CheckinInterval:{}, LongPoll:{}, ShortPoll:{}", checkin, longPoll, shortPoll
}

// called when device responds to a Poll Control Read Attributes
onZigbeeMessage.Zcl.pollcontrol.zclreadattributesresponse() {
	log.trace "Driver received Poll Control Attributes Response:{}", message
	handlePollCrtlMsg(pollCluster, message)
}

// called when device asynchronously sends a Poll Control Report Attributes
onZigbeeMessage.Zcl.pollcontrol.zclreportattributes() {
	log.trace "Driver received Poll Control Attributes Report:{}", message
	handlePollCrtlMsg(pollCluster, message)
}

// called when device asynchronously sends a Poll Control Checkin
onZigbeeMessage.Zcl.pollcontrol.checkin() {
	log.trace "Driver received Poll Control Checkin:{}", message
	// tell device to resume without short polling
	pollCluster.checkInResponse( (byte)0x00, (short)0x0000 )
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the Temperature Measurement Cluster
////////////////////////////////////////////////////////////////////////////////

void handleTemperatureMeasurement(Object cluster, Object msg) {
	def attributes = Zigbee.Message.decodeZclAttributes(msg);
	def tempVal = attributes[cluster.ATTR_MEASURED_VALUE]
	log.trace "Temp:{}", tempVal

   if ((null != tempVal) && ('INVALID' != tempVal.toString())) {
		// temperature is reported in 100ths degree C, so convert to C and save
		double tempC = tempVal
		tempC /= 100
		log.trace "Set Temp:{}", tempC
		Temperature.temperature tempC
	}
}

// called when device responds to a Temperature Measurement Read Attributes
onZigbeeMessage.Zcl.temperaturemeasurement.zclreadattributesresponse() {
	log.trace "Driver received Temperature Measurement Attributes Response:{}", message
	handleTemperatureMeasurement(tempCluster, message)
}


// called when device asynchronously sends a Temperature Measurement Report Attributes
onZigbeeMessage.Zcl.temperaturemeasurement.zclreportattributes() {
	log.trace "Driver received Temperature Measurement Attributes Report:{}", message
	handleTemperatureMeasurement(tempCluster, message)
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the Diagnostics Cluster
////////////////////////////////////////////////////////////////////////////////

boolean handleDiagnosticMsg(Object cluster, Object msg) {
	def attributes = Zigbee.Message.decodeZclAttributes(msg)
	def rssi = attributes[cluster.ATTR_LAST_MESSAGE_RSSI]
	def lqi = attributes[cluster.ATTR_LAST_MESSAGE_LQI]
	def boolean processed = false
	log.trace "RSSI:{}, LQI:{}", rssi, lqi

	if (lqi != null) {
		if ('INVALID' == lqi.toString()) lqi = 255	// helper parses 255 value as 'INVALID', but it just means 100%
		if (0 > lqi) lqi = 256 + lqi	// convert signed value to unsigned
		int sigPct = Math.round( (lqi * 100.0) / 255.0)
		log.trace "LQI:{}, (percent:{})", lqi, sigPct
		DeviceConnection.signal sigPct
		processed = true
	}
	return processed
}

// called when device responds to a Diagnostics Read Attributes
onZigbeeMessage.Zcl.diagnostics.zclreadattributesresponse() {
	log.trace "Driver received Diagnostics Attributes Response:{}", message
	if (!handleDiagnosticMsg(diagCluster, message)) return false
}

// called when device asynchronously sends a Diagnostics Report Attributes
onZigbeeMessage.Zcl.diagnostics.zclreportattributes() {
	log.trace "Driver received Diagnostics Attributes Report:{}", message
	if (!handleDiagnosticMsg(diagCluster, message)) return false
}


////////////////////////////////////////////////////////////////////////////////
// DeviceOta Capability
////////////////////////////////////////////////////////////////////////////////

onEvent('DeviceOtaDeferredRead') {
   GenericZigbeeDeviceOta.doProcessDeviceOtaDeferredRead(this,DEVICE_NAME,dvcEndPoint)
}

onEvent('DeviceOtaCheckFragmentRequestTimeout') {
   GenericZigbeeDeviceOta.doProcessDeviceOtaCheckFragmentRequestTimeout(this,DEVICE_NAME)
}

onZigbeeMessage.Zcl.ota.zclreadattributesresponse() {
   GenericZigbeeDeviceOta.doHandleOtaReadAttributesResponse(this,DEVICE_NAME,otaCluster,message)
}

onZigbeeMessage.Zcl.ota.querynextimagerequest() {
   GenericZigbeeDeviceOta.doHandleQueryNextImageRequest(this,DEVICE_NAME,message)
}

onZigbeeMessage.Zcl.ota.imageblockrequest() {
   GenericZigbeeDeviceOta.doHandleImageBlockRequest(this,DEVICE_NAME,message)
}

onZigbeeMessage.Zcl.ota.imagePageRequest() {
   GenericZigbeeDeviceOta.doHandleImagePageRequest(this,DEVICE_NAME,message)
}

onZigbeeMessage.Zcl.ota.upgradeendrequest() {
   GenericZigbeeDeviceOta.doHandleUpgradeEndRequest(this,DEVICE_NAME,message)
}


////////////////////////////////////////////////////////////////////////////////
// Identify Capability Closures
////////////////////////////////////////////////////////////////////////////////

// method defined in the Identify capability
onIdentify.Identify {
	log.debug "Driver received onIdentify.Identify:{}", message
	// ask the device to identify itself for the defined interval
	identCluster.identifyCmd( IDENT_PERIOD_SECS )

	// send a response so event processing completes and next event can be handled
	sendResponse 'ident:IdentifyResponse', ['result':true]
}


////////////////////////////////////////////////////////////////////////////////
// Default protocol message handlers
////////////////////////////////////////////////////////////////////////////////

// default handler for ZCL messages, called if no other handlers handled the ZCL message
onZigbeeMessage(Zigbee.TYPE_ZCL) {
	def zclMsg = Zigbee.Message.toZcl(message)
	// get Information about the message
	def profile = zclMsg.getProfileId()
	def clusterId = zclMsg.getClusterId()
	def msgId = zclMsg.getZclMessageId()
	def endpoint = zclMsg.getEndpoint()
	def flags = zclMsg.getFlags()
	// get the message data
	byte[] data = zclMsg.getPayload()

	// if Config Reporting Response for Power Config cluster,
	if ((PROFILE_HA == profile) && (CLUSTER_PWR_CNFG == clusterId) && (CMD_CNFG_RPT_RSP == msgId) && (1 == endpoint)) {
		if ((0 < data.length) && (0 == data[0])) {
			log.debug "Power reporting config was successful"
			// set flag to disable future attempts to configure reporting
			vars.CNFG_PWR_RPT = -1
		} else {
			log.warn "Power reporting config FAILED: ${data}"
		}
		return
	}
	
	// if Config Reporting Response for Temperature Config cluster,
	if ((PROFILE_HA == profile) && (CLUSTER_TEMPERATURE == clusterId) && (CMD_CNFG_RPT_RSP == msgId) && (1 == endpoint)) {
		if ((0 < data.length) && (0 == data[0])) {
			log.debug "Temperature reporting config was successful"
			// set flag to disable future attempts to configure reporting
			vars.CNFG_TEMP_RPT = -1
		} else {
			log.warn "Temperature reporting config FAILED: ${data}"
		}
		return
	}

	// if Write Attribute Response for Poll Control cluster,
	if ((PROFILE_HA == profile) && (CLUSTER_POLL_CONTROL == clusterId) && (CMD_WRT_ATTR_RSP == msgId) && (1 == endpoint)) {
		if ((0 < data.length) && (0 == data[0])) {
			log.debug "Poll Control config was successful"
			// set flag to disable future attempts to configure reporting
			vars.CNFG_POLL_CTRL = -1
		} else {
			log.warn "Poll Control config FAILED: ${data}"
		}
		return
	}
	
	// if Config Reporting Response for Diagnostics cluster,
	if ((PROFILE_HA == profile) && (CLUSTER_DIAGNOSTICS == clusterId) && (CMD_CNFG_RPT_RSP == msgId) && (1 == endpoint)) {
		if ((0 < data.length) && (0 == data[0])) {
			log.debug "Diagnostics reporting config was successful"
			// set flag to disable future attempts to configure reporting
			vars.CNFG_DIAG_RPT = -1
		} else {
			log.warn "Diagnostics reporting config FAILED: ${data}"
		}
		return
	}


	if ((PROFILE_HA == profile) && (CLUSTER_ON_OFF == clusterId)) {		// 0x0104 (260) = ZigBee HA,  6 = On/Off (sent from server (the device))

		log.debug "ON/OFF - EndPoint:{} MsgId:{}", endpoint, msgId
		def prevState = Button.state.get()
		switch (msgId) {
			case 0:
				Button.state Button.STATE_RELEASED
				break
			case 1:
				Button.state Button.STATE_PRESSED
				break
			case 3:		// sent after button pairs, so we assume 'Released'
				Button.state Button.STATE_RELEASED
				break
			default:
				log.debug 'Button State: Unknown'
				break
		}
		// if button state changed, capture timestamp
		if (Button.state.get() != prevState) {
			Button.statechanged new Date()
		}
		return
	}

	// if Diagnostic cluster reported LQI and not previously handled (exception parsing attribute) manually parse the value here
	if ((CLUSTER_DIAGNOSTICS == clusterId) && (3 < data.length)) {
		if ((0x1C == data[0]) && (0x01 == data[1]) && (0x20 == data[2])) {		// LQI Attribute (0x011C) as unsigned 8-bit value (0x20)
			int lqi = data[3]				// 0-255
			if (0 > lqi) lqi = 256 + lqi	// convert signed value to unsigned
			double signal = (lqi * 100.0) / 255.0
			int sigLvl = Math.round(signal)
			log.trace "LQI:{}, (percent:{})", lqi, sigLvl
			DeviceConnection.signal sigLvl
		}
		return
	}

	log.debug "Driver received unhandled zigbee ZCL message Profile:{}, ClusterId:{}, MsgId:{}, EndPoint:{}, Flags:{}, Data:" + data, profile, clusterId, msgId, endpoint, flags
}

