/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * ZigBee Driver for the Smartenit 3 Button Switch
 *
 * FACTORY RESET
 *  - Remove one battery from ZBWS3B for at least 5 seconds. 
 *  - Press and hold the Program Button while re-inserting the battery. 
 *  - The Status LED will start blinking when factory default settings have been restored.
 * 
 * IDENTIFY
 *  - Flashes LED for 3 minutes (see IDENT_PERIOD_SECS).
 * 
 * OFFLINE TIMEOUT:			190 minutes (see OFFLINE_TIMEOUT_SECS)
 * 
 * CHECK-IN INTERVAL:		Every 60 minutes (default used by device)
 * 
 * BATTERY LEVEL REPORTING:
 *  - At least every 12 hours
 *  - At most every hour, if level changes by 0.2 Volts or more (ignore 0.1 volt jitter)
 * 
 * DIAGNOSTICS REPORTING:
 *  - LQI read each time device connects
 *  - LQI not reported async
 * 
 * ISSUES/NOTES
 *  - Button capability instances are named 'one', 'two', 'three'
 *  - First time 'toggle' message is sent for each endpoint, device appears to send it 3 or 4 times.
 *  
 */
import groovy.transform.Field

driver			"ZBSmartenit3Button"
description		"Driver for the Smartenit 3 Button Switch"
version			"1.0"
protocol		"ZIGB"
deviceTypeHint	"Button"
productId		"000000"
vendor 			"Iris"
model 			"ZBWS3B (4037A)"


matcher			'ZIGB:manufacturer': 0x1075, 'ZIGB:vendor': 'Compacta', 'ZIGB:model': 'ZBWS3B(4037A)'   

capabilities	'DevicePower', 'Identify', 'Button'

// declare multiple named instances of Button capability
instance	'one',    Button
instance	'two',    Button
instance	'three',  Button

DevicePower.source               DevicePower.SOURCE_BATTERY
DevicePower.linecapable          false
DevicePower.backupbatterycapable false


// Manufacturer ID:       0x1075   (4213)
// Manufacturer:          Compacta
// Model:                 ZBWS3B(4037A)
//
// 3 End Points
// Profile ID:  0x0104  ZigBee HA
//
// End Point 1  (Left Button)
// IN Clusters
//   0x0000     Basic
//   0x0001     Power Configuration
//   0x0003     Identify
//   0x0015     
//   0x0020     Poll Control
//   0x0B05     Diagnostics
// OUT Clusters
//   0x0006     On/Off
//
// End Point 2  (Center Button)
// IN Clusters
//   0x0000     Basic
//   0x0001     Power Configuration
//   0x0003     Identify
//   0x0B05     Diagnostics
// OUT Clusters
//   0x0006     On/Off
//
// End Point 3  (Right Button)
// IN Clusters
//   0x0000     Basic
//   0x0001     Power Configuration
//   0x0003     Identify
//   0x0B05     Diagnostics
// OUT Clusters
//   0x0006     On/Off
//


def pwrCluster    = Zigbee.endpoint((byte)1).Power
def pollCluster   = Zigbee.endpoint((byte)1).PollControl
def identCluster  = Zigbee.endpoint((byte)1).Identify
def diagCluster   = Zigbee.endpoint((byte)1).Diagnostics
def onOffCluster1 = Zigbee.endpoint((byte)1).OnOff
def onOffCluster2 = Zigbee.endpoint((byte)2).OnOff
def onOffCluster3 = Zigbee.endpoint((byte)3).OnOff

// constants used if setting battery reporting interval, and processing ZCL On/Off Out CLuster
@Field def final short PROFILE_HA           = 0x0104

@Field def final short CLUSTER_PWR_CNFG     = 0x0001
@Field def final short CLUSTER_ON_OFF       = 0x0006
@Field def final short CLUSTER_POLL_CONTROL = 0x0020
@Field def final short CLUSTER_DIAGNOSTICS  = 0x0B05

@Field def final CMD_WRT_ATTR               = 0x02      // General Command Frame - Write Attributes
@Field def final CMD_WRT_ATTR_RSP           = 0x04      // General Command Frame - Write Attributes Response
@Field def final CMD_CNFG_RPT               = 0x06      // General Command Frame - Configure Reporting
@Field def final CMD_CNFG_RPT_RSP           = 0x07      // General Command Frame - Configure Reporting Response

// operational constants
def final OFFLINE_TIMEOUT_SECS              = 11400     // 190 minutes (3 * 60 minutes) + 10 minutes buffer
def final short IDENT_PERIOD_SECS           = 180       // number of seconds (0-600) for device to Identify itself (Flash LED) when Identify method is called

@Field def final long CNFG_RETRY_DELAY_MSEC = 10000     // delay 10 x Attempt-Cnt seconds between retries to configure reporting
@Field def final int MAX_CNFG_ATTEMPTS      = 10        // maximumn number of attempts to make trying to configure reporting
@Field def final String CNFG_PWR_RPT        = 'CnfgPwrRpt'
@Field def final String CNFG_POLL_CTRL      = 'CnfgPollCrtl'
@Field def final String CNFG_DIAG_RPT       = 'CnfgDiagRpt'


////////////////////////////////////////////////////////////////////////////////
// Driver lifecycle callbacks
////////////////////////////////////////////////////////////////////////////////

onAdded {
	log.debug "Smartenit 3 Button Switch device started."

	// set default attribute values
	DevicePower.source               DevicePower.SOURCE_BATTERY
	DevicePower.linecapable          false
	DevicePower.backupbatterycapable false
	DevicePower.sourcechanged        ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())

	Button.state.one                 Button.STATE_RELEASED
	Button.statechanged.one          ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())

	Button.state.two                 Button.STATE_RELEASED
	Button.statechanged.two          ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
	
	Button.state.three               Button.STATE_RELEASED
	Button.statechanged.three        ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())

	// Bind all of the command clusters on the enpoints we need
	// Zigbee.bindAll()
	Zigbee.bindEndpoints(
		onOffCluster1.bindClientCluster(),		// Note that this is an Out (Client) cluster, not In (Server) cluster
		onOffCluster2.bindClientCluster(),		// Note that this is an Out (Client) cluster, not In (Server) cluster
		onOffCluster3.bindClientCluster(),		// Note that this is an Out (Client) cluster, not In (Server) cluster
		pollCluster.bindServerCluster(),
		pwrCluster.bindServerCluster(),
		diagCluster.bindServerCluster(),
		identCluster.bindServerCluster() )
}


onConnected {
	log.debug "Smartenit 3 Button Switch device connected."

	// read current Power attributes
	pwrCluster.zclReadAttributes(
		pwrCluster.ATTR_BATTERY_VOLTAGE,
		pwrCluster.ATTR_BATTERY_VOLTAGE_MIN_THRESHOLD )

	// read Diagnostic attributes
	diagCluster.zclReadAttributes(
		diagCluster.ATTR_LAST_MESSAGE_LQI,
		diagCluster.ATTR_LAST_MESSAGE_RSSI )

	// read current Poll Control attributes (if needed)
	pollCluster.zclReadAttributes(
		pollCluster.ATTR_CHECKIN_INTERVAL,
		pollCluster.ATTR_LONG_POLL_INTERVAL,
		pollCluster.ATTR_SHORT_POLL_INTERVAL )

	// configure reporting of PowerConfig cluster BatteryVoltage
	vars.CNFG_PWR_RPT = 0
	Scheduler.defer CNFG_PWR_RPT

	// write Poll Control cluster Checkin Interval
	vars.CNFG_POLL_CTRL = 0
	Scheduler.defer CNFG_POLL_CTRL
	
	// configure reporting of Diagnostics cluster Last Message LQI attribute
	// 10/16/15 - Removed Reporting of LQI per Wiki page updates
//	vars.CNFG_DIAG_RPT = 0
//	Scheduler.defer CNFG_DIAG_RPT

	// set recommended offline timeout interval
	Zigbee.setOfflineTimeout( OFFLINE_TIMEOUT_SECS )
}


onDisconnected {
	log.debug "Smartenit 3 Button Switch device disconnected."
}


onRemoved {
	log.debug "Smartenit 3 Button Switch device removed."
}


////////////////////////////////////////////////////////////////////////////////
// Scheduled Event Handlers
////////////////////////////////////////////////////////////////////////////////


onEvent(CNFG_PWR_RPT) {
	if ((0 <= vars.CNFG_PWR_RPT) && (MAX_CNFG_ATTEMPTS > vars.CNFG_PWR_RPT)) {
		log.debug "$CNFG_PWR_RPT:$vars.CNFG_PWR_RPT"
		// configure reporting of Power Config cluster Battery Voltage attribute
		byte[] rptPwrCnfgBytes = [
			// Dir (0x00)
			0x00,
			// Attr Id (0x0020) Battery Voltage
			0x20, 0x00,
			// Attr Data Type (0x20) Unsigned 8-Bit Int
			0x20,
			// Min Interval (0x0E10) 3600 secs (at most once per hour)
			0x10, 0x0E,
			// Max Interval (0xA8C0) 43200 seconds (at least once every 12 hours)
			0xC0, 0xA8,
			// Reportable Change (0x02) 0.2 volts (ignore jitter of +/- 0.1 volt)
			0x02 ]
		Zigbee.send(
			"cluster" : CLUSTER_PWR_CNFG,
			"command" : CMD_CNFG_RPT,
			"profile" : PROFILE_HA,
			"endpoint" : 1,
			"clusterspecific" : false,
			"defaultresponse" : true,
			"data" : rptPwrCnfgBytes )
		// schedule a followup write, in case it is needed, '10 * Attempt Count' seconds from now
		vars.CNFG_PWR_RPT++
		Scheduler.scheduleIn CNFG_PWR_RPT, (CNFG_RETRY_DELAY_MSEC * vars.CNFG_PWR_RPT)
	}
}

onEvent(CNFG_POLL_CTRL) {
	if ((0 <= vars.CNFG_POLL_CTRL) && (MAX_CNFG_ATTEMPTS > vars.CNFG_POLL_CTRL)) {
		log.debug "$CNFG_POLL_CTRL:$vars.CNFG_POLL_CTRL"
		// write Poll Control cluster Checkin Interval
		byte[] wrtChkIntvlBytes = [
			// Attr Id (0x0000) Checkin Interval
			0x00, 0x00,
			// Attr Data Type (0x23) Unsigned 32- bit integer
			0x23,
			// Attr Data (0x00003840) 14400 quarter-seconds (60 minutes, factory default)
			0x40, 0x38, 0x00, 0x00 ]
		Zigbee.send(
			"cluster" : CLUSTER_POLL_CONTROL,
			"command" : CMD_WRT_ATTR,
			"profile" : PROFILE_HA,
			"endpoint" : 1,
			"clusterspecific" : false,		// using general Write Attribute command
			"defaultresponse" : true,
			"data" : wrtChkIntvlBytes)
		// schedule a followup write, in case it is needed, '10 * Attempt Count' seconds from now
		vars.CNFG_POLL_CTRL++
		Scheduler.scheduleIn CNFG_POLL_CTRL, (CNFG_RETRY_DELAY_MSEC * vars.CNFG_POLL_CTRL)
	}
}

onEvent(CNFG_DIAG_RPT) {
	if ((0 <= vars.CNFG_DIAG_RPT) && (MAX_CNFG_ATTEMPTS > vars.CNFG_DIAG_RPT)) {
		log.debug "$CNFG_DIAG_RPT:$vars.CNFG_DIAG_RPT"
		// configure reporting of Diagnostics cluster Last Message LQI attribute
		byte[] rptDiagCnfgBytes = [
			// Dir (0x00)
			0x00,
			// Attr Id (0x011C) Last Message LQI
			0x1C, 0x01,
			// Attr Data Type (0x20) Unsigned 8-Bit Int
			0x20,
			// Min Interval (0x0E10) 3600 secs (at most once per hour)
			0x10, 0x0E,
			// Max Interval (0xA8C0) 43200 seconds (at least once every 12 hours)
			0xC0, 0xA8,
			// Reportable Change (0x0C) approximately 5% of 255
			0x0C ]
		Zigbee.send(
			"cluster" : CLUSTER_DIAGNOSTICS,
			"command" : CMD_CNFG_RPT,
			"profile" : PROFILE_HA,
			"endpoint" : 1,
			"clusterspecific" : false,
			"defaultresponse" : true,
			"data" : rptDiagCnfgBytes )
		// schedule a followup write, in case it is needed, '10 * Attempt Count' seconds from now
		vars.CNFG_DIAG_RPT++
		Scheduler.scheduleIn CNFG_DIAG_RPT, (CNFG_RETRY_DELAY_MSEC * vars.CNFG_DIAG_RPT)
	}
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the Power Configuration Cluster
////////////////////////////////////////////////////////////////////////////////

void handlePowerMsg(Object cluster, Object msg) {
	def attributes = Zigbee.Message.decodeZclAttributes(msg)
	def battVolt = attributes[cluster.ATTR_BATTERY_VOLTAGE]
	def battMinThreshold = attributes[cluster.ATTR_BATTERY_VOLTAGE_MIN_THRESHOLD]
	log.debug "BatteryVoltage:" + battVolt + ", Min Thrshld:" + battMinThreshold

	double minVolts = (null != battMinThreshold) ? (battMinThreshold / 10.0) : 2.1		// default to 2.1 volts
	double nomVolts = 3.0

	if ((null != battVolt) && ('INVALID' != battVolt.toString())) {
		// battery Voltage is reported in tenths of Volts
		double volts = (battVolt / 10.0)
		log.debug "Battery Volts:" + volts
		// battery percentage = (100 / nominal - minimum) * ( actual - minumum )
		if (0 < (nomVolts - minVolts)) {	// prevent division by zero
			double battPercent = (100.0 / (nomVolts - minVolts) * (volts - minVolts))
			battPercent =  (100.0 < battPercent) ? 100.0 : battPercent		// limit maximum to 100%
			battPercent =  (0.0 > battPercent) ? 0.0 : battPercent			// limit minimum to 0%
			int intBattPercent = battPercent
			log.debug "Battery Percent:" + intBattPercent
			DevicePower.battery intBattPercent
		}
	}
}

// called when device responds to a Power Read Attributes
onZigbeeMessage.Zcl.power.zclreadattributesresponse() {
	log.debug "Driver received Power Attributes Response: " + message
	handlePowerMsg(pwrCluster, message)
}

// called when device asynchronously sends a Power Report Attributes
onZigbeeMessage.Zcl.power.zclreportattributes() {
	log.debug "Driver received Power Attributes Report: " + message
	handlePowerMsg(pwrCluster, message)
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the Poll Control Cluster
////////////////////////////////////////////////////////////////////////////////

void handlePollCrtlMsg(Object cluster, Object msg) {
	def attributes = Zigbee.Message.decodeZclAttributes(msg)
	def checkin = attributes[cluster.ATTR_CHECKIN_INTERVAL]
	def longPoll = attributes[cluster.ATTR_LONG_POLL_INTERVAL]
	def shortPoll = attributes[cluster.ATTR_SHORT_POLL_INTERVAL]
	log.debug "CheckinInterval:" + checkin + ", LongPoll:" + longPoll + ", ShortPoll:" + shortPoll
}

// called when device responds to a Poll Control Read Attributes
onZigbeeMessage.Zcl.pollcontrol.zclreadattributesresponse() {
	log.debug "Driver received Poll Control Attributes Response: " + message
	handlePollCrtlMsg(pollCluster, message)
}

// called when device asynchronously sends a Poll Control Report Attributes
onZigbeeMessage.Zcl.pollcontrol.zclreportattributes() {
	log.debug "Driver received Poll Control Attributes Report: " + message
	handlePollCrtlMsg(pollCluster, message)
}

// called when device asynchronously sends a Poll Control Checkin
onZigbeeMessage.Zcl.pollcontrol.checkin() {
	log.debug "Driver received Poll Control Checkin: " + message
	// tell device to resume without short polling
	pollCluster.checkInResponse( (byte)0x00, (short)0x0000 )
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the Diagnostics Cluster
////////////////////////////////////////////////////////////////////////////////

boolean handleDiagnosticMsg(Object cluster, Object msg) {
	def attributes = Zigbee.Message.decodeZclAttributes(msg)
	def rssi = attributes[cluster.ATTR_LAST_MESSAGE_RSSI]
	def lqi = attributes[cluster.ATTR_LAST_MESSAGE_LQI]
	def boolean processed = false
	log.debug "RSSI: " + rssi + ", LQI: " + lqi

	if (lqi != null) {
		if ('INVALID' == lqi.toString()) lqi = 255	// helper parses 255 value as 'INVALID', but it just means 100%
		if (0 > lqi) lqi = 256 + lqi	// convert signed value to unsigned
		int sigPct = Math.round( (lqi * 100.0) / 255.0)
		log.debug "LQI: " + lqi + ", (percent:" + sigPct + ")"
		DeviceConnection.signal sigPct
		processed = true
	}
	return processed
}

// called when device responds to a Diagnostics Read Attributes
onZigbeeMessage.Zcl.diagnostics.zclreadattributesresponse() {
	log.debug "Driver received Diagnostics Attributes Response: " + message
	if (!handleDiagnosticMsg(diagCluster, message)) return false
}

// called when device asynchronously sends a Diagnostics Report Attributes
onZigbeeMessage.Zcl.diagnostics.zclreportattributes() {
	log.debug "Driver received Diagnostics Attributes Report: " + message
	if (!handleDiagnosticMsg(diagCluster, message)) return false
}



////////////////////////////////////////////////////////////////////////////////
// Identify Capability Closures
////////////////////////////////////////////////////////////////////////////////

// method defined in the Identify capability
onIdentify.Identify {
	log.debug "Driver received onIdentify.Identify: " + message
	// ask the device to identify itself for the defined interval
	identCluster.identifyCmd( IDENT_PERIOD_SECS )

	// send a response so event processing completes and next event can be handled
	sendResponse 'ident:IdentifyResponse', ['result':true]
}


////////////////////////////////////////////////////////////////////////////////
// Default protocol message handlers
////////////////////////////////////////////////////////////////////////////////

// default handler for ZCL messages, called if no other handlers handled the ZCL message
onZigbeeMessage(Zigbee.TYPE_ZCL) {
	log.debug "Driver received zigbee ZCL message: " + message
	def zclMsg = Zigbee.Message.toZcl(message)
	// get Information about the message
	def profile = zclMsg.getProfileId()
	def clusterId = zclMsg.getClusterId()
	def msgId = zclMsg.getZclMessageId()
	def endpoint = zclMsg.getEndpoint()
	def flags = zclMsg.getFlags()
	// get the message data
	byte[] data = zclMsg.getPayload()

	// if Config Reporting Response for Power Config cluster,
	if ((PROFILE_HA == profile) && (CLUSTER_PWR_CNFG == clusterId) && (CMD_CNFG_RPT_RSP == msgId) && (1 == endpoint)) {
		if ((0 < data.length) && (0 == data[0])) {
			log.debug "Power reporting config was successful"
			// set flag to disable future attempts to configure reporting
			vars.CNFG_PWR_RPT = -1
		} else {
			log.warn "Power reporting config FAILED: ${data}"
		}
		return
	}
	
	// if Write Attribute Response for Poll Control cluster,
	if ((PROFILE_HA == profile) && (CLUSTER_POLL_CONTROL == clusterId) && (CMD_WRT_ATTR_RSP == msgId) && (1 == endpoint)) {
		if ((0 < data.length) && (0 == data[0])) {
			log.debug "Poll Control config was successful"
			// set flag to disable future attempts to configure reporting
			vars.CNFG_POLL_CTRL = -1
		} else {
			log.warn "Poll Control config FAILED: ${data}"
		}
		return
	}
	
	// if Config Reporting Response for Diagnostics cluster,
	if ((PROFILE_HA == profile) && (CLUSTER_DIAGNOSTICS == clusterId) && (CMD_CNFG_RPT_RSP == msgId) && (1 == endpoint)) {
		if ((0 < data.length) && (0 == data[0])) {
			log.debug "Diagnostics reporting config was successful"
			// set flag to disable future attempts to configure reporting
			vars.CNFG_DIAG_RPT = -1
		} else {
			log.warn "Diagnostics reporting config FAILED: ${data}"
		}
		return
	}


	if ((PROFILE_HA == profile) && (CLUSTER_ON_OFF == clusterId)) {		// 0x0104 (260) = ZigBee HA,  6 = On/Off (sent from server (the device))

		log.debug "ON/OFF - EndPoint:" + endpoint + " MsgId:" + msgId
		def prevState = Button.state.get()
		if (2 == msgId) {		// toggle
			switch (endpoint) {
				case 1:
					Button.state.one Button.STATE_PRESSED
					Button.statechanged.one new Date()
					Scheduler.scheduleIn ('delayedRelease1', 1000)
					break
				case 2:
					Button.state.two Button.STATE_PRESSED
					Button.statechanged.two new Date()
					Scheduler.scheduleIn ('delayedRelease2', 1000)
					break
				case 3:
					Button.state.three Button.STATE_PRESSED
					Button.statechanged.three new Date()
					Scheduler.scheduleIn ('delayedRelease3', 1000)
					break
				default:
					log.debug 'Button Endpoint Unknown'
					break
			}
		}
		return
	}

	// if Diagnostic cluster reported LQI and not previously handled (exception parsing attribute) manually parse the value here
	if ((CLUSTER_DIAGNOSTICS == clusterId) && (3 < data.length)) {
		if ((0x1C == data[0]) && (0x01 == data[1]) && (0x20 == data[2])) {		// LQI Attribute (0x011C) as unsigned 8-bit value (0x20)
			int lqi = data[3]				// 0-255
			if (0 > lqi) lqi = 256 + lqi	// convert signed value to unsigned
			double signal = (lqi * 100.0) / 255.0
			int sigLvl = Math.round(signal)
			log.debug "LQI: " + lqi + ", (percent:" + sigLvl + ")"
			DeviceConnection.signal sigLvl
		}
		return
	}

	log.debug "Profile [$profile] ClusterId [$clusterId] MsgId [$msgId] EndPoint [$endpoint] Flags [$flags] Data [$data]"
}

onEvent('delayedRelease1') {Button.state.one Button.STATE_RELEASED}
onEvent('delayedRelease2') {Button.state.two Button.STATE_RELEASED}
onEvent('delayedRelease3') {Button.state.three Button.STATE_RELEASED}

