/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import groovy.transform.Field

capability		"Indicator"
description		"Implementation of Indicator for Leviton"
version			"2.8"


//Config does NOT get reset upon removal
@Field final byte CNFG_LED_PARAM_NO      = 0x07        // parameter number for 'LED' setting, used to switch when LED is On and Off
@Field final byte CNFG_LED_SIZE          = 0x01        // size of 'LED' parameter field, in bytes
@Field final byte CNFG_LED_NORMAL        = 0xFF        // LED 'ON' when outlet is 'OFF' (default)
@Field final byte CNFG_LED_INVERSE       = 0xFE        // LED 'ON' when outlet is 'ON'
@Field final byte CNFG_LED_OFF           = 0x00        // LED always OFF
@Field final byte CNFG_RESET             = 0x81

Indicator.enabled         true
Indicator.enableSupported true
Indicator.inverted        false
Indicator.indicator       Indicator.INDICATOR_ON

//reset defaults
onAdded {
   ZWave.configuration.set( CNFG_LED_PARAM_NO, CNFG_LED_SIZE, CNFG_LED_NORMAL)
}

onConnected {
	ZWave.configuration.get(CNFG_LED_PARAM_NO)
}

////////////////////////////////////////////////////////////////////////////////
// Capability Support 
////////////////////////////////////////////////////////////////////////////////

setAttributes("indicator") {
	boolean readIndicatorCnfg = false
	def attributes = message.attributes
	for (attribute in attributes) {
		switch (attribute.key) {
			case Indicator.inverted:
				// set the LED configuration
				ZWave.configuration.set(CNFG_LED_PARAM_NO, CNFG_LED_SIZE, attribute.value ? CNFG_LED_INVERSE : CNFG_LED_NORMAL)
				readIndicatorCnfg = true
				break

			case Indicator.enabled:
				if (true == attribute.value) {
					// Set either inverted or normal
					log.debug("Setting LED based on Indicator.inverted = [{}] to {}", Indicator.inverted.get(), Indicator.inverted.get() ? CNFG_LED_INVERSE : CNFG_LED_NORMAL)
					ZWave.configuration.set(CNFG_LED_PARAM_NO, CNFG_LED_SIZE, Indicator.inverted.get() ? CNFG_LED_INVERSE : CNFG_LED_NORMAL)
				} else {
					ZWave.configuration.set(CNFG_LED_PARAM_NO, CNFG_LED_SIZE, CNFG_LED_OFF)
				}
				readIndicatorCnfg = true
				break

			default:
				break
		}
	}
	if (true == readIndicatorCnfg) {
		// get the current LED configuration from the device (to verify the config was set)
		ZWave.configuration.get(CNFG_LED_PARAM_NO)
	}
}

////////////////////////////////////////////////////////////////////////////////
// Protocol Message Callbacks
////////////////////////////////////////////////////////////////////////////////
onZWaveMessage.switch_binary.report {
	updateIndicator()
}

onZWaveMessage.switch_binary.report {
	updateIndicator()
}

onZWaveMessage.configuration.report {
	byte param = message.command.get('param')
	byte level = message.command.get('level')
	byte val1 = message.command.get('val1')
	log.debug "Configuration Report param: {} level: {}, val1: {}", param, level, val1

	if (CNFG_LED_PARAM_NO != param) {
		return false
	}
	switch (val1){
		case CNFG_LED_NORMAL:
			// set/save the inverted attribute of the LED indicator
			Indicator.inverted false
			Indicator.enabled true
			break
		case CNFG_LED_INVERSE:
			// set/save the inverted attribute of the LED indicator
			Indicator.inverted true
			Indicator.enabled true
			break
		case CNFG_LED_OFF:
			Indicator.enabled false
			break
		default:
			log.info "{} received unknown value for LED Parameter {}", DEVICE_NAME, val1
			break
	}
	updateIndicator()
}

void updateIndicator(){
	boolean switchOn = (Switch.STATE_ON==Switch.state.get() ? true: false)
	if (Indicator.enabled.get()){
		boolean indicatorMatchesSwitch = Indicator.inverted.get()	// LED Indicator matches switch power if inverted
		if (Switch.STATE_OFF == Switch.state.get()) {
			log.debug "Set Indicator with SWITCH_OFF based on Inverted:$indicatorMatchesSwitch to " + (indicatorMatchesSwitch ? Indicator.INDICATOR_OFF : Indicator.INDICATOR_ON)
			Indicator.indicator (indicatorMatchesSwitch ? Indicator.INDICATOR_OFF : Indicator.INDICATOR_ON)
		} else {
			log.debug "Set Indicator with SWITCH_ON based on Inverted:$indicatorMatchesSwitch to " + (indicatorMatchesSwitch ? Indicator.INDICATOR_ON : Indicator.INDICATOR_OFF)
			Indicator.indicator (indicatorMatchesSwitch ? Indicator.INDICATOR_ON : Indicator.INDICATOR_OFF)
		}
		log.trace "Indicator.indicator: {}", Indicator.indicator.get()
	} else {
		log.trace "Indicator.indicator: DISABLED"
		Indicator.indicator Indicator.INDICATOR_DISABLED
	}
}

