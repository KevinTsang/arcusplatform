/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Driver for a GE/Jasco 14295 In-Wall Toggle Dimmer Switch
 * 
 * 
 */
 
driver           "ZWJasco14295ToggleDimmerDriver"
description      "Driver for a GE/Jasco 14295 In-Wall Toggle Dimmer Switch"
version          "2.7"
protocol         "ZWAV"
deviceTypeHint   "Dimmer"
productId        "6c56c8"            // using product ID for 300 series In-Wall Toggle Dimmer
vendor           "GE"
model            "14295"

matcher          'ZWAV:Manufacturer': 0x0063, 'ZWAV:ProductType': 0x4944, 'ZWAV:ProductId': 0x3130	//GE
matcher          'ZWAV:Manufacturer': 0x0063, 'ZWAV:ProductType': 0x4944, 'ZWAV:ProductId': 0x3137	//Jasco

capabilities     'DevicePower', 'Switch', 'Dimmer'

importCapability 'zwave/GenericZWaveDim'
importCapability 'zwave/GenericZWaveVersion'

// Command Classes:
//      0x26   (38) Switch_Multilevel
//      0x27   (39) Switch_All
//      0x56   (86) CRC16 Encap
//      0x59   (89) Association Group Info
//      0x5A   (90) Device Reset Locally
//      0x5E   (94) Z-Wave+ Info
//      0x70  (112) Configuration
//      0x72  (114) Manufacturer_Specific
//      0x73  (115) PowerLevel
//      0x7A  (122) Firmware Update Meta Data
//      0x85 (-123) Association
//      0x86 (-122) Version


DevicePower.source                DevicePower.SOURCE_LINE
DevicePower.linecapable           true
DevicePower.backupbatterycapable  false

Switch.inverted                   false
Switch.state                      Switch.STATE_OFF

final String DEVICE_NAME          = "Jasco 14295 Toggle Dimmer"
final int POLLING_INTERVAL_SEC    = 3600        // every hour
final int OFFLINE_TIMEOUT_SECS    = 10800       // 3 hrs

// config definitions/constants
// ----------------------------
final byte CNFG_TOGGLE_PARAM_NO   = 0x04        // parameter number for 'Toggle' setting, used to invert operation if installed upside down
final byte CNFG_TOGGLE_SIZE       = 0x01        // size of 'Toggle' parameter field, in bytes
final byte CNFG_TOGGLE_NORMAL     = 0x00        // Top/Up is 'ON' (default)
final byte CNFG_TOGGLE_INVERT     = 0x01        // Top/Up is 'OFF'


////////////////////////////////////////////////////////////////////////////////
// Driver Lifecycle Callbacks
////////////////////////////////////////////////////////////////////////////////
  
onAdded {
	log.debug "{} added with Attributes {}", DEVICE_NAME, message.attributes
	
	DevicePower.sourcechanged ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
	Switch.statechanged       ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())

	ZWave.configuration.set(CNFG_TOGGLE_PARAM_NO, CNFG_TOGGLE_SIZE, CNFG_TOGGLE_NORMAL)
}

onConnected {
	log.debug "{} connected", DEVICE_NAME
	ZWave.setOfflineTimeout(OFFLINE_TIMEOUT_SECS)
	ZWave.poll(POLLING_INTERVAL_SEC, ZWave.switch_multilevel.get)
	
	vars.'MAX_READBACKS' = 10				// used by GenericZWaveSwitch to limit maximum read operations
	vars.'DFLT_READBACK_DELAY' = 2000		// used by GenericZWaveSwitch to determine delay between read retries (in mSec)
	
	ZWave.switch_multilevel.get()

	ZWave.configuration.get(CNFG_TOGGLE_PARAM_NO)
}

onDisconnected {
	log.debug "{} disconnected", DEVICE_NAME
}

onRemoved {
	log.debug "{} removed", DEVICE_NAME
}

////////////////////////////////////////////////////////////////////////////////
// Capability Support 
////////////////////////////////////////////////////////////////////////////////

setAttributes(){
	GenericZWaveDim.handleSetAttributes(this, DEVICE_NAME, message)
	
	def attributes = message.attributes
	for(attribute in attributes) {
		switch(attribute.key) {
			case Switch.inverted:
				// only accept this if the Switch.inverted attribute is not null, indicating that it can be set
				if (null != Switch.inverted.get()) {
					// set the Switch Orientation configuration
					ZWave.configuration.set(CNFG_TOGGLE_PARAM_NO, CNFG_TOGGLE_SIZE, attribute.value ? CNFG_TOGGLE_INVERT : CNFG_TOGGLE_NORMAL)
					// get the current Switch Orientation configuration from the device (to verify the config was set)
					ZWave.configuration.get(CNFG_TOGGLE_PARAM_NO)
				} else {
					log.warn "Attempted to set Switch.inverted attribute on device that does not support it"
				}
				break

			default:
				break
		}
	}
}

onDimmer.RampBrightness {
	GenericZWaveDim.handleRampBrightness(this, DEVICE_NAME, message)	
}

onDimmer.IncrementBrightness {
	GenericZWaveDim.handleIncrementBrightness(this, DEVICE_NAME, message)
}
 
onDimmer.DecrementBrightness {
	GenericZWaveDim.handleDecrementBrightness(this, DEVICE_NAME, message)
}

////////////////////////////////////////////////////////////////////////////////
// Protocol Message Callbacks
////////////////////////////////////////////////////////////////////////////////

onZWaveMessage.switch_multilevel.report {
 	GenericZWaveDim.handleMultilevelReport(this, DEVICE_NAME, message)
}

onZWaveMessage.configuration.report {
	log.debug "{} reported configuration: {}", DEVICE_NAME, message
	byte param = message.command.get('param')
	byte level = message.command.get('level')
	byte val1 = message.command.get('val1')
	log.debug "param: {} level: {}, val1: {}", param, level, val1

	if (CNFG_TOGGLE_PARAM_NO == param) {
		log.debug "Toggle Switch Inverted: {}", val1
		// set/save the inverted attribute of the switch
		Switch.inverted ((0 == val1) ? false : true)
	}
}

onZWaveNodeInfo {
	log.debug "{} reported Node Info: {}, {}, {}, {}, {}", DEVICE_NAME, message.getNodeId(), message.getStatus(), message.getBasic(), message.getGeneric(), message.getSpecific()
}

onZWaveMessage {
    log.debug "{} received unhandled ZWave message {}", DEVICE_NAME, message
    return false;
}


