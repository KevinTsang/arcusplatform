/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Driver for a Jasco In-Wall Fan Controller
 *
 */
driver			"ZWJascoInWallFanControllerDriver"
description		"Driver for a Z-Wave Jasco In-Wall Fan Controller"
version			"1.0"
protocol		"ZWAV"
deviceTypeHint	"Fan Control"				// namespace of single capability that best represents the primary role of the device
productId		"979695"
vendor 			"GE"
model 			"12485, 12730"

matcher			'ZWAV:Manufacturer': 0x0063, 'ZWAV:ProductType': 0x4944, 'ZWAV:ProductId': 0x3034
matcher			'ZWAV:Manufacturer': 0x0063, 'ZWAV:ProductType': 0x0507, 'ZWAV:ProductId': 0x0403

capabilities	'DevicePower', 'Switch', 'Fan', 'Indicator'

importCapability 'zwave/GenericZWaveFan'
importCapability 'zwave/JascoZWaveSwitchAll'
importCapability 'zwave/GenericZWaveVersion'

// Command Classes:
//		0x20 Basic
//		0x26 SwitchMultilevel
//		0x27 SwitchAll
//		0x70 Configuration
//		0x72 ManufacturerSpecific
//		0x86 Version


// set DevicePower
// ---------------
DevicePower.source               DevicePower.SOURCE_LINE
DevicePower.linecapable          true
DevicePower.backupbatterycapable false

Fan.maxSpeed				3

Indicator.enabled			true
Indicator.enableSupported	false

final String DEVICE_NAME          = "Jasco In-Wall Fan Controller"

final int  POLLING_INTERVAL_SEC = 120			// every 2 minutes, to match Iris 1

final byte SWITCH_ON        = 0xff
final byte SWITCH_OFF       = 0x00

final byte SPEED_LOW        = 33
final byte SPEED_MEDIUM     = 66
final byte SPEED_HIGH       = 99


// config definitions/constants
// ----------------------------
final byte CNFG_LED_PARAM_NO      = 0x03		// parameter number for 'LED' setting, used to switch when LED is On and Off
final byte CNFG_LED_SIZE          = 0x01		// size of 'LED' parameter field, in bytes
final byte CNFG_LED_NORMAL        = 0x00		// LED 'ON' when outlet is 'OFF' (default)
final byte CNFG_LED_INVERSE       = 0x01		// LED 'ON' when outlet is 'ON'

final byte CNFG_TOGGLE_PARAM_NO   = 0x04		// parameter number for 'Toggle' setting, used to invert operation if installed upside down
final byte CNFG_TOGGLE_SIZE       = 0x01		// size of 'Toggle' parameter field, in bytes
final byte CNFG_TOGGLE_NORMAL     = 0x00		// Top/Up is 'ON' (default)
final byte CNFG_TOGGLE_INVERT     = 0x01		// Top/Up is 'OFF'

final byte CNFG_RESET_PARAM_NO    = 0x00		// parameter number to reset configuration to factory default
final byte CNFG_RESET_SIZE        = 0x81		// size field (actually flags indicating: 0x80 = reset, 0x01 = ignore values, use factory settings
final byte CNFG_RESET_VALUE       = 0x00        // Not used by device

// NOTE: No sure what parameters 1, 2, and 6 are used for.
// NOTE: Parameters 5, and 7-12, for Level steps and rate are not yet defined or used.

final int OFFLINE_TIMEOUT_SECS        = 600 		// 10 min

onAdded {
	vars.'CURRENT_NAME' = DEVICE_NAME
	log.debug "${DEVICE_NAME} added with Attributes {}", message.attributes

	// set default attribute values
	DevicePower.source                  DevicePower.SOURCE_LINE
	DevicePower.linecapable             true
	DevicePower.backupbatterycapable    false
	DevicePower.sourcechanged           ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())

	Switch.state                        Switch.STATE_OFF
	Switch.statechanged                 ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
	Switch.inverted                     false

	Indicator.enabled                   true
	Indicator.enableSupported           false		// user cannot change the Indicator.enabled attribute for this device
	Indicator.indicator                 Indicator.INDICATOR_ON
	Indicator.inverted                  false

	Fan.maxSpeed                        3
	Fan.speed							1

	// reset the device configuration to factory defaults
	ZWave.configuration.set(CNFG_RESET_PARAM_NO, CNFG_RESET_SIZE, CNFG_RESET_VALUE)
}


onConnected {
	log.debug "${DEVICE_NAME} connected"

	vars.'DFLT_READBACK_DELAY' = 1000		// used by GenericZWaveFan to determine delay before reading back level setting (in mSec)
	
	// get the current Fan Controller state and speed
	ZWave.switch_multilevel.get()

	// These devices do not send a switch_multilevel.report when their level is changed locally,
	// so periodically poll for the current switch level.  They do send a Node Info when the
	// level is changed locally, but we also periodically poll in case we miss that message.
	ZWave.poll(POLLING_INTERVAL_SEC, ZWave.switch_multilevel.get)

	ZWave.setOfflineTimeout(OFFLINE_TIMEOUT_SECS)

	// get configuration settings
	ZWave.configuration.get(CNFG_LED_PARAM_NO)
	ZWave.configuration.get(CNFG_TOGGLE_PARAM_NO)
}


onDisconnected {
	log.debug "${DEVICE_NAME} disconnected"
}


onRemoved {
	log.debug "${DEVICE_NAME} removed"
}


////////////////////////////////////////////////////////////////////////////////
// Capability Support
////////////////////////////////////////////////////////////////////////////////

setAttributes(){
	GenericZWaveFan.handleSetAttributes(this, DEVICE_NAME, message)
	
	def attributes = message.attributes;
	for(attribute in attributes) {
		switch(attribute.key) {
			case Switch.inverted:
				// set the Switch Orientation configuration
				ZWave.configuration.set(CNFG_TOGGLE_PARAM_NO, CNFG_TOGGLE_SIZE, attribute.value ? CNFG_TOGGLE_INVERT : CNFG_TOGGLE_NORMAL)
				// get the current Switch Orientation configuration from the device (to verify the config was set)
				ZWave.configuration.get(CNFG_TOGGLE_PARAM_NO)
				break

			case Fan.direction:
				log.warn "Fan direction not supported by this device."
				break

			case Indicator.inverted:
				// set the LED configuration
				ZWave.configuration.set(CNFG_LED_PARAM_NO, CNFG_LED_SIZE, attribute.value ? CNFG_LED_INVERSE : CNFG_LED_NORMAL)
				// get the current LED configuration from the device (to verify the config was set)
				ZWave.configuration.get(CNFG_LED_PARAM_NO)
				break

			case Indicator.enabled:
				// The indicator cannot be enabled/disabled, only inverted
				log.warn "Switch does not support enable/disable of Indicator"
				Indicator.enabled true
				break

			default:
				break
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
// Protocol Message Callbacks
////////////////////////////////////////////////////////////////////////////////

onZWaveMessage.switch_multilevel.report {
	GenericZWaveFan.handleMultilevelReport(this, DEVICE_NAME, message)
}

onZWaveMessage.configuration.report {
	log.debug "Received configuration report for Jasco In-Wall Fan: {}", message
	byte param = message.command.get('param')
	byte level = message.command.get('level')
	byte val1 = message.command.get('val1')
	log.debug "param: {}, level: {}, val1: {}", param, level, val1

	if (CNFG_LED_PARAM_NO == param) {
		log.debug "LED Inverted: {}", val1
		if (0 == val1) {
			// set/save the inverted attribute of the LED indicator
			Indicator.inverted false
			// update the indicator attribute to match (or inverse of) the current state attribute
			Indicator.indicator ( (Switch.STATE_ON == Switch.state.get()) ? Indicator.INDICATOR_OFF : Indicator.INDICATOR_ON )
		} else {
			// set/save the inverted attribute of the LED indicator
			Indicator.inverted true
			// update the indicator attribute to match (or inverse of) the current state attribute
			Indicator.indicator ( (Switch.STATE_ON == Switch.state.get()) ? Indicator.INDICATOR_ON : Indicator.INDICATOR_OFF )
		}
	}

	if (CNFG_TOGGLE_PARAM_NO == param) {
		log.debug "Toggle Switch Inverted: {}", val1
		// set/save the inverted attribute of the switch
		Switch.inverted ((0 == val1) ? false : true)
	}
}

onZWaveNodeInfo {
	log.debug "${DEVICE_NAME} reported Node Info: {}, {}, {}, {}, {}", message.getNodeId(), message.getStatus(), message.getBasic(), message.getGeneric(), message.getSpecific()

	// these devices report a Node Info every time their level is changed locally,
	// so do a Multilevel Switch Get to get the current state
	ZWave.switch_multilevel.get()
 }

onZWaveMessage.application_status.busy {
	log.debug "${DEVICE_NAME} reported Busy"
	// when device reports that it is busy, read again after a delay, if we haven't done too many already
	Scheduler.scheduleIn 'DeferredSwitchReadLevel', 1000
}

onZWaveMessage {
    log.debug "${DEVICE_NAME} received unhandled ZWave message {}", message
    return false;
}

