/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Driver for a GE/Jasco 28167 Plug-In Dimmer Switch
 * 
 * 
 */
 
driver           "ZWJasco28167DimmerDriver"
description      "Driver for a GE/Jasco 28167 Plug-In Dimmer Switch"
version          "2.7"
protocol         "ZWAV"
deviceTypeHint   "Dimmer"
productId        "3d83ee"
vendor           "GE"
model            "ZW3104"

matcher          'ZWAV:Manufacturer': 0x0063, 'ZWAV:ProductType': 0x5044, 'ZWAV:ProductId': 0x3038  //GE
matcher          'ZWAV:Manufacturer': 0x0063, 'ZWAV:ProductType': 0x5044, 'ZWAV:ProductId': 0x3037  //Jasco

capabilities     'DevicePower', 'Switch', 'Dimmer', 'Indicator'

importCapability 'zwave/GenericZWaveDim'
importCapability 'zwave/GenericZWaveVersion'

// Command Classes:
//      0x26   (38) Switch_Multilevel
//      0x27   (39) Switch_All
//      0x56   (86) CRC16 Encap
//      0x59   (89) Association Group Info
//      0x5A   (90) Device Reset Locally
//      0x5E   (94) Z-Wave+ Info
//      0x70  (112) Configuration
//      0x72  (114) Manufacturer_Specific
//      0x73  (115) PowerLevel
//      0x7A  (122) Firmware Update Meta Data
//      0x86 (-122) Version
//      0x85 (-123) Association


DevicePower.source                DevicePower.SOURCE_LINE
DevicePower.linecapable           true
DevicePower.backupbatterycapable  false

Switch.inverted                   false
Switch.state                      Switch.STATE_OFF

Indicator.enabled                 true
Indicator.enableSupported         true          // user can change the Indicator.enabled attribute for this device
Indicator.inverted                true          // default to inverted because most people prefer that
Indicator.indicator               Indicator.INDICATOR_ON


final String DEVICE_NAME          = "Jasco 28167 Dimmer"
final int POLLING_INTERVAL_SEC    = 3600        // every hour
final int OFFLINE_TIMEOUT_SECS    = 10800       // 3 hrs

// config definitions/constants
// ----------------------------
final byte CNFG_LED_PARAM_NO      = 0x03        // parameter number for 'LED' setting, used to switch when LED is On and Off
final byte CNFG_LED_SIZE          = 0x01        // size of 'LED' parameter field, in bytes
final byte CNFG_LED_ON_WHEN_OFF   = 0x00        // Value when LED is 'ON' when outlet is 'OFF'
final byte CNFG_LED_ON_WHEN_ON    = 0x01        // Value when LED is 'ON' when outlet is 'ON' (default for this device)
final byte CNFG_LED_OFF           = 0x02        // Value when LED is always OFF


////////////////////////////////////////////////////////////////////////////////
// Driver Lifecycle Callbacks
////////////////////////////////////////////////////////////////////////////////
  
onAdded {
	log.debug "{} added with Attributes {}", DEVICE_NAME, message.attributes
	
	DevicePower.sourcechanged     ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
	Switch.statechanged           ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
	
	// set the LED configuration
	ZWave.configuration.set(CNFG_LED_PARAM_NO, CNFG_LED_SIZE, CNFG_LED_ON_WHEN_ON)
}

onConnected {
	log.debug "{} connected", DEVICE_NAME
	ZWave.setOfflineTimeout(OFFLINE_TIMEOUT_SECS)
	ZWave.poll(POLLING_INTERVAL_SEC, ZWave.switch_multilevel.get)
	
	vars.'MAX_READBACKS' = 10				// used by GenericZWaveSwitch to limit maximum read operations
	vars.'DFLT_READBACK_DELAY' = 1000		// used by GenericZWaveSwitch to determine delay between read retries (in mSec)
	
	ZWave.switch_multilevel.get()
	
	ZWave.configuration.get(CNFG_LED_PARAM_NO)
}

onDisconnected {
	log.debug "{} disconnected", DEVICE_NAME
}

onRemoved {
	log.debug "{} removed", DEVICE_NAME
}

////////////////////////////////////////////////////////////////////////////////
// Capability Support 
////////////////////////////////////////////////////////////////////////////////

setAttributes(){
	GenericZWaveDim.handleSetAttributes(this, DEVICE_NAME, message)
	boolean readIndicatorCnfg = false
	def attributes = message.attributes
	for(attribute in attributes) {
		switch(attribute.key) {
			case Switch.inverted:
				// only accept this if the Switch.inverted attribute is not null, indicating that it can be set
				log.warn "Attempted to set Switch.inverted attribute on device that does not support it"
				break

			case Indicator.inverted:
				// set the LED configuration (true = On when On, false = On when Off (nightlight mode))
				ZWave.configuration.set(CNFG_LED_PARAM_NO, CNFG_LED_SIZE, attribute.value ? CNFG_LED_ON_WHEN_ON : CNFG_LED_ON_WHEN_OFF)
				readIndicatorCnfg = true
				break

			case Indicator.enabled:
				if (true == attribute.value){
					// Set either inverted or normal
					ZWave.configuration.set(CNFG_LED_PARAM_NO, CNFG_LED_SIZE, Indicator.inverted ? CNFG_LED_ON_WHEN_ON : CNFG_LED_ON_WHEN_OFF)
				} else {
					ZWave.configuration.set(CNFG_LED_PARAM_NO, CNFG_LED_SIZE, CNFG_LED_OFF)
				}
				readIndicatorCnfg = true
				break

			default:
				break
		}
	}
	if (true == readIndicatorCnfg) {
		ZWave.configuration.get(CNFG_LED_PARAM_NO)
	}
}

onDimmer.RampBrightness {
	GenericZWaveDim.handleRampBrightness(this, DEVICE_NAME, message)	
}

onDimmer.IncrementBrightness {
	GenericZWaveDim.handleIncrementBrightness(this, DEVICE_NAME, message)
}
 
onDimmer.DecrementBrightness {
	GenericZWaveDim.handleDecrementBrightness(this, DEVICE_NAME, message)
}


////////////////////////////////////////////////////////////////////////////////
// Protocol Message Callbacks
////////////////////////////////////////////////////////////////////////////////

onZWaveMessage.switch_multilevel.report {
 	GenericZWaveDim.handleMultilevelReport(this, DEVICE_NAME, message)
	updateIndicator()
}

onZWaveMessage.configuration.report {
	log.debug "{} reported configuration: {}", DEVICE_NAME, message
	byte param = message.command.get('param')
	byte level = message.command.get('level')
	byte val1 = message.command.get('val1')
	log.debug "param: {}, level: {}, val1: {}", param, level, val1

	if (CNFG_LED_PARAM_NO == param) {
		log.debug "{} LED Parameter: {}", DEVICE_NAME, val1
		switch (val1){
			case CNFG_LED_ON_WHEN_OFF:
				// set/save the inverted attribute of the LED indicator
				Indicator.inverted false
				Indicator.enabled true
				break
			case CNFG_LED_ON_WHEN_ON:
				// set/save the inverted attribute of the LED indicator
				Indicator.inverted true
				Indicator.enabled true
				break
			case CNFG_LED_OFF:
				Indicator.enabled false
				break
			default:
				log.info "{} received unknown value for LED Parameter {}", DEVICE_NAME, val1
				break
		}
		updateIndicator()
	}
}

void updateIndicator(){
	boolean switchOn = (Switch.STATE_ON==Switch.state.get() ? true: false)
	if (Indicator.enabled.get()){
		boolean indicatorMatchesSwitch = Indicator.inverted.get()	// LED Indicator matches switch power if inverted
		if (Switch.STATE_OFF == Switch.state.get()) {
			//log.debug "Set Indicator based on Inverted:$indicatorMatchesSwitch to " + (indicatorMatchesSwitch ? Indicator.INDICATOR_OFF : Indicator.INDICATOR_ON)
			Indicator.indicator (indicatorMatchesSwitch ? Indicator.INDICATOR_OFF : Indicator.INDICATOR_ON)
		} else {
			//log.debug "Set Indicator based on Inverted:$indicatorMatchesSwitch to " + (indicatorMatchesSwitch ? Indicator.INDICATOR_ON : Indicator.INDICATOR_OFF)
			Indicator.indicator (indicatorMatchesSwitch ? Indicator.INDICATOR_ON : Indicator.INDICATOR_OFF)
		}
		log.trace "Indicator.indicator: {}", Indicator.indicator.get()
	} else {
		log.trace "Indicator.indicator: DISABLED"
		Indicator.indicator Indicator.INDICATOR_DISABLED
	}
}

onZWaveNodeInfo {
	log.debug "{} reported Node Info: {}, {}, {}, {}, {}", DEVICE_NAME, message.getNodeId(), message.getStatus(), message.getBasic(), message.getGeneric(), message.getSpecific()
}

onZWaveMessage {
    log.debug "{} received unhandled ZWave message {}", DEVICE_NAME, message
    return false;
}


