/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Driver for a Leviton VRF01-1LZ Fan Controller
 * 
 * 
 */
 
driver			"ZWLevitonVRF01FanCntlDriver"
description		"Driver for a Leviton VRF01-1LZ In-wall Fan Controller"
version			"2.9"
protocol        "ZWAV"
deviceTypeHint	"Fan Control"
productId		"c558c6"
vendor 			"Leviton"
model 			"VRF01-1LZ"

matcher			'ZWAV:Manufacturer': 0x001D, 'ZWAV:ProductType': 0x1001, 'ZWAV:ProductId': 0x0334

capabilities	'DevicePower', 'Switch', 'Fan'

importCapability 'zwave/GenericZWaveFan'
importCapability 'zwave/GenericZWaveVersion'

// Command Classes:
//		0x26   (38) Switch_Multilevel
//		0x27   (39) Switch_All
//      0x2B   (43) Scene_Activation
//      0x2C   (44) Scene_Actuator_Conf
//		0x72  (114) Manufacturer_Specific
//		0x73  (115) PowerLevel
//		0x77  (119) Node_Naming
//      0x82 (-126) Hail
//      0x85 (-123) Association
//		0x86 (-122) Version
//		0x91 (-111) Manufacturer_proprietary


//DevicePower attributes are assumed
DevicePower.battery              0
DevicePower.source               DevicePower.SOURCE_LINE
DevicePower.linecapable          true
DevicePower.backupbatterycapable false

Fan.maxSpeed                     3


final int POLLING_INTERVAL_SEC    = 3600        // every hour
final int OFFLINE_TIMEOUT_SECS    = 12000       // 3 hrs 20 minutes


////////////////////////////////////////////////////////////////////////////////
// Driver Lifecycle Callbacks
////////////////////////////////////////////////////////////////////////////////

onAdded {
	log.debug "Device added with Attributes {}", message.attributes

	ZWave.association.set( 1, 1, 0, 0, 0)

	Switch.statechanged         ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : now())
	Switch.state                Switch.STATE_OFF
}

onConnected {
	log.debug "Device connected"
		
	vars.'DFLT_READBACK_DELAY' = 1000		// used by GenericZWaveFan to determine delay before reading back level setting (in mSec)

	ZWave.setOfflineTimeout(OFFLINE_TIMEOUT_SECS)
	ZWave.poll(POLLING_INTERVAL_SEC, ZWave.switch_multilevel.get)
}

onDisconnected {
	log.debug "Device disconnected"
}

onRemoved {
	log.debug "Device removed"
}

////////////////////////////////////////////////////////////////////////////////
// Capability Support 
////////////////////////////////////////////////////////////////////////////////

setAttributes(){
	GenericZWaveFan.handleSetAttributes(this, DEVICE_NAME, message)
	
	def attributes = message.attributes;
	for(attribute in attributes) {
		switch(attribute.key) {
			case Switch.inverted:
				log.warn "Switch.inverted is not supported by this device"
				break

			case Fan.direction:
				log.warn 'Fan direction not supported by this device.'
				break

			default:
				break
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
// Protocol Message Callbacks
////////////////////////////////////////////////////////////////////////////////

onZWaveMessage.switch_multilevel.report {
 	GenericZWaveFan.handleMultilevelReport(this, DEVICE_NAME, message)
}

onZWaveNodeInfo {
	log.debug "Device reported Node Info: {}, {}, {}, {}, {}", message.getNodeId(), message.getStatus(), message.getBasic(), message.getGeneric(), message.getSpecific()

	// these devices report a Node Info every time their level is changed locally,
	// so do a Multilevel Switch Get to get the current state
	ZWave.switch_multilevel.get()
 }

onZWaveMessage.application_status.busy {
	log.debug "Device reported Busy"
	// when device reports that it is busy, read again after a delay, if we haven't done too many already
	Scheduler.scheduleIn 'DeferredSwitchReadLevel', 1000
}

onZWaveMessage {
    log.debug "Device received unhandled ZWave message {}", message
    return false;
}


