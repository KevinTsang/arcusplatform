/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Mock driver for a Shade device
 * 
 * Notes: 
 * 
 */
driver			"MOCK_Shade"
description		"Mock driver for a Shade device"
version			"1.1"
protocol		"MOCK"
deviceTypeHint	"Shade"
productId		"b726df"
vendor 			"Mockitron"
model 			"Somfy"

matcher        'MOCK:Capability' : 'Shade'
matcher        'MOCK:ProductId'  : 'b726df'

capabilities	'DevicePower', 'Shade', 'DeviceMock'


// ########### driver lifecycle callbacks ##################

onAdded {
	log.debug "Mock Shade device started."
	Device.name 'Mock Shade'

	DeviceConnection.signal	94
	
	DevicePower.source               DevicePower.SOURCE_BATTERY
	DevicePower.linecapable          false
	DevicePower.battery              40
	DevicePower.backupbatterycapable false
	DevicePower.sourcechanged        ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())

	Shade.shadestate                 Shade.SHADESTATE_OK
	Shade.level                      100
	Shade.levelchanged               new Date()
}


onConnected {
	log.debug "Mock Shade device connected."
}

onDisconnected {
	log.debug "Mock Shade device disconnected."
}

onRemoved {
	log.debug "Mock Shade device removed."
}


// ########### capability support ##################

setAttributes(Shade) {
	def attrs = message.attributes;
	log.debug "Mock Shade :: setAttributes :: START $attrs"	
	
	for(attribute in attrs) {
		switch (attribute.key) {
			case Shade.level :
				setLevel((int) attribute.value)
				break;
			default:
				log.error "Unrecognized attribute: " + attribute
		}
	}
	log.debug "Mock Shade :: setAttributes :: DONE "
}

onShade.GoToOpen {
	log.debug "Mock Shade :: Open"
	setLevel 100
}

onShade.GoToClosed {
	log.debug "Mock Shade :: Close"
	setLevel 0
}

onShade.GoToFavorite {
	log.debug "Mock Shade :: Favorite"
	setLevel 50
}

void setLevel(int level) {
	if(level > 100) level = 100;
	else if(level < 0) level = 0;

	if(Shade.level.get() != level) {
		Shade.level         level
		Shade.levelchanged  new Date()
	}
}

// ########### mock stuff here #####################

onPlatform ("devmock:Connect") {
  log.debug "devmock:Connect"
  connected();
  sendResponse "devmock:ConnectResponse", [:]
}


onPlatform ("devmock:Disconnect") {
  log.debug "devmock:Disconnect"
  disconnected();
  sendResponse "devmock:ConnectResponse", [:]
}

onPlatform ("devmock:SetAttributes") {
  log.debug "devmock:SetAttributes:" + message.attributes.attrs
  attributes << message.attributes.attrs;
  sendResponse "devmock:SetAttributesResponse", [:]
}

