/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Driver for a Jasco In-Wall Dimmer Toggle Switch
 *
 */
driver			"ZWJascoInWallDimmerToggleDriver"
description		"Driver for a Z-Wave Jasco In-Wall Dimmer Toggle"
version			"1.2"
protocol		"ZWAV"
deviceTypeHint	"Dimmer"
productId		"6c56c8"
vendor 			"GE"
model 			"ZW3003,ZW3005"

matcher			'ZWAV:Manufacturer': 0x0063, 'ZWAV:ProductType': 0x4944, 'ZWAV:ProductId': 0x3033

capabilities	'DevicePower', 'Dimmer', 'Switch'

importCapability 'zwave/JascoZWaveSwitchAll'
importCapability 'zwave/GenericZWaveDim'
importCapability 'zwave/GenericZWaveVersion'

// set DevicePower
// ---------------
DevicePower.source               DevicePower.SOURCE_LINE
DevicePower.linecapable          true
DevicePower.backupbatterycapable false

final int  POLLING_INTERVAL_SEC = 71		// Iris 1 uses 30s
final long DFLT_READBACK_DELAY = 1000
final long DEFERRED_READ_DELAY_MSEC = 5000	// wait 5 seconds after Node Info to read level

// config definitions/constants
// ----------------------------
final byte CNFG_LED_PARAM_NO      = 0x03		// parameter number for 'LED' setting, used to switch when LED is On and Off
final byte CNFG_TOGGLE_PARAM_NO   = 0x04		// parameter number for 'Toggle' setting, used to invert operation if installed upside down
final byte CNFG_TOGGLE_SIZE       = 0x01		// size of 'Toggle' parameter field, in bytes
final byte CNFG_TOGGLE_NORMAL     = 0x00		// Top/Up is 'ON' (default)
final byte CNFG_TOGGLE_INVERT     = 0x01		// Top/Up is 'OFF'

final byte CNFG_RESET_PARAM_NO    = 0x00		// parameter number to reset configuration to factory default
final byte CNFG_RESET_SIZE        = 0x81		// size field (actually flags indicating: 0x80 = reset, 0x01 = ignore values, use factory settings
final byte CNFG_RESET_VALUE       = 0x00        // Not used by device
final int OFFLINE_TIMEOUT_SECS    = 1800 		// 30 min

final String DEVICE_NAME = 'Jasco In-Wall Dimmer Toggle'


onAdded {
	vars.'CURRENT_NAME' = DEVICE_NAME
	log.debug "{} added", DEVICE_NAME

	// set default attribute values
	DevicePower.sourcechanged           ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())

	Switch.state                        Switch.STATE_OFF
	Switch.statechanged                 ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
	Switch.inverted                     false

	// reset the device configuration to factory defaults
	ZWave.configuration.set(CNFG_RESET_PARAM_NO, CNFG_RESET_SIZE, CNFG_RESET_VALUE)
}

onConnected {
	log.debug "{} connected",DEVICE_NAME

	vars.'MAX_READBACKS' = 10				// used by GenericZWaveSwitch to limit maximum read operations
	vars.'DFLT_READBACK_DELAY' = DFLT_READBACK_DELAY // used by GenericZWaveSwitch to determine delay between read retries (in mSec)

	// get the current switch level
	ZWave.switch_multilevel.get()

	// These devices do NOT send a switch_multilevel.report when their level is changed locally,
	// so periodically poll for the current switch level.  They do send a Node Info when the
	// level is changed locally, but we also periodically poll in case we miss that message.
	ZWave.poll(POLLING_INTERVAL_SEC, ZWave.switch_multilevel.get)

	ZWave.setOfflineTimeout(OFFLINE_TIMEOUT_SECS)

	// get configuration settings
	ZWave.configuration.get(CNFG_LED_PARAM_NO)
	ZWave.configuration.get(CNFG_TOGGLE_PARAM_NO)
}


onDisconnected {
	log.debug "{} disconnected",DEVICE_NAME
}


onRemoved {
	log.debug "{} removed", DEVICE_NAME
}


////////////////////////////////////////////////////////////////////////////////
// Capability Support 
////////////////////////////////////////////////////////////////////////////////


setAttributes() {
	log.debug "${DEVICE_NAME} received setAttributes(swit) message: {}", message

	GenericZWaveDim.handleSetAttributes(this, DEVICE_NAME, message)
	
	def attributes = message.attributes
	for(attribute in attributes) {
		switch(attribute.key) {
		case Switch.inverted:
			// set the Switch Orientation configuration
			ZWave.configuration.set(CNFG_TOGGLE_PARAM_NO, CNFG_TOGGLE_SIZE, attribute.value ? CNFG_TOGGLE_INVERT : CNFG_TOGGLE_NORMAL)
			// get the current Switch Orientation configuration from the device (to verify the config was set)
			ZWave.configuration.get(CNFG_TOGGLE_PARAM_NO)
			break
		default:
			break
		}
	}
}


onDimmer.RampBrightness {
	GenericZWaveDim.handleRampBrightness(this, DEVICE_NAME, message)
}

onDimmer.IncrementBrightness {
	GenericZWaveDim.handleIncrementBrightness(this, DEVICE_NAME, message)
}
 
onDimmer.DecrementBrightness {
	GenericZWaveDim.handleDecrementBrightness(this, DEVICE_NAME, message)
}

////////////////////////////////////////////////////////////////////////////////
// Protocol Message Callbacks
////////////////////////////////////////////////////////////////////////////////

onZWaveMessage.configuration.report {
	log.debug "${DEVICE_NAME} Received configuration report :{}", message
	byte param = message.command.get('param')
	byte level = message.command.get('level')
	byte val1 = message.command.get('val1')
	log.debug "param: {}, level: {}, val1: {}", param, level, val1

	if (CNFG_TOGGLE_PARAM_NO == param) {
		log.debug "Toggle Switch Inverted: {}", val1
		// set/save the inverted attribute of the switch
		Switch.inverted ((0 == val1) ? false : true)
	}
}

onZWaveMessage.switch_multilevel.report {
	GenericZWaveDim.handleMultilevelReport(this, DEVICE_NAME, message)
}


onZWaveNodeInfo {
	log.debug "${DEVICE_NAME} reported Node Info: {}, {}, {}, {}, {}", message.getNodeId(), message.getStatus(), message.getBasic(), message.getGeneric(), message.getSpecific()
	GenericZWaveDim.scheduleDeferredReadLevel(this, DEFERRED_READ_DELAY_MSEC)
}

