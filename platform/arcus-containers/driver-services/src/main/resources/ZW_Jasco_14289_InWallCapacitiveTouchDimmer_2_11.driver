/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Driver for a GE/Jasco 14289 In-Wall Capacitive Touch Dimmer Switch
 * 
 * NOTE:
 *   The "Side Button" is a small button on the front left side of the device that is normally covered when the
 *   switch plate is installed, but access to it is required to remove or reset the device.
 * 
 * ADD:
 *  1) Follow the instructions for your Z-Wave certified controller to add a device to the Z-Wave network.
 *  2) Once the controller is ready to add your device, press and release anywhere on the touch panel.
 *  
 * REMOVE:
 *  1) Follow the instructions for your Z-Wave certified controller to remove a device from the Z-Wave network.
 *  2) Once the controller is ready to remove your device, press and hold the side button, then press and release 
 *     anywhere on the touch panel, and then release the side button to remove the device from the network.
 * 
 * FACTORY RESET:
 *  1) Press and hold the side button, then press and release anywhere on touch panel ten (10) times quickly,
 *     and then release the side button to reset the device.
 * 
 * COMMAND CLASSES:
 *   0x26   (38) Switch_Multilevel
 *   0x27   (39) Switch_All
 *   0x2B   (43) Scene Activation
 *   0x2C   (89) Scene Actuator Conf
 *   0x56   (86) CRC16 Encap
 *   0x59   (89) Association Group Info
 *   0x5A   (90) Device Reset Locally
 *   0x5E   (94) Z-Wave+ Info
 *   0x70  (112) Configuration
 *   0x72  (114) Manufacturer_Specific
 *   0x73  (115) PowerLevel
 *   0x7A  (122) Firmware Update Meta Data
 *   0x85 (-123) Association
 *   0x86 (-122) Version
 */

uses 'zwave.GenericZWaveDim'
uses 'zwave.GenericZWaveVersion'


driver           "ZWJasco14289CapacitiveTouchDimmerDriver"
description      "Driver for a GE/Jasco 14289 In-Wall Capacitive Touch Dimmer"
version          "2.11"
protocol         "ZWAV"
deviceTypeHint   "Dimmer"
productId        "af7a77"
vendor           "GE"
model            "ZW3009"

matcher          'ZWAV:Manufacturer': 0x0063, 'ZWAV:ProductType': 0x4944, 'ZWAV:ProductId': 0x3233    //GE
matcher          'ZWAV:Manufacturer': 0x0063, 'ZWAV:ProductType': 0x4944, 'ZWAV:ProductId': 0x3234    //Jasco

capabilities     'DevicePower', 'Switch', 'Dimmer', 'Indicator'

final int POLLING_INTERVAL_SEC    = 3600        // every hour

// config definitions/constants
// ----------------------------
final byte CNFG_LED_PARAM_NO      = 0x03        // parameter number for 'LED' setting, used to switch when LED is On and Off
final byte CNFG_LED_SIZE          = 0x01        // size of 'LED' parameter field, in bytes
final byte CNFG_LED_NORMAL        = 0x00        // LED 'ON' when outlet is 'OFF' (default)
final byte CNFG_LED_INVERSE       = 0x01        // LED 'ON' when outlet is 'ON'
final byte CNFG_LED_OFF           = 0x02        // LED always OFF

final byte CNFG_TOGGLE_PARAM_NO   = 0x04        // parameter number for 'Toggle' setting, used to invert operation if installed upside down
final byte CNFG_TOGGLE_SIZE       = 0x01        // size of 'Toggle' parameter field, in bytes
final byte CNFG_TOGGLE_NORMAL     = 0x00        // Top/Up is 'ON' (default)
final byte CNFG_TOGGLE_INVERT     = 0x01        // Top/Up is 'OFF'


DevicePower {
	source DevicePower.SOURCE_LINE
	linecapable true
	backupbatterycapable false
	bind sourcechanged to source
}

Switch {
	state Switch.STATE_OFF
    inverted false
	bind statechanged to state
}

Dimmer {
	brightness 100
}

Indicator {
	enabled true
    enableSupported true          // user can change the Indicator.enabled attribute for this device
    inverted false
    indicator Indicator.INDICATOR_ON
}


ZWave {
	offlineTimeout 190, MINUTES
}

////////////////////////////////////////////////////////////////////////////////
// Driver Lifecycle Callbacks
////////////////////////////////////////////////////////////////////////////////
  
onAdded {
    ZWave.configuration.set(CNFG_LED_PARAM_NO, CNFG_LED_SIZE, CNFG_LED_NORMAL)
    ZWave.configuration.set(CNFG_TOGGLE_PARAM_NO, CNFG_TOGGLE_SIZE, CNFG_TOGGLE_NORMAL)
}

onConnected {
    ZWave.poll(POLLING_INTERVAL_SEC, ZWave.switch_multilevel.get)

    vars.'MAX_READBACKS' = 10                // used by GenericZWaveDim to limit maximum read operations
    vars.'DFLT_READBACK_DELAY' = 2000        // used by GenericZWaveDim to determine delay between read retries (in mSec)
    
    ZWave.switch_multilevel.get()

    ZWave.configuration.get(CNFG_LED_PARAM_NO)
    ZWave.configuration.get(CNFG_TOGGLE_PARAM_NO)
}


////////////////////////////////////////////////////////////////////////////////
// Capability Support 
////////////////////////////////////////////////////////////////////////////////

setAttributes(){
    GenericZWaveDim.handleSetAttributes(this, DEVICE_NAME, message)
    boolean readIndicatorCnfg = false
    def attributes = message.attributes
    for(attribute in attributes) {
        switch(attribute.key) {
            case Switch.inverted:
                // only accept this if the Switch.inverted attribute is not null, indicating that it can be set
                if (null != Switch.inverted.get()) {
                    // set the Switch Orientation configuration
                    ZWave.configuration.set(CNFG_TOGGLE_PARAM_NO, CNFG_TOGGLE_SIZE, attribute.value ? CNFG_TOGGLE_INVERT : CNFG_TOGGLE_NORMAL)
                    // get the current Switch Orientation configuration from the device (to verify the config was set)
                    ZWave.configuration.get(CNFG_TOGGLE_PARAM_NO)
                } else {
                    log.warn "Attempted to set Switch.inverted attribute on device that does not support it"
                }
                break

            case Indicator.inverted:
                // set the LED configuration
                ZWave.configuration.set(CNFG_LED_PARAM_NO, CNFG_LED_SIZE, attribute.value ? CNFG_LED_INVERSE : CNFG_LED_NORMAL)
                // get the current LED configuration from the device (to verify the config was set)
                ZWave.configuration.get(CNFG_LED_PARAM_NO)
                readIndicatorCnfg = true
                break

            case Indicator.enabled:
                if (true == attribute.value){
                // Set either inverted or normal
                    ZWave.configuration.set(CNFG_LED_PARAM_NO, CNFG_LED_SIZE, Indicator.inverted ? CNFG_LED_INVERSE : CNFG_LED_NORMAL)
                } else {
                    ZWave.configuration.set(CNFG_LED_PARAM_NO, CNFG_LED_SIZE, CNFG_LED_OFF)
                }
                readIndicatorCnfg = true
                break

            default:
                break
        }
    }
    if (true == readIndicatorCnfg) {
        ZWave.configuration.get(CNFG_LED_PARAM_NO)
    }
}

onDimmer.RampBrightness {
    GenericZWaveDim.handleRampBrightness(this, DEVICE_NAME, message)    
}

onDimmer.IncrementBrightness {
    GenericZWaveDim.handleIncrementBrightness(this, DEVICE_NAME, message)
}
 
onDimmer.DecrementBrightness {
    GenericZWaveDim.handleDecrementBrightness(this, DEVICE_NAME, message)
}

////////////////////////////////////////////////////////////////////////////////
// Protocol Message Callbacks
////////////////////////////////////////////////////////////////////////////////

onZWaveMessage.switch_multilevel.report {
     GenericZWaveDim.handleMultilevelReport(this, DEVICE_NAME, message)
    updateIndicator()
}

onZWaveMessage.configuration.report {
    log.debug "Reported configuration: {}", message
    byte param = message.command.get('param')
    byte level = message.command.get('level')
    byte val1 = message.command.get('val1')
    log.debug "param: {} level: {}, val1: {}", param, level, val1

    if (CNFG_LED_PARAM_NO == param) {
        log.debug "LED Inverted: {}", val1
        switch (val1){
            case CNFG_LED_NORMAL:
                // set/save the inverted attribute of the LED indicator
                Indicator.inverted false
                Indicator.enabled true
                break
            case CNFG_LED_INVERSE:
                // set/save the inverted attribute of the LED indicator
                Indicator.inverted true
                Indicator.enabled true
                break
            case CNFG_LED_OFF:
                Indicator.enabled false
                break
            default:
                log.info "Received unknown value for LED Parameter {}", val1
                break
        }
        updateIndicator()
    }

    if (CNFG_TOGGLE_PARAM_NO == param) {
        log.debug "Toggle Switch Inverted: {}", val1
        // set/save the inverted attribute of the switch
        Switch.inverted ((0 == val1) ? false : true)
    }
}

void updateIndicator(){
    boolean switchOn = (Switch.STATE_ON==Switch.state.get() ? true: false)
    if (Indicator.enabled.get()){
        boolean indicatorMatchesSwitch = Indicator.inverted.get()    // LED Indicator matches switch power if inverted
        if (Switch.STATE_OFF == Switch.state.get()) {
            //log.debug "Set Indicator based on Inverted:$indicatorMatchesSwitch to " + (indicatorMatchesSwitch ? Indicator.INDICATOR_OFF : Indicator.INDICATOR_ON)
            Indicator.indicator (indicatorMatchesSwitch ? Indicator.INDICATOR_OFF : Indicator.INDICATOR_ON)
        } else {
            //log.debug "Set Indicator based on Inverted:$indicatorMatchesSwitch to " + (indicatorMatchesSwitch ? Indicator.INDICATOR_ON : Indicator.INDICATOR_OFF)
            Indicator.indicator (indicatorMatchesSwitch ? Indicator.INDICATOR_ON : Indicator.INDICATOR_OFF)
        }
        log.trace "Indicator.indicator: {}", Indicator.indicator.get()
    } else {
        log.trace "Indicator.indicator: DISABLED"
        Indicator.indicator Indicator.INDICATOR_DISABLED
    }
}


onZWaveNodeInfo {
    log.trace "Reported Node Info: {}, {}, {}, {}, {}", message.getNodeId(), message.getStatus(), message.getBasic(), message.getGeneric(), message.getSpecific()
}


