/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import groovy.transform.Field


description		"Default ZWave implementation for the DevicePower capability for Battery Powered devices"
version			"1.0"
capability       'DevicePower'

@Field def final String DEFAULT_NAME     = 'ZWave Battery Powered Device'


onAdded {
	String name = vars.'CURRENT_NAME' ?: DEFAULT_NAME
	log.debug "{} battery powered ZWave device added...", name

	// set default attribute values if not set already
	if (null == DevicePower.source.get())
		DevicePower.source DevicePower.SOURCE_BATTERY
	if (null == DevicePower.linecapable.get())
		DevicePower.linecapable false
	if (null == DevicePower.backupbatterycapable.get())
		DevicePower.backupbatterycapable false

	DevicePower.sourcechanged ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
}

onConnected {
	String name = vars.'CURRENT_NAME' ?: DEFAULT_NAME
	log.debug "{} battery powered ZWave device connected...", name
	
	// get the level of the battery 0 - 100%
	ZWave.battery.get()
}

//
// NOTE: Z-Wave defines values -1, and 0-100, but devices really should not be sending a 0 (how could they if their battery is really at
// that level, and if the device really just knows the battery is OK, or LOW, it should be sending -1 for LOW, not 0.  If a device turely
// just sends values like 100 or 0, then a different handler should be used.
//
static void handleBatteryReport(ctx, name, message) {
	ctx.log.trace "{} reported battery level: {}", name, message.command.get('level')
	byte batteryLevel = message.command.get( 'level' )
	if (null != batteryLevel) {
		int bl = batteryLevel & 0xFF
		if (0xFF == bl) {
			// make sure any BATTERY LOW flags reported are captured in the logs
			ctx.log.info "{} battery powered device reported: BATTERY LOW", name
			ctx.DevicePower.battery 0
		} else if (0 == bl) {
			// devices should not really be reporting a level of 0, so this is probably a mistake
			// so log it, but do not set the DevicePower.battery attribute
			ctx.log.warn "{} battery powered device reported: BATTERY LEVEL 0, Reading Ignored!", name
		} else if ((0 < bl) && (100 >= bl)) {
			// until we get battery level processing worked out, log any reported levels at DEBUG level
			ctx.log.debug "{} battery powered device reported: BATTERY LEVEL {}", name, message.command.get('level')
			ctx.DevicePower.battery bl
		} else {
			// hmm, 1-100 make sense, but anything over 100% or less than -1% really don't make sense are are undefined in Z-Wave
			ctx.log.warn "{} battery powered device reported: INVALID BATTERY LEVEL {}", name, message.command.get('level')
		}
	}
}

static void handleBatteryReportAcceptValuesOver100(ctx, name, message) {
	ctx.log.trace "{} reported battery level: {}", name, message.command.get('level')
	byte batteryLevel = message.command.get( 'level' )
	if (null != batteryLevel) {
		int bl = batteryLevel & 0xFF
		if (0xFF == bl) {
			// make sure any BATTERY LOW flags reported are captured in the logs
			ctx.log.info "{} battery powered device reported: BATTERY LOW", name
			ctx.DevicePower.battery 0
		} else if (0 == bl) {
			// devices should not really be reporting a level of 0, so this is probably a mistake
			// so log it, but do not set the DevicePower.battery attribute
			ctx.log.warn "{} battery powered device reported: BATTERY LEVEL 0, Reading Ignored!", name
		} else {
			// until we get battery level processing worked out, log any reported levels at DEBUG level
			ctx.log.debug "{} battery powered device reported: BATTERY LEVEL {}", name, message.command.get('level')
			if (100 < bl) bl = 100;
			ctx.DevicePower.battery bl
		}
	}
}

//
// Special handler to use if device reports a 0 level when the battery is low (normally we would not expect a 0 level and
// we filter those out as invalud readings, to prevent sequences like 100%, 100%, 0%, 100% from happening and confusing users.
//
static void handleBatteryReportSupportZero(ctx, name, message) {
	ctx.log.trace "${name} reported battery level: {}", message.command.get('level')
	byte batteryLevel = message.command.get( 'level' )
	if (null != batteryLevel) {
		int bl = batteryLevel & 0xFF
		if ((0xFF == bl) || (0 == bl)) {
			// make sure any BATTERY LOW flags reported are captured in the logs
			ctx.log.info "${name} battery powered device reported: BATTERY LOW"
			ctx.DevicePower.battery 0
		} else if ((0 < bl) && (100 >= bl)) {
			// until we get battery level processing worked out, log any reported levels at DEBUG level
			ctx.log.debug "${name} battery powered device reported: BATTERY LEVEL {}", message.command.get('level')
			ctx.DevicePower.battery bl
		} else {
			// hmm, 1-100 make sense, but anything over 100% or less than -1% really don't make sense are are undefined in Z-Wave
			ctx.log.warn "${name} battery powered device reported: INVALID BATTERY LEVEL {}", message.command.get('level')
		}
	}
}


//
// Some devices report a LOW BATTERY as an Alarm. If so, this handler can be used to set the LOW BATTERY level consistantly
//
static void handleLowBatteryAlarm(ctx, name) {
	ctx.log.info "${name} reported Alarm: BATTERY LOW"
	ctx.DevicePower.battery 0
}

