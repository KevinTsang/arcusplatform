/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Driver for the OSRAM Gardenspot Mini RGB Lights
 *
 * Note: To turn the OSRAM Gardenspot Mini RGB Lights on and off: Unplug the controller from the power supply, but do not unplug the power supply from the outlet.
 *
 * To Reset the Gardenspot Lights if it is already paired,
 *  - Unplug the controller from the power supply
 *  - Plug the controller in to the power supply for 3 seconds
 *  - Repeat the previous two steps 4 more times (5 cycles total)
 *  - After the fifth time, wait 10 seconds and the lights will flash OFF and back ON 3 times if successfully reset and ready to pair
 *  - Repeat the process if the lights donâ€™t flash
 *
 *  7/26/2016 - Only configure reporting during first onConnected. Thereafter just read in onConnected and configure only if not as expected.
 *              (with some devices/firmware configuring the reporting interval sometimes triggers an OFF device into turning ON at full brightness)
 * 10/18/2016 - Changed Dimmer processing to ignore dim:brightness=0 settings, and always turn device ON when dim:brightness attribute is set (ignore swit:state setting if dim:brightness is set to non-zero level in same message)
 * 10/18/2016 - Restore previous settings to device when it reconnects (onConnected), or when it reports invalid Levels or an unexpected state (after a device reset from power loss, etc.)
 *
 */
import groovy.transform.Field

driver          "ZBOsramGardenspot"
description     "Driver for the OSRAM Gardenspot Mini RGB Lights"
version         "1.0"
protocol        "ZIGB"
deviceTypeHint  "Light"
productId       "e1556c"
vendor          "OSRAM"
model           "Lightify Gardenspot"

matcher	        'ZIGB:manufacturer': 0xBBAA, 'ZIGB:vendor': 'OSRAM', 'ZIGB:model': 'Gardenspot RGB'			
matcher         'ZIGB:manufacturer': 0xBBAA, 'ZIGB:vendor': 'OSRAM', 'ZIGB:model': 'LIGHTIFY Gardenspot RGB'

capabilities    'DevicePower', 'Switch', 'Light', 'Color', 'Dimmer', 'Identify', 'DeviceOta'

importCapability 'zigbee/GenericZigbeeDimmer'
importCapability 'zigbee/GenericZigbeeDeviceOta'


// 1 End Point (0x03)
//
// Profile ID:  0x0104  ZigBee HA
// IN Clusters
//   0x0000     Basic
//   0x0003     Identify
//   0x0004     Groups
//   0x0005     Scenes
//   0x0006     On/Off
//   0x0008     Level Control
//   0x0300     Color Control
//   0x0B04     Electrical Measurement
//   0xFC0F
// OUT Clusters
//   0x0019     OTA Upgrade

@Field final byte DVC_ENDPOINT = 3

@Field def onOffCluster = Zigbee.endpoint(DVC_ENDPOINT).OnOff
@Field def levelCluster = Zigbee.endpoint(DVC_ENDPOINT).Level
@Field def colorCluster = Zigbee.endpoint(DVC_ENDPOINT).Color
def identCluster = Zigbee.endpoint(DVC_ENDPOINT).Identify
def otaCluster   = Zigbee.endpoint(DVC_ENDPOINT).Ota

@Field def dvcEndPoint = Zigbee.endpoint(DVC_ENDPOINT)


final int DFLT_BRIGHTNESS                   = 100
final short DFLT_TRANS_SECS                 = 1         // default transition seconds to use when brightness attribute is set, since there is no transition time attribute

@Field final int DFLT_COLOR_HUE             = 315
@Field final int DFLT_COLOR_SATURATION      = 100
@Field final byte HUE_MOVE_DIR              = 0         // move mode when changing just hue value; 0=Shortest, 1=Longest, 2=Up, 3=Down
@Field final short DFLT_CLR_TRANS_SECS      = 0         // default transition seconds to use when color attributes are set, since there is no transition time attribute

final String KEY_DEFAULT_COLOR              = 'DEFAULT_COLOR'

final long DFLT_POLL_TIME                   = 120000	// 120 sec
final long HOURLY                           = 3600000	// 1 hour

final short PROFILE_HA                      = 0x0104
final short CLUSTER_ON_OFF                  = 0x0006
final short CLUSTER_LEVEL_CTRL              = 0x0008
final short CLUSTER_COLOR_CTRL              = 0x0300

final byte CMD_READ_ATTR                    = 0x00      // General Command Frame - Read Attributes
final byte CMD_WRT_ATTR                     = 0x02      // General Command Frame - Write Attributes
final byte CMD_CNFG_RPT                     = 0x06      // General Command Frame - Configure Reporting

final int OFFLINE_TIMEOUT_SECS              = 600       // 10 minutes
final short IDENT_PERIOD_SECS               = 15        // number of seconds for device to Identify itself when Identify method is called

@Field final long DFLT_READBACK_DELAY       = 3000      // delay before reading
final long RPT_CNFG_DELAY_MSEC_1            = 10000		// 10 second delay before configuring reports
final long RPT_CNFG_DELAY_MSEC_2            = 12000		// 12 second delay before configuring reports

@Field static final int SET_HUE_ONLY = 1
@Field static final int SET_SAT_ONLY = 2
@Field static final int SET_HUE_AND_SAT = 3

@Field final String KEY_LAST_HUE            = "KEY_LAST_HUE"
@Field final String KEY_LAST_SAT            = "KEY_LAST_SAT"
@Field final String KEY_WAIT4READ           = "KEY_WAIT4READ"	// flag if we are waiting for a color change to take effect before we attempt to read the color settings

final boolean FOLLOWS_LEVEL_SPEC            = false     // device reports invalid level of '0xFF' when device has reset

final short MIN_ONOFF_RPT                   = 0x0001
final short MAX_ONOFF_RPT                   = 0x0078    // 120 seconds
final short MIN_LVL_RPT                     = 0x0002
final short MAX_LVL_RPT                     = 0x0078

@Field final String DEVICE_NAME             = 'OSRAM Gardenspot'

final String EVENT_DEFFERED_DFLT_CNFG       = 'DeferredDefaultConfig'
final String EVENT_DEFFERED_CLR_RPT_CNFG    = 'DeferredRptCnfgHueSaturation'
@Field final String EVENT_DEFFERED_READ_COLOR = 'DeferredReadColor'


DevicePower.source               DevicePower.SOURCE_LINE
DevicePower.linecapable          true
DevicePower.backupbatterycapable false
Color.hue               		 DFLT_COLOR_HUE
Color.saturation        		 DFLT_COLOR_SATURATION
Switch.state			         Switch.STATE_ON
Light.colormode                  Light.COLORMODE_COLOR
Dimmer.brightness 		         DFLT_BRIGHTNESS


////////////////////////////////////////////////////////////////////////////////
// Driver lifecycle callbacks
////////////////////////////////////////////////////////////////////////////////

onAdded {
	log.debug "{} started with attributes:{}", DEVICE_NAME, message.attributes
	
	DevicePower.sourcechanged ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
	Switch.statechanged ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())

	Zigbee.bindEndpoints(
		onOffCluster.bindServerCluster(),
		levelCluster.bindServerCluster(),
		colorCluster.bindServerCluster() )
}


onConnected {
	log.debug "{} connected.", DEVICE_NAME
	Zigbee.setOfflineTimeout( OFFLINE_TIMEOUT_SECS )

	// restore device settings to match capability attributes
	GenericZigbeeDimmer.restoreDeviceSettings(this, DEVICE_NAME, levelCluster, onOffCluster)
	restoreLastColor()

	// after pairing, check that the reporting configurations are what we want them to be
	Scheduler.scheduleIn EVENT_DEFFERED_DFLT_CNFG, RPT_CNFG_DELAY_MSEC_1
	Scheduler.scheduleIn EVENT_DEFFERED_CLR_RPT_CNFG, RPT_CNFG_DELAY_MSEC_2
}

onDisconnected {
	log.debug "{} disconnected.", DEVICE_NAME
}


onRemoved {
	log.debug "{} removed.", DEVICE_NAME
}


////////////////////////////////////////
///    Events
////////////////////////////////////////

onEvent(EVENT_DEFFERED_DFLT_CNFG){
	log.debug "{} read Reporting Configs", DEVICE_NAME
	GenericZigbeeDimmer.doReadOnOffReportAttr(this, DEVICE_NAME, DVC_ENDPOINT)
	GenericZigbeeDimmer.doReadLevelfReportAttr(this, DEVICE_NAME, DVC_ENDPOINT)
}

onEvent(EVENT_DEFFERED_CLR_RPT_CNFG) {
	// configure reporting of Color Control cluster Hue attribute
	byte[] payload = [
		// Dir (0x00)
		0x00,
		// Attr Id (0x0000) Current Hue
		0x00, 0x00,
		// Attr Data Type (0x20) Unsigned 8-Bit Int
		0x20,
		// Min Interval (0x0002) 2 secs
		0x02, 0x00,
		// Max Interval (0x0E10) 3600 secs - 1hr
		0x10, 0x0E,
		// Reportable Change (0x01)
		0x01
		,
		// Dir (0x00)
		0x00,
		// Attr Id (0x0001) Current Saturation
		0x01, 0x00,
		// Attr Data Type (0x20) Unsigned 8-Bit Int
		0x20,
		// Min Interval (0x0002) 2 secs
		0x02, 0x00,
		// Max Interval (0x0E10) 3600 secs - 1hr
		0x10, 0x0E,
		// Reportable Change (0x01)
		0x01
		]
	Zigbee.send(
		"cluster" : CLUSTER_COLOR_CTRL,
		"command" : CMD_CNFG_RPT,
		"profile" : PROFILE_HA,
		"endpoint" : DVC_ENDPOINT,
		"clusterspecific" : false,
		"defaultresponse" : true,
		"data" : payload )
}


onEvent(EVENT_DEFFERED_READ_COLOR) {
	log.debug 'Perform deferred ReadAttributes for colorCluster'
	// read current Color attributes
	colorCluster.zclReadAttributes(
		colorCluster.ATTR_CURRENT_HUE,
		colorCluster.ATTR_CURRENT_SATURATION,
		colorCluster.ATTR_REMAINING_TIME,
		colorCluster.ATTR_COLOR_MODE )
	
	vars[KEY_WAIT4READ] = false
}

// called from GenericZigbeeDimmer.capability
onEvent(GenericZigbeeDimmer.DEFERRED_ON_EVENT) {
	GenericZigbeeDimmer.doDeferredOnEvent(this, DEVICE_NAME, onOffCluster)
}

// called from GenericZigbeeDimmer.capability
onEvent(GenericZigbeeDimmer.READ_SWITCH_EVENT) {
	GenericZigbeeDimmer.doReadSwitchEvent(this, DEVICE_NAME, onOffCluster)
}

// called from GenericZigbeeDimmer.capability
onEvent(GenericZigbeeDimmer.READ_LEVEL_EVENT) {
	GenericZigbeeDimmer.doReadLevelEvent(this, DEVICE_NAME, levelCluster)
}

// may be called from GenericZigbeeDimmer.capability if GenericZigbeeDimmer.doReadOnOffReportAttr() is used
onEvent(GenericZigbeeDimmer.DEFERRED_CNFG_ONOFF_EVENT) {
	GenericZigbeeDimmer.doOnOffConfiguration this, DEVICE_NAME, DVC_ENDPOINT, MIN_ONOFF_RPT, MAX_ONOFF_RPT
}

// may be called from GenericZigbeeDimmer.capability if GenericZigbeeDimmer.doReadLevelfReportAttr() is used
onEvent(GenericZigbeeDimmer.DEFERRED_CNFG_LEVEL_EVENT) {
	GenericZigbeeDimmer.doLevelConfiguration this, DEVICE_NAME, DVC_ENDPOINT, MIN_LVL_RPT, MAX_LVL_RPT
}


////////////////////////////////////////////////////////////////////////////////
// Capability Attribute Closures
////////////////////////////////////////////////////////////////////////////////

setAttributes() {
	GenericZigbeeDimmer.doSetAttributes(this, DEVICE_NAME, levelCluster, onOffCluster, message)
	
	log.debug "{} handle setAttributes color...", DEVICE_NAME
	int doColor = 0

	// process set attribute for Color capability
	def targetAttributes = message.attributes.findAll {
		it.key == Color.hue.name ||
		it.key == Color.saturation.name
		}
	if(targetAttributes) {
		doColor = doGetColorHueSaturationAttributes(targetAttributes)
	}

	if (Light.COLORMODE_COLOR == Light.colormode.get() && 0 < doColor ) {
		doSetColorHueSaturationAttributes(doColor)
	}
	
	def prevMode = Light.colormode.get()
	def attributes = message.attributes
	for(attribute in attributes) {
		switch(attribute.key) {
			case Light.colormode:
				def newMode = attribute.value
				if (Light.COLORMODE_COLORTEMP == newMode && newMode != prevMode) {
					log.warn "{} - Attempt to set Light.colormode to unsupported mode COLORTEMP", DEVICE_NAME
				} else {
					Light.colormode newMode
					log.debug "{} - Set Light.colormode: {}", DEVICE_NAME, newMode
					if (Light.COLORMODE_COLOR == newMode && newMode != prevMode) {
						doSetColorHueSaturationAttributes(SET_HUE_AND_SAT)
					}
					if (Light.COLORMODE_NORMAL == newMode && newMode != prevMode) {
						log.debug "{} - Set to NORMAL Default", DEVICE_NAME
						colorCluster.moveToHueAndSaturation((byte)212, (byte)0, (short)2)		// hue:212, sat:0, transition seconds:2
						Scheduler.scheduleIn EVENT_DEFFERED_READ_COLOR, DFLT_READBACK_DELAY
						vars[KEY_WAIT4READ] = true
					}
				}
				break

			default:
				break
		}
	}

}

int doGetColorHueSaturationAttributes(attributes) {
	log.trace "doGetColorHueSaturationAttributes"
	// default vars to current Color levels
	int hue = 0
	int sat = 0
	int hueSet = 0
	int satSet = 0
	for(attribute in attributes) {
		switch(attribute.key) {
			case Color.hue:
				// convert 0-360 Hue range to 0-254 ZigBee Hue range (255 is reserved)
				hue = Math.round( ((new Double(attribute.value)) / 360.0) * 254.0 )
				hueSet = SET_HUE_ONLY
				vars[KEY_LAST_HUE] = hue
				break
			case Color.saturation:
				// convert 0-100 Saturation range to 0-254 ZigBee Saturation range (255 is reserved)
				sat = Math.round( ((new Double(attribute.value)) / 100.0) * 254.0 )
				satSet = SET_SAT_ONLY
				vars[KEY_LAST_SAT] = sat
				break
			default:
				break
		}
	}
	log.debug "Hue:{}, Sat:{}", vars[KEY_LAST_HUE], vars[KEY_LAST_SAT]
	return (hueSet + satSet)
}

void doSetColorHueSaturationAttributes(valsSet) {
	log.debug "doSetColorHueSaturationAttributes"
	// default vars to current Color levels
	byte hue = getLastHue()
	byte sat = getLastSaturation()

	if (SET_HUE_AND_SAT == valsSet) {
		colorCluster.moveToHueAndSaturation(hue, sat, DFLT_CLR_TRANS_SECS)
		log.debug "moveToHueAndSaturation [Hue:{}, Saturation:{}, Seconds:{}]", hue, sat, DFLT_CLR_TRANS_SECS
	} else if (SET_HUE_ONLY == valsSet) {
		colorCluster.moveToHue(hue, HUE_MOVE_DIR, DFLT_CLR_TRANS_SECS)
		log.debug "moveToHue [Hue:{}, Direction:{}, Seconds:{}]", hue, HUE_MOVE_DIR, DFLT_CLR_TRANS_SECS
	} else if (SET_SAT_ONLY == valsSet) {
		colorCluster.moveToSaturation(sat, DFLT_CLR_TRANS_SECS)
		log.debug "moveToSaturation [Saturation:{}, Seconds:{}]", sat, DFLT_CLR_TRANS_SECS
	}
	if (0 < valsSet) {
		// read back the level (delay this by a bit so default ramping is completed first)
		Scheduler.scheduleIn EVENT_DEFFERED_READ_COLOR, DFLT_READBACK_DELAY
		vars[KEY_WAIT4READ] = true
	}
}

onDimmer.RampBrightness {
	GenericZigbeeDimmer.doRampBrightness(this, DEVICE_NAME, levelCluster, onOffCluster, message)
}

onDimmer.IncrementBrightness {
	GenericZigbeeDimmer.doIncrementBrightness(this, DEVICE_NAME, levelCluster, onOffCluster, message)
}
 
onDimmer.DecrementBrightness {
	GenericZigbeeDimmer.doDecrementBrightness(this, DEVICE_NAME, levelCluster, onOffCluster, message)
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the On/Off Cluster
////////////////////////////////////////////////////////////////////////////////

// called when device responds to an OnOff Read Attributes
onZigbeeMessage.Zcl.onoff.zclreadattributesresponse() {
	log.trace "{} received OnOff Attributes Response: {}", DEVICE_NAME, message
	GenericZigbeeDimmer.handleOnOffMsgWithRestore(this, DEVICE_NAME, levelCluster, onOffCluster, message)
}

// called when device asynchronously sends an OnOff Report Attributes
onZigbeeMessage.Zcl.onoff.zclreportattributes() {
	log.trace "{} received OnOff Attributes Report: {}", DEVICE_NAME, message
	GenericZigbeeDimmer.handleOnOffMsgWithRestore(this, DEVICE_NAME, levelCluster, onOffCluster, message)
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the Level Cluster
////////////////////////////////////////////////////////////////////////////////

// called when device responds to a Level Read Attributes
onZigbeeMessage.Zcl.level.zclreadattributesresponse() {
	log.trace "{} received Level Attributes Response: {}", DEVICE_NAME, message
	GenericZigbeeDimmer.handleLevelMsg(this, DEVICE_NAME, levelCluster, onOffCluster, FOLLOWS_LEVEL_SPEC, message)
}

// called when device asynchronously sends a Level Report Attributes
onZigbeeMessage.Zcl.level.zclreportattributes() {
	log.trace "{} received Level Attributes Report: {}", DEVICE_NAME, message
	GenericZigbeeDimmer.handleLevelMsg(this, DEVICE_NAME, levelCluster, onOffCluster, FOLLOWS_LEVEL_SPEC, message)
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the Color Cluster
////////////////////////////////////////////////////////////////////////////////

// called when device responds to a Color Read Attributes
onZigbeeMessage.Zcl.color.zclreadattributesresponse() {
	log.trace "{} received Color Attributes Response: {}", DEVICE_NAME, message
	handleColorMsg(message)
}

// called when device asynchronously sends a Color Report Attributes
onZigbeeMessage.Zcl.color.zclreportattributes() {
	log.trace "{} received Color Attributes Report: {}", DEVICE_NAME, message
	handleColorMsg(message)
}

void handleColorMsg(msg) {
	def attributes = Zigbee.Message.decodeZclAttributes(msg)
	def currHue = attributes[colorCluster.ATTR_CURRENT_HUE]
	def currSat = attributes[colorCluster.ATTR_CURRENT_SATURATION]
	def timeRemaining = attributes[colorCluster.ATTR_REMAINING_TIME]
	def mode = attributes[colorCluster.ATTR_COLOR_MODE]
	
	log.debug "Current Hue:{}, Saturation:{}, Time Remaining:{}, Mode:{}", currHue, currSat, timeRemaining, mode
	
	if ((0 == currHue) && (null == currSat) && (null == timeRemaining)) {
		// device lost power and has just turned back on
		ctx.log.info "Power restored to light"
		
		// if device was previously in COLOR mode
		if (ctx.Light.COLORMODE_COLOR == ctx.Light.colormode.get()) {
			// it has been reset so restore the bulb to it's previous Color setting:
			doSetColorHueSaturationAttributes(SET_HUE_AND_SAT)
			return
		}
	}

	// only process the reported color attributes if driver light.colormode is not set to "NORMAL"
	if (Light.COLORMODE_NORMAL != Light.colormode.get()) {
		if( !waitingForRead() ) {
			log.trace "NOT waiting on a deferred read so process this color message..."
			// set Color attributes to current levels
			if ((null != currHue) && ('INVALID' != currHue.toString())) {
				if (0 > currHue) currHue = 256 + currHue	// convert signed value to positive
				// convert Zigbee 0-254 Hue value to Color Capability 0-360 value
				def newHue = Math.round( currHue / 254.0 * 360.0 )
				log.trace "Set Color.hue to:{}" , newHue
				Color.hue newHue
			}
			if ((null != currSat) && ('INVALID' != currSat.toString())) {
				if (0 > currSat) currSat = 256 + currSat	// convert signed value to positive
				// convert Zigbee 0-254 Saturation value to Color Capability 0-100 value
				def newSat = Math.round( currSat / 254.0 * 100.0 )
				log.trace "Set Color.saturation to:{}" , newSat
				Color.saturation newSat
			}
		} else {
			log.trace "Waiting on a deferred read so skip this message..."
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
// Identify Capability Closures
////////////////////////////////////////////////////////////////////////////////

// method defined in the Identify capability
onIdentify.Identify {
	log.trace "Driver received onIdentify.Identify"
	// ask the device to identify itself by flashing ON and OFF
	identCluster.identifyCmd( IDENT_PERIOD_SECS )

	// send a response so event processing completes and next event can be handled
	sendResponse 'ident:IdentifyResponse', ['result':true]
}


////////////////////////////////////////////////////////////////////////////////
// DeviceOta Capability
////////////////////////////////////////////////////////////////////////////////

onEvent('DeviceOtaDeferredRead') {
   GenericZigbeeDeviceOta.doProcessDeviceOtaDeferredRead(this,DEVICE_NAME,dvcEndPoint)
}

onEvent('DeviceOtaCheckFragmentRequestTimeout') {
   GenericZigbeeDeviceOta.doProcessDeviceOtaCheckFragmentRequestTimeout(this,DEVICE_NAME)
}

onZigbeeMessage.Zcl.ota.zclreadattributesresponse() {
   GenericZigbeeDeviceOta.doHandleOtaReadAttributesResponse(this,DEVICE_NAME,otaCluster,message)
}

onZigbeeMessage.Zcl.ota.querynextimagerequest() {
   GenericZigbeeDeviceOta.doHandleQueryNextImageRequest(this,DEVICE_NAME,message)
   // since device queries next image after power is restored from power outage, trigger off this to make sure switch, level, and color settings are what we expect
	GenericZigbeeDimmer.restoreDeviceSettings(this, DEVICE_NAME, levelCluster, onOffCluster)
	restoreLastColor()
}

onZigbeeMessage.Zcl.ota.imageblockrequest() {
   GenericZigbeeDeviceOta.doHandleImageBlockRequest(this,DEVICE_NAME,message)
}

onZigbeeMessage.Zcl.ota.imagePageRequest() {
   GenericZigbeeDeviceOta.doHandleImagePageRequest(this,DEVICE_NAME,message)
}

onZigbeeMessage.Zcl.ota.upgradeendrequest() {
   GenericZigbeeDeviceOta.doHandleUpgradeEndRequest(this,DEVICE_NAME,message)
}

////////////////////////////////////////////////////////////////////////////////
// Default protocol message handlers
////////////////////////////////////////////////////////////////////////////////

// default handler for ZCL messages, called if no other handlers handled the ZCL message
onZigbeeMessage(Zigbee.TYPE_ZCL) {
	if (GenericZigbeeDimmer.handleReportingCnfgResponses(this, DEVICE_NAME, DVC_ENDPOINT, message, MIN_ONOFF_RPT, MAX_ONOFF_RPT, MIN_LVL_RPT, MAX_LVL_RPT)) {
		return
	}

	def zclMsg = Zigbee.Message.toZcl(message)
	def profile = zclMsg.getProfileId()
	def clusterId = zclMsg.getClusterId()
	def msgId = zclMsg.getZclMessageId()
	def endpoint = zclMsg.getEndpoint()
	def flags = zclMsg.getFlags()
	byte[] data = zclMsg.getPayload()

	log.debug "Driver received unhandled zigbee ZCL message Profile:{}, ClusterId:{}, MsgId:{}, EndPoint:{}, Flags:{}, Data:{}", profile, clusterId, msgId, endpoint, flags, data
}


boolean waitingForRead() {
	if (null == vars[KEY_WAIT4READ])
		vars[KEY_WAIT4READ] = false
	return vars[KEY_WAIT4READ]
}

void restoreLastColor() {
	log.trace "{} restoring last color", DEVICE_NAME
	byte hue = getLastHue()
	byte sat = getLastSaturation()
	log.trace "moveToHueAndSaturation [Hue:{}, Saturation:{}, Seconds:{}]", hue, sat, DFLT_CLR_TRANS_SECS
	colorCluster.moveToHueAndSaturation(hue, sat, DFLT_CLR_TRANS_SECS)
}

byte getLastSaturation() {
	if (null == vars[KEY_LAST_SAT])
	 	vars[KEY_LAST_SAT] = Math.round( ((new Double(DFLT_COLOR_SATURATION)) / 100.0) * 254.0 )
	return vars[KEY_LAST_SAT]
}

byte getLastHue() {
	 if (null == vars[KEY_LAST_HUE])
	 	vars[KEY_LAST_HUE] = Math.round( ((new Double(DFLT_COLOR_HUE)) / 360.0) * 254.0 )
	return vars[KEY_LAST_HUE]
}

