/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * ZigBee Driver for the Nyce Ceiling Motion Sensor
 *
 * NYCE’s wireless Ceiling Motion Sensor combines the features of a ceiling-mounted Motion Sensor and a ZigBee (802.15.4) 
 * radio into a single device. Packed with intelligent HVAC features, the Ceiling Motion Sensor expands your network’s 
 * possibilities – monitoring the environment and reporting on motion anywhere within the home - and all without any wires.
 * 
 * SPECIFICATIONS:
 *  - Battery Voltage 1.5VDC Alkaline
 *  - Battery Cell 2 x AAA
 *  - Battery Life Up to 5 years
 *  - Ambient Temperature +14 to +122F, -10 to +50C
 *  - Detection Range 90° cone, 5m (16.4’)
 *  - Communication ZigBee, HA1.2 Compliant
 *  - Communication Range Up to 125m (400’) open field
 *  
 *  PAIRING INSTRUCTIONS:
 *  - http://nycesensors.com/wp-content/uploads/2015/07/NCZ-3043-Ceiling-Motion-Sensor-Installation-Guide-2015-07-29.pdf
 * 
 * 02/11/16 - Update driver to only try setting IAS CIE Address a maximum of 100 times with progressive back-off, and to stop
 *            if receiving "Request Denied" and simply verify address written matches Hub's.
 *
 */
import groovy.transform.Field

driver			"ZBNyceCeilingMotionSensor"
description		"Driver for the Nyce Ceiling Motion Sensor"
version			"1.0"
protocol		"ZIGB"
deviceTypeHint	"Motion"
productId		"9666c0"
vendor 			"Nyce Sensors"
model 			"NCZ-3043"

matcher			'ZIGB:manufacturer': 0x10B9, 'ZIGB:vendor': 'NYCE', 'ZIGB:model': '3043'

capabilities	'DevicePower', 'Motion', 'Identify'


// Manufacturer ID:       0x10B9
// Manufacturer:          Nyce
// Model:                 NCZ-3043
// Power Source:          
//
// 1 End Point
//
// Profile ID:  0x0104  ZigBee HA
// IN Clusters
//   0x0000     Basic
//   0x0001     Power Configuration
//   0x0003     Identify
//   0x0020     Poll Control
//   0x0406     Occupancy Sensing
//   0x0500     IAS Zone
// OUT Clusters
//


DevicePower.source               DevicePower.SOURCE_BATTERY
DevicePower.linecapable          false
DevicePower.backupbatterycapable false




@Field def final byte END_POINT = 1

def basicCluster = Zigbee.endpoint((byte)END_POINT).Basic
def pwrCluster   = Zigbee.endpoint((byte)END_POINT).Power
def identCluster = Zigbee.endpoint((byte)END_POINT).Identify
def zoneCluster  = Zigbee.endpoint((byte)END_POINT).IasZone
def pollCluster  = Zigbee.endpoint((byte)END_POINT).PollControl
def occupancyCluster = Zigbee.endpoint((byte)END_POINT).OccupancySensing



@Field def dvcEndPoint = Zigbee.endpoint((byte)END_POINT)


// constants used if setting battery reporting interval
def final short PROFILE_HA              = 0x0104

def final short CLUSTER_PWR_CNFG        = 0x0001
def final short CLUSTER_POLL_CONTROL    = 0x0020


def final CMD_CNFG_RPT 					= 0x06				// General Command Frame - Configure Reporting
def final CMD_WRT_ATTR 					= 0x02				// General Command Frame - Write Attributes

def final short ATTR_SW_BLD_ID          = 0x4000

// operational constants
def final OFFLINE_TIMEOUT_SECS              = 600        // 10 minutes
@Field def final long WRITE_IAS_CIE_DELAY   = 5000
@Field def final long ZONE_ENROLL_DELAY     = 5000
@Field def final long MAX_IAS_CIE_WRITES    = 100	    // Maximum attempts to try and write the IAS CIE Address
@Field def final long MAX_ZONE_ENROLLS      = 100	    // Maximum attempts to try and enroll the device in a Zone
@Field def final short MAX_STATUS_CHNG_DELAY = 120	     // Maximum delay in Status Change Notifications processed, in quarter-seconds


@Field def final String CURRENT_NAME = 'Zyce Ceiling Motion Sensor'

////////////////////////////////////////////////////////////////////////////////
// Driver lifecycle callbacks
////////////////////////////////////////////////////////////////////////////////


onAdded {
	log.debug "{} device added.", CURRENT_NAME
	
	// set default attribute values
	DevicePower.source               DevicePower.SOURCE_BATTERY
	DevicePower.linecapable          false
	DevicePower.backupbatterycapable true
	DevicePower.sourcechanged        ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
	
	Motion.motion                    Motion.MOTION_NONE
	Motion.motionchanged             ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())

	
	// Bind all of the command clusters on the enpoints we need
//	Zigbee.bindAll()
	Zigbee.bindEndpoints(
		basicCluster.bindServerCluster(),
		pwrCluster.bindServerCluster(),
		pollCluster.bindServerCluster(),
		identCluster.bindServerCluster(),
		zoneCluster.bindServerCluster(),
		occupancyCluster.bindServerCluster()
		)
 
	// initialize flags to track successfully configuring the device
	vars.'writeIasCieCnt' = 0
	vars.'zoneEnrollCnt' = 0
	
	// set long poll interval to 20 quarter seconds, and short poll interval to 2 quarter seconds
	pollCluster.setLongPollInterval((int)20)
	pollCluster.setShortPollInterval((short)2)

	// write the IAS CIE Address now
	zoneCluster.zclWriteAttributes( [(zoneCluster.ATTR_IAS_CIE_ADDRESS): Zigbee.Data.encodeIeee(Zigbee.Hub.eui64)] )
	// and schedule a followup write in case first write fails
	Scheduler.scheduleIn 'doWriteIasCie', WRITE_IAS_CIE_DELAY
}


onConnected {
	log.debug "{} device connected.", CURRENT_NAME
	
	// set long poll interval to 20 quarter seconds, and short poll interval to 2 quarter seconds
	pollCluster.setLongPollInterval((int)20)
	pollCluster.setShortPollInterval((short)2)

	// read current Basic attributes, specifically interested in custom Software Build ID
	basicCluster.zclReadAttributes(
		basicCluster.ATTR_ZCL_VERSION,
		basicCluster.ATTR_STACK_VERSION,
		basicCluster.ATTR_POWER_SOURCE,
		ATTR_SW_BLD_ID )
	
	// read current Power attributes
	pwrCluster.zclReadAttributes(
		pwrCluster.ATTR_BATTERY_VOLTAGE,
		pwrCluster.ATTR_BATTERY_VOLTAGE_MIN_THRESHOLD,
		pwrCluster.ATTR_BATTERY_QUANTITY )
	
	// read current IAS Zone attributes (if needed)
	zoneCluster.zclReadAttributes(
		zoneCluster.ATTR_ZONE_STATE,
		zoneCluster.ATTR_ZONE_TYPE,
		zoneCluster.ATTR_ZONE_STATUS,
		zoneCluster.ATTR_IAS_CIE_ADDRESS )

	// read current Poll Control attributes (if needed)
	pollCluster.zclReadAttributes(
		pollCluster.ATTR_CHECKIN_INTERVAL,
		pollCluster.ATTR_LONG_POLL_INTERVAL,
		pollCluster.ATTR_SHORT_POLL_INTERVAL )
	
	// read current Identity attributes (we only do this because Iris 1 does)
		identCluster.zclReadAttributes(
			identCluster.ATTR_IDENTIFY_TIME )
	
		// read current Occupancy Sensing attributes (if needed).  Device is not a passive infrared sensor (PIR), but uses those attributes
		occupancyCluster.zclReadAttributes(
			occupancyCluster.ATTR_OCCUPANCY,
			occupancyCluster.ATTR_OCCUPANCY_SENSOR_TYPE,
			occupancyCluster.ATTR_PIR_OCCUPIED_TO_UNOCCUPIED_DELAY,
			occupancyCluster.ATTR_PIR_UNOCCUPIED_TO_OCCUPIED_DELAY,
			occupancyCluster.ATTR_PIR_UNOCCUPIED_TO_OCCUPIED_THRESHOLD )

	// configure reporting of PowerConfig cluster BatteryVoltage
	byte[] rptPwrCnfgBytes = [
		// Dir (0x00)
		0x00,
		// Attr Id (0x0020) Battery Voltage
		0x20, 0x00,
		// Attr Data Type (0x20) Unsigned 8-Bit Int
		0x20,
		// Min Interval (0x003C) 60 secs
		0x3C, 0x00,
		// Max Interval (0x0078) 120 secs
		0x78, 0x00,
		// Reportable Change (0x01)
		0x01 ]
	Zigbee.send(
		"cluster" : CLUSTER_PWR_CNFG,
		"command" : CMD_CNFG_RPT,
		"profile" : PROFILE_HA,
		"endpoint" : END_POINT,
		"clusterspecific" : false,
		"defaultresponse" : true,
		"data" : rptPwrCnfgBytes )


	// write Poll Control cluster Checkin Interval
	byte[] wrtChkIntvlBytes = [
		// Attr Id (0x0000) Checkin Interval
		0x00, 0x00,
		// Attr Data Type (0x23) Unsigned 32- bit integer
		0x23,
		// Attr Data (0x000001E0) 480 quarter-seconds
		0xE0, 0x01, 0x00, 0x00 ]
	Zigbee.send(
		"cluster" : CLUSTER_POLL_CONTROL,
		"command" : CMD_WRT_ATTR,
		"profile" : PROFILE_HA,
		"endpoint" : END_POINT,
		"clusterspecific" : false,		// using general Write Attribute command
		"defaultresponse" : true,
		"data" : wrtChkIntvlBytes)

	
	// set recommended offline timeout interval
	Zigbee.setOfflineTimeout( OFFLINE_TIMEOUT_SECS )
	
}


onDisconnected {
	log.debug "{} device disconnected.", CURRENT_NAME
}


onRemoved {
	log.debug "{} device removed.", CURRENT_NAME
}

onEvent('doWriteIasCie') {
	if ((0 <= vars.'writeIasCieCnt') && (MAX_IAS_CIE_WRITES > vars.'writeIasCieCnt')) {
		vars.'writeIasCieCnt'++
		log.debug "Write IAS CIE Address attempt:{}", vars.'writeIasCieCnt'
		zoneCluster.zclWriteAttributes( [(zoneCluster.ATTR_IAS_CIE_ADDRESS): Zigbee.Data.encodeIeee(Zigbee.Hub.eui64)] )
		// schedule to write again in case this write fails
		Scheduler.scheduleIn 'doWriteIasCie', (WRITE_IAS_CIE_DELAY * vars.'writeIasCieCnt')
	}
}
 
onEvent('doZoneEnroll') {
	if ((0 <= vars.'zoneEnrollCnt') && (MAX_ZONE_ENROLLS > vars.'zoneEnrollCnt')) {
		vars.'zoneEnrollCnt'++
		log.debug "Zone Enrollment attempt:{}", vars.'zoneEnrollCnt'
		zoneCluster.zoneEnrollResponse((byte)0x00, (byte)0xFF)
		// schedule to send again in case this enrollment fails
		Scheduler.scheduleIn 'doZoneEnroll', (ZONE_ENROLL_DELAY * vars.'zoneEnrollCnt')
	}
}



////////////////////////////////////////////////////////////////////////////////
// Handling of the Power Configuration Cluster
////////////////////////////////////////////////////////////////////////////////

void handlePowerMsg(Object cluster, Object msg) {
	def attributes = Zigbee.Message.decodeZclAttributes(msg)
	def battVolt = attributes[cluster.ATTR_BATTERY_VOLTAGE]
	def battMinThreshold = attributes[cluster.ATTR_BATTERY_VOLTAGE_MIN_THRESHOLD]
	def battAlarmMask = attributes[cluster.ATTR_BATTERY_ALARM_MASK]
	log.trace "BatteryVoltage:{}, Min Thrshld:{}, Alarm Mask:{}", battVolt, battMinThreshold, battAlarmMask

	if ( (null != battAlarmMask) && ((byte)battAlarmMask & cluster.BATTERY_ALARM_MASK_VOLTAGE_TOO_LOW) ) {		// battery alarm mask, bit 0, 1 = battery voltage too low
		log.debug "Alarm: Battery voltage too low"
	}

	double minVolts = (null != battMinThreshold) ? (battMinThreshold / 10.0) : 2.1		// default to 2.1 volts
	double nomVolts = 3.0

	if ((null != battVolt) && ('INVALID' != battVolt.toString())) {
		// battery Voltage is reported in tenths of Volts
		double volts = (battVolt / 10.0)
		log.trace "Battery Volts:{}", volts
		// battery percentage = (100 / nominal - minimum) * ( actual - minumum )
		if (0 < (nomVolts - minVolts)) {	// prevent division by zero
			double battPercent = (100.0 / (nomVolts - minVolts) * (volts - minVolts))
			battPercent =  (100.0 < battPercent) ? 100.0 : battPercent		// limit maximum to 100%
			battPercent =  (0.0 > battPercent) ? 0.0 : battPercent			// limit minimum to 0%
			int intBattPercent = battPercent
			log.debug "Battery Percent:{}", intBattPercent
			DevicePower.battery intBattPercent
		}
	}
}

// called when device asynchronously sends a Power Report Attributes
onZigbeeMessage.Zcl.power.zclreadattributesresponse() {
	log.trace "Driver received Power Attributes Response:{}", message
	handlePowerMsg(pwrCluster, message)
}

// called when device asynchronously sends a Power Report Attributes
onZigbeeMessage.Zcl.power.zclreportattributes() {
	log.trace "Driver received Power Attributes Report:{}", message
	handlePowerMsg(pwrCluster, message)
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the Poll Control Cluster
////////////////////////////////////////////////////////////////////////////////

void handlePollCrtlMsg(Object cluster, Object msg) {
	def attributes = Zigbee.Message.decodeZclAttributes(msg)
	def checkin = attributes[cluster.ATTR_CHECKIN_INTERVAL]
	def longPoll = attributes[cluster.ATTR_LONG_POLL_INTERVAL]
	def shortPoll = attributes[cluster.ATTR_SHORT_POLL_INTERVAL]
	log.trace "CheckinInterval:{}, LongPoll:{}, ShortPoll:{}", checkin, longPoll, shortPoll
}

// called when device responds to a Poll Control Read Attributes
onZigbeeMessage.Zcl.pollcontrol.zclreadattributesresponse() {
	log.trace "Driver received Poll Control Attributes Response:{}", message
	handlePollCrtlMsg(pollCluster, message)
}

// called when device asynchronously sends a Poll Control Report Attributes
onZigbeeMessage.Zcl.pollcontrol.zclreportattributes() {
	log.trace "Driver received Poll Control Attributes Report:{}", message
	handlePollCrtlMsg(pollCluster, message)
}

// called when device asynchronously sends a Poll Control Checkin
onZigbeeMessage.Zcl.pollcontrol.CheckIn() {
	log.trace "Driver received Poll Control Checkin:{}", message
	// tell device to resume without short polling
	pollCluster.checkInResponse( (byte)0x00, (short)0x0000 )
}




////////////////////////////////////////////////////////////////////////////////
// Handling of the IAS Zone Cluster
////////////////////////////////////////////////////////////////////////////////

// shared code for processing the zone status attribute
void processZoneStatus(Object cluster, int zoneStatus, int delay) {	
	// this device seems to use Alarm 1 to indicate motion
	def prevMotion = Motion.motion.get()
	if ( zoneStatus & cluster.ZONE_STATUS_ALARM2 ) {
		log.debug "Alarm2 Set (Motion Detected)"
		if (MAX_STATUS_CHNG_DELAY >= delay) {
			Motion.motion Motion.MOTION_DETECTED
		}
	} else {
		log.debug "Alarm2 Clear (No Motion)"
		if (MAX_STATUS_CHNG_DELAY >= delay) {
			Motion.motion Motion.MOTION_NONE
		}
	}
	// if motion state changed, capture timestamp
	if ((MAX_STATUS_CHNG_DELAY >= delay) && (Motion.motion.get() != prevMotion)) {
		Motion.motionchanged new Date()
	}
	
	if ( zoneStatus & cluster.ZONE_STATUS_TAMPER ) {
		log.trace "Tampered"
	} else {
		log.trace "Not Tampered"
	}
	
	if ( zoneStatus & cluster.ZONE_STATUS_BATTERY ) {
		log.debug "Low Battery"
	} else {
		log.trace "Battery OK"
	}
}

// shared code for handling a Zone ReadAttributesResponse, or asynchronous ReportAttributes
void handleZoneMsg(Object cluster, Object msg) {
	def attributes = Zigbee.Message.decodeZclAttributes(msg);
	def zoneState = attributes[cluster.ATTR_ZONE_STATE]
	def zoneType = attributes[cluster.ATTR_ZONE_TYPE]
	def zoneStatus = attributes[cluster.ATTR_ZONE_STATUS]
	def iasCieAddr = attributes[cluster.ATTR_IAS_CIE_ADDRESS]
	log.debug "ZoneState:{}, ZoneType:{}, ZoneStatus:{}, IAS CIE Addr:{}", zoneState, zoneType, zoneStatus, iasCieAddr
	processZoneStatus cluster, zoneStatus, 0
	verifyCIEAddr cluster, iasCieAddr
}

// sends a ZoneEnrollResponse, either asychronously or in response to a ZoneEnrollRequest
void sendZoneEnrollment(Object cluster) {
	def byte enrollResponseCode = 0x00	// success
	def byte zoneId = 0xFF
	cluster.zoneEnrollResponse( enrollResponseCode, zoneId )
}

void verifyCIEAddr(Object cluster, addr) {
	log.debug "Reported IAS CIE Address is:{}", addr
	def hubAddr = Zigbee.Data.encodeIeee(Zigbee.Hub.eui64).dataValue
	log.debug "Hub IEEE Address is:{}", hubAddr
	
	if ((null == addr) || ('INVALID' == addr.toString()) || (8 != addr.size())) {
		log.warn "IAS CIE Address not set."
	} else {
		if (addr != hubAddr) {
			log.error "IAS CIE Address not set to hub address."
		} else {
			log.debug "IAS CIE Address is set to hub address."
		}
	}
}

// called when device responds to a IAS Zone Read Attributes
onZigbeeMessage.Zcl.iaszone.zclreadattributesresponse() {
	log.debug "Driver received IAS Zone Attributes Response:{}", message
	handleZoneMsg(zoneCluster, message)
	// any time we get a response to reading the IAS Zone attributes, also asynchronously send a ZoneEnrollResponse
	sendZoneEnrollment zoneCluster
}

// called in response to IAS Zone Write Attributes
onZigbeeMessage.Zcl.iaszone.zclwriteattributesresponse() {
	log.debug "Driver received IAS Zone write attributes response:{}", message
	
	def zclMsg = Zigbee.Message.toZcl(message)
	byte[] data = zclMsg.getPayload()
	if ((null != data) && (1 <= data.size())) {
		if (0x00 == data[0]) {
			log.debug "IAS Zone Write Attributes Success"
			vars.'writeIasCieCnt' = -1		// set to -1 once successfully written
			// now try sending ZoneEnrollment
			Scheduler.defer 'doZoneEnroll'
		} else if (0x70 == data[0]) {			// REQUEST_DENIED
			log.warn "IAS Zone Write Attributes REQUEST DENIED"
			// read the address to make sure it is correct
			zoneCluster.zclReadAttributes(
				zoneCluster.ATTR_ZONE_STATE,
				zoneCluster.ATTR_ZONE_TYPE,
				zoneCluster.ATTR_ZONE_STATUS,
				zoneCluster.ATTR_IAS_CIE_ADDRESS )
	
			vars.'writeIasCieCnt' = -1		// set to -1 because won't succeed until device is factory reset
		} else {
			log.warn "IAS Zone Write Attributes FAILED!!!"
		}
	}
}
 
// called when device asynchronously sends a IAS Zone Report Attributes
onZigbeeMessage.Zcl.iaszone.zclreportattributes() {
	log.debug "Driver received IAS Zone Attributes Report:{}", message
	handleZoneMsg(zoneCluster, message)
}

// called when the device wants to enroll a zone
onZigbeeMessage.Zcl.iaszone.ZoneEnrollRequest() {
	log.debug "Driver received IasZone ZoneEnrollRequest:{}", message
	
	// see https://eyeris.atlassian.net/wiki/display/I2D/IasZone
	def rqst = Zigbee.Message.decodeZcl(message)
	int zoneType = rqst.getZoneType()
	int mfgCode = rqst.getManufacturerCode()
	log.debug "ZoneType:{}, MfgCode:{}", zoneType, mfgCode
	// send a ZoneEnrollResponse
	sendZoneEnrollment zoneCluster
}


// called when zone status changes
onZigbeeMessage.Zcl.iaszone.ZoneStatusChangeNotification() {
	log.debug "Driver received IasZone ZoneStatusChangeNotification:{}", message
	
	// we received a Zone Status Change, so mark Zone Enrollment as done
	vars.'zoneEnrollCnt' = -1
	vars.'writeIasCieCnt' = -1
	
	// get the message data bytes so we can look at 'delay', if any
	byte[] data = Zigbee.Message.toZcl(message).getPayload()
	log.debug "Data [$data]"
	def int delay = 0
	if ((null != data) && (6 <= data.size())) {
		delay = (int)((data[5] & 0xff) << 8) | (int)(data[4] & 0xff)
	}

	// see https://eyeris.atlassian.net/wiki/display/I2D/IasZone
	def notification = Zigbee.Message.decodeZcl(message)
	int zoneStatus = notification.getZoneStatus()
	int extStatus = notification.getExtendedStatus()
	log.debug "ZoneStatus:{}, ExtendedStatus:{}, Delay (1/4 secs):{}", zoneStatus, extStatus, delay
	processZoneStatus zoneCluster, zoneStatus, delay
	if (MAX_STATUS_CHNG_DELAY < delay) {
		// read current IAS Zone attributes since we just received a significantly 'delayed' one
		zoneCluster.zclReadAttributes(
			zoneCluster.ATTR_ZONE_STATE,
			zoneCluster.ATTR_ZONE_TYPE,
			zoneCluster.ATTR_ZONE_STATUS,
			zoneCluster.ATTR_IAS_CIE_ADDRESS )
	}
}




////////////////////////////////////////////////////////////////////////////////
// Handling of the Occupancy Sensing Cluster
////////////////////////////////////////////////////////////////////////////////

void handleOccupancyMsg(Object cluster, Object msg) {
	def attributes = Zigbee.Message.decodeZclAttributes(msg)
	def occ = attributes[cluster.ATTR_OCCUPANCY]
	def sensorType = attributes[cluster.ATTR_OCCUPANCY_SENSOR_TYPE]
	def sensitivity = attributes[cluster.ATTR_PIR_OCCUPIED_TO_UNOCCUPIED_DELAY]		// unsigned 16 bit, 0 (low sensitivity) - 2 (high sensitivity)
	def delaySeconds = attributes[cluster.ATTR_PIR_UNOCCUPIED_TO_OCCUPIED_DELAY]	// unsigned 16 bit, minimum seconds the device must stay in a state before reporting that state, default 0
	def reportingIntervalMinutes = attributes[cluster.ATTR_PIR_UNOCCUPIED_TO_OCCUPIED_THRESHOLD]	// unsigned 8 bit, in minutes, default 240
	log.debug "Occupancy:{}, SensorType:{}, Sensitivity (0:low - 2:high):{}, State Change Delay Seconds:{}, Reporting Interval Minutes:{}",
			occ, sensorType, sensitivity, delaySeconds, reportingIntervalMinutes
}

// called when device responds to an Occupancy Sensing Read Attributes
onZigbeeMessage.Zcl.occupancysensing.zclreadattributesresponse() {
	log.debug "Driver received Occupancy Sensing Attributes Response:{}", message
	handleOccupancyMsg(occupancyCluster, message)
}

// called when device asynchronously sends an Occupancy Sensing Report Attributes
onZigbeeMessage.Zcl.occupancysensing.zclreportattributes() {
	log.debug "Driver received Occupancy Sensing Attributes Report:{}", message
	handleOccupancyMsg(occupancyCluster, message)
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the Basic Cluster
////////////////////////////////////////////////////////////////////////////////

onZigbeeMessage.Zcl.basic.zclreadattributesresponse() {
	log.debug "Nyce Tilt Sensor driver received Basic Attributes Response:{}", message
	def attributes = Zigbee.Message.decodeZclAttributes(message)
	def zclVers = attributes[basicCluster.ATTR_ZCL_VERSION]
	def stackVers = attributes[basicCluster.ATTR_STACK_VERSION]
	def pwrSrc = attributes[basicCluster.ATTR_POWER_SOURCE]
	def softwareBuildId = attributes[ATTR_SW_BLD_ID]		// this value is sent as ASCII string
	log.debug "ZCL-Ver:{}, Stack-Ver:{}, PwrSrc:{}, SoftwareBuildId:{}", zclVers, stackVers, pwrSrc, softwareBuildId
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the Indetify Cluster
////////////////////////////////////////////////////////////////////////////////

onZigbeeMessage.Zcl.identify.zclreadattributesresponse() {
	log.debug "Nyce Tilt Sensor driver received Identify Attributes Response:{}", message
	def attributes = Zigbee.Message.decodeZclAttributes(message)
	def val = attributes[identCluster.ATTR_IDENTIFY_TIME]
	log.debug "Ident Time:{}", val
}



////////////////////////////////////////////////////////////////////////////////
// Default protocol message handlers
////////////////////////////////////////////////////////////////////////////////

// default handler for ZCL messages, called if no other handlers handled the ZCL message
onZigbeeMessage(Zigbee.TYPE_ZCL) {
	log.trace "Driver received zigbee ZCL message:{}", message
	def zclMsg = Zigbee.Message.toZcl(message)
	// get Information about the message
	def profile = zclMsg.getProfileId()
	def clusterId = zclMsg.getClusterId()
	def msgId = zclMsg.getZclMessageId()
	def endpoint = zclMsg.getEndpoint()
	def flags = zclMsg.getFlags()
	// get the message data
	byte[] data = zclMsg.getPayload()
	
	// check that IAS Zone Write Attributes response is success (no helper for this)
	if ((0x0104 == profile) && (0x0500 == clusterId) && (0x04 == msgId)) {
		log.debug "IAS Zone Write Attributes Response:${data}"
		if ((null != data) && (1 <= data.size()) && (0x00 != data[0])) {
			log.warn "IAS Zone Write Attributes FAILED!!!"
		}
		return
	}

	log.debug "Driver received unhandled zigbee ZCL message Profile:{}, ClusterId:{}, MsgId:{}, EndPoint:{}, Flags:{}, Data:" + data, profile, clusterId, msgId, endpoint, flags
}

