/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * ZigBee Driver for the Waxman (LeakSmart) Water Leak Sensor
 * 
 *    08/07/17 - Version 2.5 for Reflexes.
 *  
 *    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 *    IMPORTANT:
 *    It appears that even though the Liquid Detected attribute is configured to be reported, the devices do not always
 *    do so. I have found that if after pairing the device with the hub, if the batteries are removed and then re-inserted
 *    it will then report the Liquid Detected attribute every 2 minutes, like it does Temperature, and whenever the state changes.
 *    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 *  
 *    NOTE: For LEAK detection to work with reflexes (while hub is OFFLINE) may require device to have at least 
 *          firmware v38 (26 hex, in Oculus).
 *
 *    NOTE: These devices seem slow to respond (must detect water for 5-10 seconds before triggering, and then take quite
 *          some time to clear once removed from water (like 60 seconds or more).
 * 
 * FACTORY RESET
 *  - Hold down the button under the bottom cover for 10 seconds, then press again to restart pairing process.
 * 
 * PAIRING INSTRUCTIONS
 *  - Press the button under the bottom cover while the hub is in pairing mode.
 *
 * IDENTIFY
 *  - Performing an Identify operation turns the LED on and cycles the color for 3 minutes (see IDENT_PERIOD_SECS).
 * 
 * OFFLINE TIMEOUT:
 *    195 minutes
 * 
 * CHECK-IN INTERVAL:
 *    60 minutes
 * 
 * BATTERY LEVEL REPORTING:
 *  - At least every 12 hours, at most every 60 minutes
 *  - Read each time device connects (delayed 15 seconds so device does not report 'INVALID')
 * 
 * TEMPERATURE REPORTING:
 *  - At least every 3 hours, at most every 60 minutes
 *  - Read each time device connects
 *
 *
 * IN Clusters
 *   0x0000     Basic
 *   0x0001     Power Configuration
 *   0x0003     Identify
 *   0x0020     Poll Control
 *   0x0402     Temperature Measurement
 *   0x0B02     Appliance Events and Alert
 *   0xFC02     (64514) Manufacturer Specific Configuration
 *     NOTE -   Although this device supports reporting leak status on the MSP cluster
 *              it false reports on pairing, so we using appliance events / alerts instead
 * OUT Clusters
 *   0x0003     Identify
 *   0x0019     OTA Upgrade
 *
 */

import groovy.transform.Field                    // not needed to compile, but used in eclipse
import static java.util.concurrent.TimeUnit.*    // needed when running Unit Tests
import static com.iris.protocol.zigbee.zcl.Constants.*
import static com.iris.protocol.zigbee.zcl.General.*
import static com.iris.protocol.zigbee.zcl.ApplianceAlerts.*
import static com.iris.protocol.zigbee.zcl.PollControl.CheckInResponse.*

uses "zigbee.GenericZigbeeDeviceOta"


driver          "ZBWaxmanLeakSensor"
description     "Driver for the Waxman Water Sensor"
version         "2.5"
protocol        "ZIGB"
deviceTypeHint  "Water Leak"
productId       "bb4c98"
vendor          "LeakSmart"
model           "Water Sensor V2"

matcher         'ZIGB:manufacturer': 0x113B, 'ZIGB:vendor': 'Waxman', 'ZIGB:model': 'Water Sensor V2'    
matcher         'ZIGB:manufacturer': 0x113B, 'ZIGB:vendor': 'WAXMAN', 'ZIGB:model': 'leakSMART Water Sensor V2'


capabilities    'DevicePower', 'LeakH2O', 'Temperature', 'Identify', 'DeviceOta'


////////////////////////////////////////////////////////////////////////////////
// Capability Reflex Declarations
////////////////////////////////////////////////////////////////////////////////

DevicePower {
    source DevicePower.SOURCE_BATTERY
    linecapable false
    backupbatterycapable false
    bind sourcechanged to source
}

LeakH2O {
    LeakH2O.state LeakH2O.STATE_SAFE
    bind LeakH2O.statechanged to LeakH2O.state
}

Temperature {
    temperature null
}


@Field def dvcEndPoint  = Zigbee.endpoint((byte)1)

@Field def pwrCluster   = dvcEndPoint.Power
@Field def identCluster = dvcEndPoint.Identify
@Field def pollCluster  = dvcEndPoint.PollControl
@Field def tempCluster  = dvcEndPoint.TemperatureMeasurement
@Field def otaCluster   = dvcEndPoint.Ota
@Field def alertsCluster= dvcEndPoint.ApplianceAlerts




// operational constants
final short IDENT_PERIOD_SECS = 180       // number of seconds (0-600) for device to Identify itself (LED changes color) when Identify method is called

@Field final short ALERT_CODE_LEAK = 129
@Field final short ALERT_CODE_BATTERY = 130


////////////////////////////////////////////////////////////////////////////////
// Driver Reflex Declarations
////////////////////////////////////////////////////////////////////////////////

Zigbee {
    offlineTimeout 195, MINUTES

    /////////////////////////////////////////////////////////////////////////////
    // Hub Local Lifecycle
    /////////////////////////////////////////////////////////////////////////////

    poll reflex {
        on added

        bind endpoint: 1, profile: 0x0104, cluster: Zcl.ApplianceAlerts.CLUSTER_ID, server: true
        bind endpoint: 1, profile: 0x0104, cluster: Zcl.Power.CLUSTER_ID, server: true
        bind endpoint: 1, profile: 0x0104, cluster: Zcl.TemperatureMeasurement.CLUSTER_ID, server: true
    }
    
    poll reflex {
        on connected
        ordered {
            send zcl.appliancealerts.getAlerts
            
            read endpoint: 1, cluster: Zcl.Power.CLUSTER_ID, attr: Zcl.Power.ATTR_BATTERY_VOLTAGE
            read endpoint: 1, cluster: Zcl.TemperatureMeasurement.CLUSTER_ID, attr: Zcl.TemperatureMeasurement.ATTR_MEASURED_VALUE

            // configure battery level reporting at most once an hour, at least once every 12 hours
            report endpoint: 1, cluster: Zcl.Power.CLUSTER_ID, attr: pwrCluster.ATTR_BATTERY_VOLTAGE, type: Data.TYPE_UNSIGNED_8BIT, min: 3600, max: 43200

            // configure temperature reporting at most once every 60 minutes, at least once every 3 hours
            report endpoint: 1, cluster: Zcl.TemperatureMeasurement.CLUSTER_ID, attr: tempCluster.ATTR_MEASURED_VALUE, type: Data.TYPE_SIGNED_16BIT, min: 3600, max: 10800
            
            send zcl.pollcontrol.setLongPollInterval, newLongPollInterval: 24
            send zcl.pollcontrol.setShortPollInterval, newShortPollInterval: 4
        
            // Poll Control Check-In interval cannot be set on device
        }
    }
    
    match reflex {
        // for debugging
        forward
        
        // Appliance Alert
        /**
         * 02 - ZCL
         * . . . . - Message length (allow variable length messages)
         * (00|01) - Message ID
         * 03 - Flags (should this be don't care?)
         * 04 01 - 0x0104 profile
         * 02 0B - 0x0B02 cluster id
         * 01 - Endpoint (don't care?)
         * . . . . - Payload Length
         * . - Number of events
         * 81 - Water Alert
         * 1x - Present
         * . - ?
         */
        on "02 . . . . (00|01) 03 04 01 02 0B 01 . . . . . (. . .)* 81 (10|11|12|13|14|15|16|17|18|19|1A|1B|1C|1D|1F) . (. . .)*"

        set LeakH2O.state, LeakH2O.STATE_LEAK
    }

    match reflex {
        // for debugging
        forward
        
        // Appliance Alert
        /**
         * 02 - ZCL
         * . . . . - Message length (allow variable length messages)
         * (00|01) - Message ID
         * 03 - Flags (should this be don't care?)
         * 04 01 - 0x0104 profile
         * 02 0B - 0x0B02 cluster id
         * 01 - Endpoint (don't care?)
         * . . . . - Payload Length
         * 00 - No events (clear)
         */
        on "02 . . . . (00|01) 03 04 01 02 0B 01 . . . . 00 ."
        /**
         * 02 - ZCL
         * . . . . - Message length (allow variable length messages)
         * (00|01) - Message ID
         * 03 - Flags (should this be don't care?)
         * 04 01 - 0x0104 profile
         * 02 0B - 0x0B02 cluster id
         * 01 - Endpoint (don't care?)
         * . . . . - Payload Length
         * . - Number of events
         * 81 - Water Alert
         * 0x - Not present
         * . - ?
         */
        on "02 . . . . (00|01) 03 04 01 02 0B 01 . . . . . (. . .)* 81 (00|01|02|03|04|05|06|07|08|09|0A|0B|0C|0D|0F) . (. . .)*"

        set LeakH2O.state, LeakH2O.STATE_SAFE
    }

    /////////////////////////////////////////////////////////////////////////////
    // Process Poll Control Check-Ins locally on the hub.
    /////////////////////////////////////////////////////////////////////////////

    match reflex {
        on zcl.pollcontrol.checkIn
        // tell device to resume without short polling
        send zcl.pollcontrol.checkInResponse, startFastPolling: START_FAST_POLLING_DISABLED, fastPollTimeout: 0
    }
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the Power Configuration Cluster
////////////////////////////////////////////////////////////////////////////////

void handlePowerMsg(Object cluster, Object msg) {
    def attributes = Zigbee.Message.decodeZclAttributes(msg)
    def battVolt = attributes[cluster.ATTR_BATTERY_VOLTAGE]
    log.trace "BatteryVoltage:{}", battVolt

    double minVolts = 2.1
    double nomVolts = 4.5
    
    if ((null != battVolt) && ('INVALID' != battVolt.toString())) {
        // battery Voltage is reported in tenths of Volts
        double volts = (battVolt / 10.0)
        log.trace "Battery Volts:{}", volts
        // battery percentage = (100 / nominal - minimum) * ( actual - minumum )
        if (0 < (nomVolts - minVolts)) {    // prevent division by zero
            double battPercent = (100.0 / (nomVolts - minVolts) * (volts - minVolts))
            battPercent = (100.0 < battPercent) ? 100.0 : battPercent        // limit maximum to 100%
            battPercent = (0.0 > battPercent) ? 0.0 : battPercent            // limit minimum to 0%
            int intBattPercent = battPercent
            log.trace "Battery Percent:{}", intBattPercent
            DevicePower.battery intBattPercent
        }
    }
}

// called when device responds to a Power Read Attributes
onZigbeeMessage.Zcl.power.zclreadattributesresponse() {
    log.trace "Driver received Power Attributes Response:{}", message
    handlePowerMsg(pwrCluster, message)
}

// called when device asynchronously sends a Power Report Attributes
onZigbeeMessage.Zcl.power.zclreportattributes() {
    log.trace "Driver received Power Attributes Report:{}", message
    handlePowerMsg(pwrCluster, message)
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the Poll Control Cluster
////////////////////////////////////////////////////////////////////////////////

void handlePollCrtlMsg(Object cluster, Object msg) {
    def attributes = Zigbee.Message.decodeZclAttributes(msg)
    def checkin = attributes[cluster.ATTR_CHECKIN_INTERVAL]
    def longPoll = attributes[cluster.ATTR_LONG_POLL_INTERVAL]
    def shortPoll = attributes[cluster.ATTR_SHORT_POLL_INTERVAL]
    log.trace "CheckinInterval:{}, LongPoll:{}, ShortPoll:{}", checkin, longPoll, shortPoll
}

// called when device responds to a Poll Control Read Attributes
onZigbeeMessage.Zcl.pollcontrol.zclreadattributesresponse() {
    log.trace "Driver received Poll Control Attributes Response:{}", message
    handlePollCrtlMsg(pollCluster, message)
}

// called when device asynchronously sends a Poll Control Report Attributes
onZigbeeMessage.Zcl.pollcontrol.zclreportattributes() {
    log.trace "Driver received Poll Control Attributes Report:{}", message
    handlePollCrtlMsg(pollCluster, message)
}


////////////////////////////////////////////////////////////////////////////////
// Handling of the Temperature Measurement Cluster
////////////////////////////////////////////////////////////////////////////////

void handleTemperatureMeasurement(Object cluster, Object msg) {
    def attributes = Zigbee.Message.decodeZclAttributes(msg);
    def tempVal = attributes[cluster.ATTR_MEASURED_VALUE]
    log.trace "Temp:{}", tempVal
    
    if ((null != tempVal) && ('INVALID' != tempVal.toString())) {
        // temperature is reported in 100ths degree C, so convert to C and save
        double tempC = tempVal
        tempC /= 100
        log.trace "Set Temp:{}", tempC
        Temperature.temperature tempC
    }
}

// called when device responds to a Temperature Measurement Read Attributes
onZigbeeMessage.Zcl.temperaturemeasurement.zclreadattributesresponse() {
    log.trace "Driver received Temperature Measurement Attributes Response:{}", message
    handleTemperatureMeasurement(tempCluster, message)
}

// called when device asynchronously sends a Temperature Measurement Report Attributes
onZigbeeMessage.Zcl.temperaturemeasurement.zclreportattributes() {
    log.trace "Driver received Temperature Measurement Attributes Report:{}", message
    handleTemperatureMeasurement(tempCluster, message)
}


////////////////////////////////////////////////////////////////////////////////
// DeviceOta Capability
////////////////////////////////////////////////////////////////////////////////

onEvent('DeviceOtaDeferredRead') {
    GenericZigbeeDeviceOta.doProcessDeviceOtaDeferredRead(this, DEVICE_NAME, dvcEndPoint)
}

onEvent('DeviceOtaCheckFragmentRequestTimeout') {
    GenericZigbeeDeviceOta.doProcessDeviceOtaCheckFragmentRequestTimeout(this, DEVICE_NAME)
}

onZigbeeMessage.Zcl.ota.zclreadattributesresponse() {
    GenericZigbeeDeviceOta.doHandleOtaReadAttributesResponse(this, DEVICE_NAME, otaCluster, message)
}

onZigbeeMessage.Zcl.ota.querynextimagerequest() {
    GenericZigbeeDeviceOta.doHandleQueryNextImageRequest(this, DEVICE_NAME, message)
}

onZigbeeMessage.Zcl.ota.imageblockrequest() {
    GenericZigbeeDeviceOta.doHandleImageBlockRequest(this, DEVICE_NAME, message)
}

onZigbeeMessage.Zcl.ota.imagePageRequest() {
    GenericZigbeeDeviceOta.doHandleImagePageRequest(this, DEVICE_NAME, message)
}

onZigbeeMessage.Zcl.ota.upgradeendrequest() {
    GenericZigbeeDeviceOta.doHandleUpgradeEndRequest(this, DEVICE_NAME, message)
}


////////////////////////////////////////////////////////////////////////////////
// Identify Capability Closures
////////////////////////////////////////////////////////////////////////////////

// method defined in the Identify capability
onIdentify.Identify {
    log.debug "Driver received onIdentify.Identify:{}", message
    // ask the device to identify itself for the defined interval
    identCluster.identifyCmd( IDENT_PERIOD_SECS )
    sendResponse 'ident:IdentifyResponse', ['result':true]
}

////////////////////////////////////////////////////////////////////////////////
// Alerts protocol message handlers
////////////////////////////////////////////////////////////////////////////////

// Reflexes currently cannot handle these Appliance Alert messages, since the alerts are a collection passed inside the message,
// so we handle them here, but the device should also be configured to report changes to the Liquid Detected Attribute (0x0055)
// on the 0xFC02 Manufacturer Specific cluster, and the reflexes should process that, so this is just here as a backup in case the
// attribute changes are not being reported.

void handleAlertsMessage(Object cluster, Object message) {
    def msg = Zigbee.Message.decodeZcl(message)
    def byte numberEvents = 0x0F & (byte)msg.getNumberAlerts()
    log.debug "Driver received [{}] alerts", numberEvents
    
    if (0 == numberEvents){
        log.debug "Alert message with 0 alerts"
        // clear leak in case we missed it being reported with a presence code of 0
        // FIXME sync reflexes? LeakH2O.state LeakH2O.STATE_SAFE
        return
    }
    
    def data = msg.getData()
    log.debug "Alert message with {} Alerts, data: {}", numberEvents, data

    //data is in 3 byte chuncks        
    for(int i = 0; i < numberEvents*3; i=i+3){
        def alertCode = data[i]
        if (0 >alertCode) alertCode = alertCode + 256
        def byte presenceCode = ((byte)(data[i+1] >>4) & 0x03)
        
        switch(alertCode){
            case ALERT_CODE_LEAK:
                // FIXME sync reflexes? LeakH2O.state  (presenceCode ? LeakH2O.STATE_LEAK : LeakH2O.STATE_SAFE)
                log.info "Leak state should be {} via reflexes", (presenceCode ? LeakH2O.STATE_LEAK : LeakH2O.STATE_SAFE)
                break
            case ALERT_CODE_BATTERY:
                if (presenceCode){
                    log.debug "{} received battery alert, setting battery percentage to zero", DEVICE_NAME
                    DevicePower.battery 0
                }
                break
            default:
                log.warn "{} received unrecognized alert code {}", DEVICE_NAME, alertCode
                break
        }
    }            
}    

onZigbeeMessage.Zcl.appliancealerts.getalertsresponse() {
    log.trace "Driver received Appliance Get Alerts Response {}", message
    handleAlertsMessage(alertsCluster, message)
}

onZigbeeMessage.Zcl.appliancealerts.alertsnotification() {
    log.trace "Driver received Appliance Alerts Notification {}", message
    handleAlertsMessage(alertsCluster, message)
}

onZigbeeMessage.Zcl.appliancealerts.eventsnotification() {
    log.trace "Driver received Appliance Events Notification {}", message
}

////////////////////////////////////////////////////////////////////////////////
// Default protocol message handlers
////////////////////////////////////////////////////////////////////////////////

// default handler for ZCL messages, called if no other handlers handled the ZCL message
onZigbeeMessage(Zigbee.TYPE_ZCL) {
    def zclMsg = Zigbee.Message.toZcl(message)
    def profile = zclMsg.getProfileId()
    def clusterId = zclMsg.getClusterId()
    def messageId = zclMsg.getZclMessageId()
    def endpoint = zclMsg.getEndpoint()
    def flags = zclMsg.getFlags()
    def payloadLen = zclMsg.getLength()
    byte[] data = zclMsg.getPayload()
    
    // capture any expected responses and log any failures
    
    if (260 == profile) {      // Home Automation Profile (0x0104)
        
        if (ZHA_CLUSTER_POWER_CONFIGURATION == clusterId && ZclConfigureReportingResponse.ID == messageId) {
            logResponse(data, "Power reporting configuration")
            return
        }
    
        if (ZHA_CLUSTER_TEMPERATURE_MEASUREMENT == clusterId && ZclConfigureReportingResponse.ID == messageId) {
            logResponse(data, "Temperature reporting configuration")
            return
        }
    
        if (ZHA_CLUSTER_POLL_CONTROL == clusterId && ZclWriteAttributesResponse.ID == messageId) {
            logResponse(data, "Poll Control configuration")
            return
        }
    
        if (ZHA_CLUSTER_POLL_CONTROL == clusterId && ZclDefaultResponse.ID == messageId) {
            log.trace "Poll Control default response"
            return
        }

        // Reflexes should handle these attribute change messages, but we have a platform handler here to log it if not
        if (0xFC02 == clusterId && ZclReportAttributes.ID == messageId) {
            log.debug "FC02 Liquid Detection Report Attribute, Size:{}, Data:{}", data.size(), data
            return
        }
    }

    log.debug "Driver received unhandled zigbee ZCL message Profile:{}, ClusterId:{}, MessageId:{}, EndPoint:{}, Flags:{}, Len:{}, Data:{}",
            profile, clusterId, messageId, endpoint, flags, payloadLen, data
}

void logResponse(data, msgType) {
    if ((null != data) && (1 <= data.size()) && (0x00 == data[0])) {
        log.trace "{} was successful: {}", msgType, data
    } else {
        log.warn "{} FAILED: {}", msgType, data
    }
}


