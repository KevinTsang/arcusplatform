/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
driver			"_MOCK_Fallback"
description	 "Fallback driver for any MOCK protocol devices"
version		  "1.0"
deviceTypeHint "dev"

// matcher that should never match a device
matcher protocol:"MOCK"

// only expose the device and device advanced capabilities
capabilities Device, 'DeviceAdvanced', 'DeviceMock'

onAdded {
	log.debug "Fallback Driver started."

	log.debug "Attributes: " + message.attributes
	
	if(message.attributes['MOCK:Capability'] != null) {
		mispaired "No mock for capability " + message.attributes['MOCK:Capability'] + " is defined"
	}
	else if(message.attributes['MOCK:ProductId'] != null) {
		mispaired "No mock for product " + message.attributes['MOCK:ProductId'] + " is defined"
	}
	else {
		mispaired "Missing Capability / ProductId matchers, can't determine driver"
	}
}

// ########### mock stuff here #####################

onDeviceMock.Connect {
  log.debug "devmock:Connect"
  connected();
  sendResponse "devmock:ConnectResponse", [:]
}

onDeviceMock.Disconnect {
  log.debug "devmock:Disconnect"
  disconnected();
  sendResponse "devmock:ConnectResponse", [:]
}

onDeviceMock.SetAttributes {
  log.debug "devmock:SetAttributes:" + message.attributes.attrs
  attributes << message.attributes.attrs;
  sendResponse "devmock:SetAttributesResponse", [:]
}


