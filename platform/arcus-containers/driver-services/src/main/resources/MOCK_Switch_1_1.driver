/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Mock driver for the Switch capability
 */
driver			"MOCK_Switch"
description		"Driver for the Mockitron Switch device"
version			"1.1"
protocol		"MOCK"
deviceTypeHint	"Switch"
productId		"671eee"
vendor 			"Mockitron"
model 			"Switch"

matcher        'MOCK:Capability' : 'Switch'
matcher        'MOCK:ProductId'  : '671eee'

capabilities	'DevicePower', 'PowerUse', 'Switch', 'Indicator', 'DeviceMock'


// ########### driver lifecycle callbacks ##################

onAdded {
	log.debug "Mockitron Switch device started."
	Device.name 'Mock Switch'
	
	// set default attribute values
	DeviceConnection.signal	74
	
	DevicePower.source                  DevicePower.SOURCE_LINE
	DevicePower.linecapable             true
	DevicePower.backupbatterycapable    false
	DevicePower.sourcechanged           ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
	
	PowerUse.instantaneous	2.1
	PowerUse.cumulative		21.4
	PowerUse.wholehome      false
	
	Switch.state			Switch.STATE_OFF
	Switch.statechanged     ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
	
	Indicator.enabled			true
	Indicator.enableSupported	false
	Indicator.indicator         Indicator.INDICATOR_ON
	Indicator.inverted          false
}
 
onConnected {
	log.debug "Mockitron Switch device connected."
	
}

onDisconnected {
	log.debug "Mockitron Switch device disconnected."
	
}

onRemoved {
	int secs = 15
	log.debug "Mockitron Switch device sleeping for " + secs + " secs before removal."
	sleep(secs * 1000)
	log.debug "Mockitron Switch device removed."
}

// ########### capability support ##################

void updateIndicator() {
	boolean indicatorMatchesSwitch = Indicator.inverted.get()	// LED Indicator matches switch power if inverted
	if (Switch.STATE_OFF == Switch.state.get()) {
		Indicator.indicator (indicatorMatchesSwitch ? Indicator.INDICATOR_OFF : Indicator.INDICATOR_ON)
	} else {
		Indicator.indicator (indicatorMatchesSwitch ? Indicator.INDICATOR_ON : Indicator.INDICATOR_OFF)
	}
}

setAttributes('swit') {
	def prevSwitch = Switch.state.get()
	attributes << message.attributes
    if ((message.attributes['swit:state']) && (Switch.state.get() != prevSwitch)) { 
        Switch.statechanged new Date()
    }
	updateIndicator()
}

setAttributes('indicator') {
	attributes << message.attributes
	updateIndicator()
}

setAttributes('pow') {
	attributes << message.attributes
 }

// ########### mock stuff here #####################

onPlatform ("devmock:Connect") {
  log.debug "devmock:Connect"
  connected();
  sendResponse "devmock:ConnectResponse", [:]
}

onPlatform ("devmock:Disconnect") {
  log.debug "devmock:Disconnect"
  disconnected();
  sendResponse "devmock:ConnectResponse", [:]
}

onPlatform ("devmock:SetAttributes") {
  log.debug "devmock:SetAttributes:" + message.attributes.attrs
  attributes << message.attributes.attrs;
  if (message.attributes.attrs['swit:state']) {
    Switch.statechanged new Date()
  }
  updateIndicator()
  sendResponse "devmock:SetAttributesResponse", [:]
}

