/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Driver for a GE/Jasco 500 Series Plug-in Outdoor Switch
 *
 */
driver			"ZWJasco14284OutdoorSwitchDriver"
description		"Driver for a GE/Jasco 14284 Plug-in Outdoor Switch"
version			"2.7"
protocol		"ZWAV"
deviceTypeHint	"Switch"
vendor 			"GE"
model 			"14284"
productId		"359d72"

matcher			'ZWAV:Manufacturer': 0x0063, 'ZWAV:ProductType': 0x4F50, 'ZWAV:ProductId': 0x3032	//GE
matcher			'ZWAV:Manufacturer': 0x0063, 'ZWAV:ProductType': 0x4F50, 'ZWAV:ProductId': 0x3033	//Jasco

capabilities	'DevicePower', 'Switch'

importCapability 'zwave/GenericZWaveVersion'

// Generic Device Class:    GENERIC_TYPE_SWITCH_BINARY
// Specific Device Class:   SPECIFIC_TYPE_POWER_SWITCH_BINARY
// Command Classes:
//		0x25   (37) Switch_Binary
//		0x27   (39) Switch_All
//      0x56   (86) CRC16 Encap
//      0x59   (89) Association Group Info
//      0x5A   (90) Device Reset Locally
//		0x5E   (94) Z-Wave+ Info
//		0x72  (114) Manufacturer_Specific
//		0x73  (115) PowerLevel
//      0x7A  (122) Firmware Update Meta Data
//		0x85 (-123) Association
//		0x86 (-122) Version

// set Defaults
// ---------------
DevicePower.source 		         DevicePower.SOURCE_LINE
DevicePower.linecapable	         true
DevicePower.backupbatterycapable false
Switch.state                     Switch.STATE_OFF

final int  POLLING_INTERVAL_SEC = 3600		// every 60 minutes, to stay in synch

final byte SWITCH_ON	= 0xff
final byte SWITCH_OFF	= 0x00
final int  OFFLINE_TIMEOUT_SECS = 10800 		// 3hr, may subject to change
final String DEVICE_NAME = "Jasco 500 Series Outdoor Switch"

onAdded {
	log.debug "{} added", DEVICE_NAME

	DevicePower.sourcechanged           ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
	Switch.statechanged                 ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
}

onConnected {
	log.debug "{} connected", DEVICE_NAME

	// get the current switch state
	ZWave.switch_binary.get()

	// These devices do send a switch_binary.report when their state is changed locally.
	// We also periodically poll in case we miss that message.
	ZWave.poll(POLLING_INTERVAL_SEC, ZWave.switch_binary.get)

	ZWave.setOfflineTimeout(OFFLINE_TIMEOUT_SECS)
}

setAttributes('swit') {
	log.debug "{} received message: {}",DEVICE_NAME, message

	def attributes = message.attributes
	for(attribute in attributes) {
		switch(attribute.key) {
			case Switch.state:
				ZWave.switch_binary.set(attribute.value == 'ON' ? SWITCH_ON : SWITCH_OFF)
				// confirm the state changed, required even with reportin
				ZWave.switch_binary.get()
				break
			default:
				log.error "{} received unrecognized attribute: {}", DEVICE_NAME, attribute
				break
		}
	}
}

onZWaveNodeInfo {
	log.debug "{} reported Node Info: {}, {}, {}, {}, {}", message.getNodeId(), message.getStatus(), message.getBasic(), message.getGeneric(), message.getSpecific()
	// All values are bytes.
 }

onZWaveMessage.switch_binary.report {
	log.debug "Received binary switch report from {}: {}",DEVICE_NAME, message
	def prevState = Switch.state.get()
	Switch.state message.command.get('value') == SWITCH_ON ? Switch.STATE_ON : Switch.STATE_OFF
	// if state changed, capture timestamp
	if (Switch.state.get() != prevState) {
		Switch.statechanged new Date()
	}
}

onZWaveMessage.zwaveplus_info.report {
	log.trace "{} sent ZWave Plus Info Report:{}", DEVICE_NAME, message
	def zwVer = message.command.get('zwaveversion')
	def roleType = message.command.get('roletype')
	def nodeType = message.command.get('nodetype')
	log.info "{} sent ZWave Plus Info, ZWave Ver:{}, RoleType:{}, NodeType:{}", DEVICE_NAME, zwVer, roleType, nodeType
}

onZWaveMessage.device_reset_locally.notification {
	log.info "{} sent Device Reset Locally Notification", DEVICE_NAME
}

onZWaveMessage {
    log.debug "{} received unhandled ZWave message {} with data {}", DEVICE_NAME, message, message.command.recvBytes
    return false;
}


