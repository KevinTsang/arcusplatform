/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Driver for a Leviton VRPA1 Plug-in Appliance Module
 *
 */
driver			"ZWLevitonVRPA1PlugInSwitchDriver"
description		"Driver for a Z-Wave Leviton VRPA1 Plug-in Switch Module"
version			"1.0"
protocol		"ZWAV"
deviceTypeHint	"Switch"
productId		"740191"
vendor 			"Leviton"
model 			"VRPA1"

matcher			'ZWAV:Manufacturer': 0x001D, 'ZWAV:ProductType': 0x1805, 'ZWAV:ProductId': 0x0334

capabilities     'DevicePower', 'Switch'

importCapability 'zwave/GenericZWaveSwitch'
importCapability 'zwave/GenericZWaveVersion'

// Device Type:
//		Binary Power Switch
//
// Command Classes:
//		0x25   (37) Switch_Binary
//		0x27   (39) Switch_All
//      0x2B   (43) Scene Activation
//      0x2C   (89) Scene Actuator Conf
//		0x72  (114) Manufacturer_Specific
//		0x73  (115) PowerLevel
//      0x77  (119) Node Naming
//		0x82 (-126) Hail
//		0x85 (-123) Association
//		0x86 (-122) Version
//		0x91 (-111) Manufacturer Proprietary

//DevicePower attributes are assumed
DevicePower.battery 			 0
DevicePower.source               DevicePower.SOURCE_LINE
DevicePower.linecapable          true
DevicePower.backupbatterycapable false

final String DEVICE_NAME        = "Leviton VRPA1 Plug-in Switch"
final int POLLING_INTERVAL_SEC  = 120		// every 120 seconds, because it does not notify us of local changes
final int OFFLINE_TIMEOUT_SECS  = 600       // 10 minutes

final byte SWITCH_ON		    = 0xff
final byte SWITCH_OFF		    = 0x00


////////////////////////////////////////////////////////////////////////////////
// Driver Lifecycle Callbacks
////////////////////////////////////////////////////////////////////////////////
  
onAdded {
	vars.'CURRENT_NAME' = DEVICE_NAME
	log.debug "${DEVICE_NAME} added with Attributes {}", message.attributes
	
	Switch.inverted                     false
	
	Indicator.enabled                   true
	Indicator.enableSupported           false		// user cannot change the Indicator.enabled attribute for this device
	Indicator.inverted                  true		// default to inverted because most people prefer that
	
	// NOTE: We try to turn device on here, but it does not actually go on, however by doing this we get the device to report
	// its correct state when we read it, otherwise it does not always appear to report the correct state until after it has been
	// set On or Off at least once.
	Switch.state Switch.STATE_ON
}

onConnected {
	log.debug "${DEVICE_NAME} connected"
	
	vars.'MAX_READBACKS' = 10				// used by GenericZWaveSwitch to limit maximum read operations
	vars.'DFLT_READBACK_DELAY' = 1000		// used by GenericZWaveSwitch to determine delay between read retries (in mSec)
	
	ZWave.poll(POLLING_INTERVAL_SEC, ZWave.switch_binary.get)

	ZWave.setOfflineTimeout(OFFLINE_TIMEOUT_SECS)
}

onDisconnected {
	log.debug "${DEVICE_NAME} disconnected"
}

onRemoved {
	log.debug "${DEVICE_NAME} removed"
}

////////////////////////////////////////////////////////////////////////////////
// Indicator Capability Closures
////////////////////////////////////////////////////////////////////////////////

setAttributes('swit') {
	log.debug "${DEVICE_NAME} received Set Switch Attributes {}", message
	
	GenericZWaveSwitch.handleSwitchState(this,DEVICE_NAME,message)
	
	def attributes = message.attributes;
	for(attribute in attributes) {
		switch(attribute.key) {
			case Switch.inverted:
				log.warn "Attempted to set Switch.inverted attribute on device that does not support it"
				break
	
			default:
				break
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
// Protocol Message Callbacks
////////////////////////////////////////////////////////////////////////////////

onZWaveMessage.switch_binary.report {
	GenericZWaveSwitch.handleBinarySwitchReport(this,DEVICE_NAME,message)
}

onZWaveNodeInfo {
	log.debug "${DEVICE_NAME} reported Node Info: {}, {}, {}, {}, {}", message.getNodeId(), message.getStatus(), message.getBasic(), message.getGeneric(), message.getSpecific()
	// devices report a Node Info every time their state is changed locally,
	// so do a Binary Switch Get to get the current state (delay this so device does not report back "busy")
	GenericZWaveSwitch.readSwitchState(this, DEVICE_NAME)
	
}

onZWaveMessage.application_status.busy {
	log.debug "${DEVICE_NAME} reported Busy"
	// when device reports that it is busy, do another Binary Switch Get, if we haven't done too many already
	GenericZWaveSwitch.readSwitchStateAgain(this, DEVICE_NAME)
}

onZWaveMessage.hail.hail {
	log.debug "${DEVICE_NAME} sent a Hail"
}

onZWaveMessage {
    log.debug "${DEVICE_NAME} received unhandled ZWave message {}", message
    return false;
}


