/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Driver for an Springs Cellular Shade
 * 
 * Springs replacement for Somphy Bridge with Native ZWave
 * 
 * NOTES: 
 * 
 * PAIRING
 * - Press and Hold Button until light flashes RED to reset device.
 * - You then have to press and hold "Button" 2 -5 seconds until light starts blinking green to start pairing 
 *   back of device until green light flashes.
 * 
 * UNPAIRING
 * - Place hub in 'unpairing' mode ( select "Remove Device").
 * - Press and hold "Button" 2 -5 seconds until light starts blinking green
 * 
 * FACTORY RESET
 * - Press and hold "Button" with paper clip until lights flash amber and shade jogs to reset ZWave, red resets travel limits also"
 * 
 */
import groovy.transform.Field

driver          "ZWSpringsCellularShadeDriver"
description     "Driver for a Springs Roller Shade"
version         "1.0"
protocol        "ZWAV"
deviceTypeHint  "Shade"
productId       "393e81"
vendor          "Springs Window Fashions"
model           "CSZ1"

matcher         'ZWAV:Manufacturer': 0x026E, 'ZWAV:ProductType': 0x4353, 'ZWAV:ProductId': 0x5A31 // Cellular Blind

capabilities	'DevicePower', 'Shade'

importCapability 'zwave/GenericZWaveBattery'		// use generic ZWave Battery handling
importCapability 'zwave/GenericZWaveVersion'

// Command Classes:
//		0x31   (49) Sensor_Multilevel
//		0x70  (112) Configuration
//		0x71  (113) Alarm (Notification)
//		0x72  (114) Manufacturer_Specific
//		0x80 (-128) Battery
//      0x84 (-124) Wake_Up
//		0x85 (-123) Association
//		0x86 (-122) Version

// set DevicePower
// ---------------
DevicePower.source 		         DevicePower.SOURCE_BATTERY
DevicePower.linecapable	         false
DevicePower.backupbatterycapable false

Shade.shadestate				Shade.SHADESTATE_OK

@Field final String DEVICE_NAME = "Springs Cellular Shade"
final int OFFLINE_TIMEOUT_SECS  = 133200     // 37 hours
final int POLLING_INTERVAL_SEC	= 43200      //  12 hours 12*3600 Seconds

@Field final String MOVE_TO_LEVEL_TIMEOUT_EVENT = 'MoveToLevelTimeout'
@Field final long   MOVE_TO_LEVEL_TIMEOUT_MSEC  = 30000   // 30 second timeout for new level to be reached

final byte MOVE_INSTANTLY = 0x01				//Ignored by device, moves at it's one speed.

final byte BLINDS_CLOSED = 0
final byte BLINDS_OPEN = 99				//0x63

final byte BLINDS_FAVORITE = 0xFF		// send device 0xFF to request that it move to its pre-programmed 'favorite' level

@Field final int LEVEL_NOT_SET = -2

////////////////////////////////////////////////////////////////////////////////
// Driver Lifecycle Callbacks
////////////////////////////////////////////////////////////////////////////////
  
onAdded {
	log.debug "{} added with Attributes {}", DEVICE_NAME, message.attributes
	Shade.levelchanged                ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
}

onConnected {
	log.debug "{} connected", DEVICE_NAME

	// get the level of the battery 0 - 100%
	ZWave.battery.get()

	// get the current Blinds Level
	ZWave.switch_multilevel.get()
	
	// set recommended offline timeout interval
	ZWave.setOfflineTimeout( OFFLINE_TIMEOUT_SECS )
		
	// poll shade level to make sure it's still there
	ZWave.poll(POLLING_INTERVAL_SEC, ZWave.switch_multilevel.get)
	
	setMoveInProgress(false)
	setSetTo100(false)
	
}

onDisconnected {
	log.debug "{} disconnected", DEVICE_NAME
}

onRemoved {
	log.debug "{} removed", DEVICE_NAME
}

////////////////////////////////////////////////////////////////////////////////
// Capability Support
////////////////////////////////////////////////////////////////////////////////

setAttributes('shade') {
	log.debug "{} received 'shade' UI Display Mode setAttributes message {} ", DEVICE_NAME, message
	def attributes = message.attributes
	int mode;
	for (attribute in attributes){
		switch (attribute.key){
			case Shade.level:
					int newlevel = attribute.value
					if ( 100 == newlevel) {
						newlevel = 99			//ZWave max open is 99 (0x63)
						//save that we want 100
						setSetTo100(true)
					} else {
						setSetTo100(false)
					}
					if (BLINDS_OPEN >= newlevel && BLINDS_CLOSED <= newlevel){
						ZWave.switch_multilevel.set( newlevel, MOVE_INSTANTLY)
						//blind does not report position if sent by hub, so mark true
						//if we send, and then check
						initiateMoveToLevel(newlevel)
					}else{
						log.info "{} dropping invalid attribute value [{}]", DEVICE_NAME,  attribute.value
					}
				break
			default:
				log.debug "{} unrecognized attribute : {}", DEVICE_NAME, attribute
				break
		}

	}
}

onShade.GoToOpen {
	log.debug 'Go To Open'
       
	setSetTo100(true)	// Go To Open should really set level to 100
	ZWave.switch_multilevel.set( BLINDS_OPEN, MOVE_INSTANTLY)
       
	initiateMoveToLevel((int)BLINDS_OPEN)
       
	// send a response so event processing completes and next event can be handled
	sendResponse 'shade:GoToOpenResponse', [:]    
}

onShade.GoToClosed {
	log.debug 'Go To Closed'

	ZWave.switch_multilevel.set( BLINDS_CLOSED, MOVE_INSTANTLY)
       
	initiateMoveToLevel((int)BLINDS_CLOSED)
       
	// send a response so event processing completes and next event can be handled
	sendResponse 'shade:GoToClosedResponse', [:]
}

onShade.GoToFavorite {
	log.debug 'Go To Favorite'
       
	ZWave.switch_multilevel.set( BLINDS_FAVORITE, MOVE_INSTANTLY)
	resetTargetLevel()          // clear 'target' level, since we don't know what it is
	setMoveInProgress(true)     // set true so when battery level reported after move completes, we query actual level
	
	// send a response so event processing completes and next event can be handled
	sendResponse 'shade:GoToFavoriteResponse', [:]
}

////////////////////////////////////////////////////////////////////////////////
// Protocol Message Callbacks
////////////////////////////////////////////////////////////////////////////////

onZWaveMessage.switch_multilevel.report {
	log.debug "Driver received multilevel switch report: {}", message
	int level = new Double(message.command.get('value')).intValue()
	
	if (BLINDS_CLOSED > level || BLINDS_OPEN < level){
		log.info "Invalid level reported by blind [{}]", level
		return
	}
	
	// save the last reported level (in case we need it later, see timeout event below)
	setLastReportedLevel(level)

	// if we did NOT initiate a move, or we did and the level reported matches our 'target', or 'target' is not set, then process the level
	if (!getMoveInProgress() || ((getTargetLevel() == level) || (getTargetLevel() == LEVEL_NOT_SET))) {
		def prevOpen = Shade.level.get()		
		if (BLINDS_OPEN == level){
			// if level is 99, but driver did not initiate, or driver did initiate but wants 100, then set to 100
			shade.level ((!getMoveInProgress() || getSetTo100()) ? 100 : level)
			// done with any initiated move to 100, so reset flag
			setSetTo100(false)
		} else {
			shade.level level
		}
		if (Shade.level.get() != prevOpen) {
			Shade.levelchanged new Date()
		}
		endMoveInProgress()
	}
}

onZWaveMessage.battery.report {
	// pass message to generic ZWave Battery Report handler
	GenericZWaveBattery.handleBatteryReport(this, DEVICE_NAME, message)
	//We got a battery report.  Move just completed.  New level will be reported if done locally or by 
	//someone else, but if we requested the move we need to ask
	if (getMoveInProgress()){
		ZWave.switch_multilevel.get()
	}
}

onZWaveMessage {
    log.debug "{} received unhandled ZWave message {}", DEVICE_NAME, message
    return false;
}

////////////////////////////////////////////////////////////////////////////////
// Utilities
////////////////////////////////////////////////////////////////////////////////

void initiateMoveToLevel(int level) {
	log.trace "{} Starting Move to Level", DEVICE_NAME
	if (!getMoveInProgress()) {
		setMoveInProgress(true)
		resetLastReportedLevel()
	}
	setTargetLevel(level)
	// schedule move timeout event
	Scheduler.scheduleIn MOVE_TO_LEVEL_TIMEOUT_EVENT, MOVE_TO_LEVEL_TIMEOUT_MSEC
}

void endMoveInProgress() {
	log.trace "{} Reached Target Level", DEVICE_NAME
	// cancel move timeout event
	Scheduler.cancel MOVE_TO_LEVEL_TIMEOUT_EVENT
	setMoveInProgress(false)
	setSetTo100(false)
	resetLastReportedLevel()
	resetTargetLevel()
}

onEvent(MOVE_TO_LEVEL_TIMEOUT_EVENT){
	log.trace "{} Move To Level Timed Out", DEVICE_NAME
	// if a level was reported, but was not processed because it was not the target level, just use it
	int lastLevel = getLastReportedLevel()
	if (LEVEL_NOT_SET != lastLevel) {
		if (BLINDS_OPEN == lastLevel) lastLevel = 100	// force 99 to 100 like we always do with async reported levels of 99
		log.debug "{} Set Level to last reported level of {}", DEVICE_NAME, lastLevel
		shade.level lastLevel
		// now do a get, just to make sure we have latest level (it will be processed as async report, as if done by remote)
		ZWave.switch_multilevel.get()
	}
	resetLastReportedLevel()
	setMoveInProgress(false)
	resetTargetLevel()
}

// Accessors for flag indicating that driver initiated a move to a new level
boolean getMoveInProgress(){
	return  vars.'moveInProgress' ?:false
}
void setMoveInProgress(boolean status){
	vars.'moveInProgress' = status
	log.trace "{} Set 'moveInProgress' to {}", DEVICE_NAME, status
}

// Accessors for flag indicating that level set was 100, not 99 (which is Z-Wave max allowed)
boolean getSetTo100(){
	return  vars.'setTo100' ?:false
}
void setSetTo100(boolean status){
	vars.'setTo100' = status
	log.trace "{} Set 'setTo100' to {}", DEVICE_NAME, status
}

// Accessors for var saving last 'reported' level from device
int getLastReportedLevel() {
	return vars.'lastReportedLevel' ?: LEVEL_NOT_SET
}
void setLastReportedLevel(int level) {
	vars.'lastReportedLevel' = level
	log.trace "{} Set 'lastReportedLevel' to {}", DEVICE_NAME, level
}
void resetLastReportedLevel() {
	vars.'lastReportedLevel' = LEVEL_NOT_SET
	log.trace "{} Reset 'lastReportedLevel'", DEVICE_NAME
}

// Accessors for var saving 'target' level for device
int getTargetLevel() {
	return vars.'targetLevel' ?: LEVEL_NOT_SET
}
void setTargetLevel(int level) {
	vars.'targetLevel' = level
	log.trace "{} Set 'targetLevel' to {}", DEVICE_NAME, level
}
void resetTargetLevel() {
	vars.'targetLevel' = LEVEL_NOT_SET
	log.trace "{} Reset 'targetLevel'", DEVICE_NAME
}


