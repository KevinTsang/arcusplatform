/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import groovy.transform.Field
/**
 * Mock driver for a Tilt Sensor with Contact
 */
driver			"MOCK_TiltSensorWithContact"
description		"Driver for the Mock Tilt Sensor with Contact"
version			"1.1"
protocol		"MOCK"
deviceTypeHint	"Tilt"
productId		"fbf00f"
vendor 			"Mockitron"
model 			"TiltSensorWithContact"

matcher         'MOCK:Capability' : 'TiltSensorWithContact'
matcher        'MOCK:ProductId'  : 'fbf00f'

capabilities    'DevicePower', 'Tilt', 'Contact', 'DeviceMock'

importCapability 'generic/GenericContact'
importCapability 'generic/GenericTiltWithContact'

@Field def final String DEVICE_NAME = "Mock Tilt Sensor With Contact"
// ########### driver lifecycle callbacks ################## 

onAdded {
	log.debug "${DEVICE_NAME} started."
	Device.name DEVICE_NAME
	
	DeviceConnection.signal             82
	
	DevicePower.source                  DevicePower.SOURCE_BATTERY
	DevicePower.linecapable             false
	DevicePower.battery                 75
	DevicePower.backupbatterycapable    false
	DevicePower.sourcechanged           ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())

	Tilt.tiltstate                      Tilt.TILTSTATE_UPRIGHT
	Tilt.tiltstatechanged               ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
	
	boolean isClosedOnUpright = Base.tags.get().contains('closedOnUpright')
	if(isClosedOnUpright) {
		Contact.contact                     Contact.CONTACT_CLOSED
	}else {
		Contact.contact                     Contact.CONTACT_OPENED
	}
	
	Contact.contactchanged              ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
	Contact.usehint						Contact.USEHINT_UNKNOWN
}
 
onConnected {
	log.debug "${DEVICE_NAME} connected."
}

onDisconnected {
	log.debug "${DEVICE_NAME} disconnected."
}

onRemoved {
	log.debug "${DEVICE_NAME} removed."
}


// ########### capability support ##################

setAttributes('tilt') {
	log.debug "${DEVICE_NAME} tilt:SetAttributes:" + message.attributes
	def prevState = Tilt.tiltstate.get()
	attributes << message.attributes
	if (Tilt.tiltstate.get() != prevState) {
		def now = new Date()
		Tilt.tiltstatechanged now
	
		def attrs = message.attributes;
		for(attribute in attrs) {
			switch(attribute.key) {
				case Tilt.tiltstate:
				    def newTiltState = attribute.value
					boolean isClosedOnUpright = Base.tags.get().contains('closedOnUpright')
					if((Tilt.TILTSTATE_UPRIGHT == newTiltState && isClosedOnUpright) || (Tilt.TILTSTATE_FLAT == newTiltState && !isClosedOnUpright)) {
						Contact.contact Contact.CONTACT_CLOSED
						Contact.contactchanged now
					}else {
						Contact.contact Contact.CONTACT_OPENED
						Contact.contactchanged now
					}
					log.debug "${DEVICE_NAME} tilt:SetAttributes:Contact.contact is changed to ${Contact.contact.get()}"
					break
				default:
					log.debug "${DEVICE_NAME} tilt:SetAttributes: unknown attribute.key ${attribute.key}"
			}
		}
	}
}     


onBase.AddTags {
	GenericTiltWithContact.doAddTags(this, message, DEVICE_NAME)	
}

onBase.RemoveTags {
	GenericTiltWithContact.doRemoveTags(this, message, DEVICE_NAME)
}



// ########### mock stuff here #####################

onPlatform ("devmock:Connect") {
  log.debug "${DEVICE_NAME} devmock:Connect"
  connected();
  sendResponse "devmock:ConnectResponse", [:]
}

onPlatform ("devmock:Disconnect") {
  log.debug "${DEVICE_NAME} devmock:Disconnect"
  disconnected();
  sendResponse "devmock:ConnectResponse", [:]
}

onPlatform ("devmock:SetAttributes") {
  log.debug "${DEVICE_NAME} devmock:SetAttributes:" + message.attributes.attrs
  attributes << message.attributes.attrs;
  if (message.attributes.attrs['tilt:tiltstate']) {
    Tilt.tiltstatechanged new Date()
  }
  sendResponse "devmock:SetAttributesResponse", [:]
}

